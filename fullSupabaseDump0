--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 16.9 (Ubuntu 16.9-0ubuntu0.24.04.1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: auth; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO supabase_admin;

--
-- Name: bookkeeper; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA bookkeeper;


ALTER SCHEMA bookkeeper OWNER TO postgres;

--
-- Name: crm; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA crm;


ALTER SCHEMA crm OWNER TO postgres;

--
-- Name: pg_cron; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_cron WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION pg_cron; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_cron IS 'Job scheduler for PostgreSQL';


--
-- Name: extensions; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA extensions;


ALTER SCHEMA extensions OWNER TO postgres;

--
-- Name: gis; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA gis;


ALTER SCHEMA gis OWNER TO postgres;

--
-- Name: SCHEMA gis; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA gis IS 'Private GIS property scraping schema - access only via public views';


--
-- Name: graphql; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql;


ALTER SCHEMA graphql OWNER TO supabase_admin;

--
-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql_public;


ALTER SCHEMA graphql_public OWNER TO supabase_admin;

--
-- Name: inventory; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA inventory;


ALTER SCHEMA inventory OWNER TO postgres;

--
-- Name: mileage; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA mileage;


ALTER SCHEMA mileage OWNER TO postgres;

--
-- Name: SCHEMA mileage; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA mileage IS 'Dedicated schema for mileage tracking functionality';


--
-- Name: pg_net; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_net WITH SCHEMA extensions;


--
-- Name: EXTENSION pg_net; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_net IS 'Async HTTP';


--
-- Name: pgbouncer; Type: SCHEMA; Schema: -; Owner: pgbouncer
--

CREATE SCHEMA pgbouncer;


ALTER SCHEMA pgbouncer OWNER TO pgbouncer;

--
-- Name: realtime; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA realtime;


ALTER SCHEMA realtime OWNER TO supabase_admin;

--
-- Name: storage; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA storage;


ALTER SCHEMA storage OWNER TO supabase_admin;

--
-- Name: supabase_functions; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA supabase_functions;


ALTER SCHEMA supabase_functions OWNER TO supabase_admin;

--
-- Name: vault; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA vault;


ALTER SCHEMA vault OWNER TO supabase_admin;

--
-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA graphql;


--
-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_graphql IS 'pg_graphql: GraphQL support';


--
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;


--
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: supabase_vault; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS supabase_vault WITH SCHEMA vault;


--
-- Name: EXTENSION supabase_vault; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION supabase_vault IS 'Supabase Vault Extension';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: aal_level; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.aal_level AS ENUM (
    'aal1',
    'aal2',
    'aal3'
);


ALTER TYPE auth.aal_level OWNER TO supabase_auth_admin;

--
-- Name: code_challenge_method; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.code_challenge_method AS ENUM (
    's256',
    'plain'
);


ALTER TYPE auth.code_challenge_method OWNER TO supabase_auth_admin;

--
-- Name: factor_status; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_status AS ENUM (
    'unverified',
    'verified'
);


ALTER TYPE auth.factor_status OWNER TO supabase_auth_admin;

--
-- Name: factor_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_type AS ENUM (
    'totp',
    'webauthn',
    'phone'
);


ALTER TYPE auth.factor_type OWNER TO supabase_auth_admin;

--
-- Name: one_time_token_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.one_time_token_type AS ENUM (
    'confirmation_token',
    'reauthentication_token',
    'recovery_token',
    'email_change_token_new',
    'email_change_token_current',
    'phone_change_token'
);


ALTER TYPE auth.one_time_token_type OWNER TO supabase_auth_admin;

--
-- Name: action; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.action AS ENUM (
    'INSERT',
    'UPDATE',
    'DELETE',
    'TRUNCATE',
    'ERROR'
);


ALTER TYPE realtime.action OWNER TO supabase_admin;

--
-- Name: equality_op; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.equality_op AS ENUM (
    'eq',
    'neq',
    'lt',
    'lte',
    'gt',
    'gte',
    'in'
);


ALTER TYPE realtime.equality_op OWNER TO supabase_admin;

--
-- Name: user_defined_filter; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.user_defined_filter AS (
	column_name text,
	op realtime.equality_op,
	value text
);


ALTER TYPE realtime.user_defined_filter OWNER TO supabase_admin;

--
-- Name: wal_column; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_column AS (
	name text,
	type_name text,
	type_oid oid,
	value jsonb,
	is_pkey boolean,
	is_selectable boolean
);


ALTER TYPE realtime.wal_column OWNER TO supabase_admin;

--
-- Name: wal_rls; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_rls AS (
	wal jsonb,
	is_rls_enabled boolean,
	subscription_ids uuid[],
	errors text[]
);


ALTER TYPE realtime.wal_rls OWNER TO supabase_admin;

--
-- Name: email(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.email() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.email', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
  )::text
$$;


ALTER FUNCTION auth.email() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION email(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.email() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';


--
-- Name: jwt(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.jwt() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select 
    coalesce(
        nullif(current_setting('request.jwt.claim', true), ''),
        nullif(current_setting('request.jwt.claims', true), '')
    )::jsonb
$$;


ALTER FUNCTION auth.jwt() OWNER TO supabase_auth_admin;

--
-- Name: role(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.role() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.role', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
  )::text
$$;


ALTER FUNCTION auth.role() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION role(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.role() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';


--
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.sub', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
  )::uuid
$$;


ALTER FUNCTION auth.uid() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION uid(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.uid() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';


--
-- Name: grant_pg_cron_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_cron_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_cron'
  )
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option;
    revoke all on table cron.job from postgres;
    grant select on table cron.job to postgres with grant option;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_cron_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_cron_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_cron_access() IS 'Grants access to pg_cron';


--
-- Name: grant_pg_graphql_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_graphql_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        DROP FUNCTION IF EXISTS graphql_public.graphql;
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last
        -- function in the extension so we need to grant permissions on existing entities AND
        -- update default permissions to any others that are created after `graphql.resolve`
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;
        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;
        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles
        grant usage on schema graphql_public to postgres with grant option;
        grant usage on schema graphql to postgres with grant option;
    END IF;

END;
$_$;


ALTER FUNCTION extensions.grant_pg_graphql_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_graphql_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_graphql_access() IS 'Grants access to pg_graphql';


--
-- Name: grant_pg_net_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_net_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
  BEGIN
    IF EXISTS (
      SELECT 1
      FROM pg_event_trigger_ddl_commands() AS ev
      JOIN pg_extension AS ext
      ON ev.objid = ext.oid
      WHERE ext.extname = 'pg_net'
    )
    THEN
      GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;

      IF EXISTS (
        SELECT FROM pg_extension
        WHERE extname = 'pg_net'
        -- all versions in use on existing projects as of 2025-02-20
        -- version 0.12.0 onwards don't need these applied
        AND extversion IN ('0.2', '0.6', '0.7', '0.7.1', '0.8', '0.10.0', '0.11.0')
      ) THEN
        ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
        ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;

        ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
        ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;

        REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
        REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;

        GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
        GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
      END IF;
    END IF;
  END;
  $$;


ALTER FUNCTION extensions.grant_pg_net_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_net_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_net_access() IS 'Grants access to pg_net';


--
-- Name: pgrst_ddl_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_ddl_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  cmd record;
BEGIN
  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()
  LOOP
    IF cmd.command_tag IN (
      'CREATE SCHEMA', 'ALTER SCHEMA'
    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'
    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'
    , 'CREATE VIEW', 'ALTER VIEW'
    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'
    , 'CREATE FUNCTION', 'ALTER FUNCTION'
    , 'CREATE TRIGGER'
    , 'CREATE TYPE', 'ALTER TYPE'
    , 'CREATE RULE'
    , 'COMMENT'
    )
    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp
    AND cmd.schema_name is distinct from 'pg_temp'
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_ddl_watch() OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_drop_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  obj record;
BEGIN
  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
  LOOP
    IF obj.object_type IN (
      'schema'
    , 'table'
    , 'foreign table'
    , 'view'
    , 'materialized view'
    , 'function'
    , 'trigger'
    , 'type'
    , 'rule'
    )
    AND obj.is_temporary IS false -- no pg_temp objects
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_drop_watch() OWNER TO supabase_admin;

--
-- Name: set_graphql_placeholder(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.set_graphql_placeholder() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO supabase_admin;

--
-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';


--
-- Name: update_inventory_item_quantity_after_transaction(); Type: FUNCTION; Schema: inventory; Owner: postgres
--

CREATE FUNCTION inventory.update_inventory_item_quantity_after_transaction() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    UPDATE inventory.items 
    SET current_quantity = NEW.quantity_after,
        updated_at = timezone('utc'::text, now())
    WHERE id = NEW.item_id;
    
    INSERT INTO inventory.alerts (item_id, user_id, organization_id, alert_type, message, auto_generated, threshold_value, current_value)
    SELECT 
        NEW.item_id,
        NEW.user_id,
        NEW.organization_id,
        CASE 
            WHEN NEW.quantity_after = 0 THEN 'out_of_stock'
            WHEN NEW.quantity_after <= i.minimum_threshold THEN 'low_stock'
            ELSE NULL
        END,
        CASE 
            WHEN NEW.quantity_after = 0 THEN 'Item "' || i.name || '" is out of stock'
            WHEN NEW.quantity_after <= i.minimum_threshold THEN 'Item "' || i.name || '" is below minimum threshold (' || i.minimum_threshold || ')'
            ELSE NULL
        END,
        true,
        i.minimum_threshold,
        NEW.quantity_after
    FROM inventory.items i
    WHERE i.id = NEW.item_id 
    AND (NEW.quantity_after = 0 OR NEW.quantity_after <= i.minimum_threshold)
    AND NOT EXISTS (
        SELECT 1 FROM inventory.alerts a 
        WHERE a.item_id = NEW.item_id 
        AND a.alert_type IN ('low_stock', 'out_of_stock') 
        AND a.status = 'active'
    );
    
    RETURN NEW;
END;
$$;


ALTER FUNCTION inventory.update_inventory_item_quantity_after_transaction() OWNER TO postgres;

--
-- Name: add_entry(date, text, numeric, boolean, text, text, uuid, text); Type: FUNCTION; Schema: mileage; Owner: postgres
--

CREATE FUNCTION mileage.add_entry(p_date date, p_purpose text, p_miles numeric, p_is_business boolean DEFAULT true, p_start_location text DEFAULT NULL::text, p_end_location text DEFAULT NULL::text, p_customer_id uuid DEFAULT NULL::uuid, p_notes text DEFAULT NULL::text) RETURNS uuid
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    new_id UUID;
    customer_name_val TEXT;
BEGIN
    -- Validate required fields
    IF p_purpose IS NULL OR p_purpose = '' THEN
        RAISE EXCEPTION 'Purpose is required for tax documentation';
    END IF;
    
    IF p_miles IS NULL OR p_miles <= 0 THEN
        RAISE EXCEPTION 'Miles must be greater than 0';
    END IF;

    IF p_date IS NULL THEN
        RAISE EXCEPTION 'Date is required';
    END IF;

    -- Get customer name if customer_id is provided (from public.customers view)
    IF p_customer_id IS NOT NULL THEN
        SELECT full_name INTO customer_name_val
        FROM public.customers
        WHERE id = p_customer_id;
    END IF;

    -- Insert the mileage entry
    INSERT INTO mileage.entries (
        user_id,
        date,
        purpose,
        miles,
        is_business,
        start_location,
        end_location,
        customer_id,
        customer_name,
        notes
    )
    VALUES (
        auth.uid(),
        p_date,
        p_purpose,
        p_miles,
        p_is_business,
        p_start_location,
        p_end_location,
        p_customer_id,
        customer_name_val,
        p_notes
    )
    RETURNING id INTO new_id;

    RETURN new_id;
END;
$$;


ALTER FUNCTION mileage.add_entry(p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text) OWNER TO postgres;

--
-- Name: calculate_distance(text, text); Type: FUNCTION; Schema: mileage; Owner: postgres
--

CREATE FUNCTION mileage.calculate_distance(p_start_location text, p_end_location text) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    -- Placeholder for future Google Directions API integration
    RETURN 0;
END;
$$;


ALTER FUNCTION mileage.calculate_distance(p_start_location text, p_end_location text) OWNER TO postgres;

--
-- Name: delete_entry(uuid); Type: FUNCTION; Schema: mileage; Owner: postgres
--

CREATE FUNCTION mileage.delete_entry(p_id uuid) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    -- Delete only if user owns the entry
    DELETE FROM mileage.entries
    WHERE id = p_id AND user_id = auth.uid();

    IF NOT FOUND THEN
        RAISE EXCEPTION 'Mileage entry not found or access denied';
    END IF;
END;
$$;


ALTER FUNCTION mileage.delete_entry(p_id uuid) OWNER TO postgres;

--
-- Name: get_growth(uuid); Type: FUNCTION; Schema: mileage; Owner: postgres
--

CREATE FUNCTION mileage.get_growth(p_user_id uuid DEFAULT NULL::uuid) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    current_month_miles DECIMAL;
    last_month_miles DECIMAL;
    target_user_id UUID;
BEGIN
    target_user_id := COALESCE(p_user_id, auth.uid());
    
    -- Get current month miles
    SELECT COALESCE(SUM(miles), 0) INTO current_month_miles
    FROM mileage.entries
    WHERE user_id = target_user_id
    AND date >= DATE_TRUNC('month', CURRENT_DATE)
    AND date < DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '1 month';
    
    -- Get last month miles
    SELECT COALESCE(SUM(miles), 0) INTO last_month_miles
    FROM mileage.entries
    WHERE user_id = target_user_id
    AND date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month'
    AND date < DATE_TRUNC('month', CURRENT_DATE);
    
    -- Calculate growth percentage
    IF last_month_miles = 0 THEN
        RETURN CASE WHEN current_month_miles > 0 THEN 100 ELSE 0 END;
    ELSE
        RETURN ROUND(((current_month_miles - last_month_miles) / last_month_miles * 100), 1);
    END IF;
END;
$$;


ALTER FUNCTION mileage.get_growth(p_user_id uuid) OWNER TO postgres;

--
-- Name: update_entry(uuid, date, text, numeric, boolean, text, text, uuid, text); Type: FUNCTION; Schema: mileage; Owner: postgres
--

CREATE FUNCTION mileage.update_entry(p_id uuid, p_date date, p_purpose text, p_miles numeric, p_is_business boolean DEFAULT true, p_start_location text DEFAULT NULL::text, p_end_location text DEFAULT NULL::text, p_customer_id uuid DEFAULT NULL::uuid, p_notes text DEFAULT NULL::text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    customer_name_val TEXT;
BEGIN
    -- Validate required fields
    IF p_purpose IS NULL OR p_purpose = '' THEN
        RAISE EXCEPTION 'Purpose is required for tax documentation';
    END IF;
    
    IF p_miles IS NULL OR p_miles <= 0 THEN
        RAISE EXCEPTION 'Miles must be greater than 0';
    END IF;

    IF p_date IS NULL THEN
        RAISE EXCEPTION 'Date is required';
    END IF;

    -- Get customer name if customer_id is provided
    IF p_customer_id IS NOT NULL THEN
        SELECT full_name INTO customer_name_val
        FROM public.customers
        WHERE id = p_customer_id;
    END IF;

    -- Update the mileage entry (only if user owns it)
    UPDATE mileage.entries
    SET
        date = p_date,
        purpose = p_purpose,
        miles = p_miles,
        is_business = p_is_business,
        start_location = p_start_location,
        end_location = p_end_location,
        customer_id = p_customer_id,
        customer_name = customer_name_val,
        notes = p_notes,
        updated_at = timezone('utc'::text, now())
    WHERE id = p_id AND user_id = auth.uid();

    IF NOT FOUND THEN
        RAISE EXCEPTION 'Mileage entry not found or access denied';
    END IF;
END;
$$;


ALTER FUNCTION mileage.update_entry(p_id uuid, p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text) OWNER TO postgres;

--
-- Name: get_auth(text); Type: FUNCTION; Schema: pgbouncer; Owner: supabase_admin
--

CREATE FUNCTION pgbouncer.get_auth(p_usename text) RETURNS TABLE(username text, password text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
begin
    raise debug 'PgBouncer auth request: %', p_usename;

    return query
    select 
        rolname::text, 
        case when rolvaliduntil < now() 
            then null 
            else rolpassword::text 
        end 
    from pg_authid 
    where rolname=$1 and rolcanlogin;
end;
$_$;


ALTER FUNCTION pgbouncer.get_auth(p_usename text) OWNER TO supabase_admin;

--
-- Name: add_customer(text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.add_customer(full_name text, email text, phone text, business text, status text) RETURNS uuid
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    new_customer_id UUID;
    user_org_id UUID;
BEGIN
    user_org_id := public.get_user_organization_id();
    
    IF user_org_id IS NULL THEN
        RAISE EXCEPTION 'User does not belong to any organization';
    END IF;
    
    INSERT INTO crm.customers (full_name, email, phone, business, status, organization_id)
    VALUES (full_name, email, phone, business, status, user_org_id)
    RETURNING id INTO new_customer_id;
    
    RETURN new_customer_id;
END;
$$;


ALTER FUNCTION public.add_customer(full_name text, email text, phone text, business text, status text) OWNER TO postgres;

--
-- Name: add_interaction(uuid, text, text, text, text, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.add_interaction(customer_id uuid, type text, title text, notes text, outcome text, follow_up_required boolean) RETURNS uuid
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    new_interaction_id UUID;
    user_org_id UUID;
BEGIN
    user_org_id := public.get_user_organization_id();
    
    IF user_org_id IS NULL THEN
        RAISE EXCEPTION 'User does not belong to any organization';
    END IF;
    
    INSERT INTO crm.interactions (
        customer_id, type, title, notes, outcome, follow_up_required, organization_id
    )
    VALUES (
        customer_id, type, title, notes, outcome, follow_up_required, user_org_id
    )
    RETURNING id INTO new_interaction_id;
    
    RETURN new_interaction_id;
END;
$$;


ALTER FUNCTION public.add_interaction(customer_id uuid, type text, title text, notes text, outcome text, follow_up_required boolean) OWNER TO postgres;

--
-- Name: add_inventory_item(text, text, text, text, text, text, integer, integer, integer, text, numeric, numeric, text, text, text, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.add_inventory_item(p_name text, p_category text, p_description text DEFAULT NULL::text, p_sku text DEFAULT NULL::text, p_subcategory text DEFAULT NULL::text, p_location text DEFAULT NULL::text, p_current_quantity integer DEFAULT 0, p_minimum_threshold integer DEFAULT 0, p_maximum_capacity integer DEFAULT NULL::integer, p_unit_of_measurement text DEFAULT 'units'::text, p_unit_cost numeric DEFAULT 0, p_unit_price numeric DEFAULT 0, p_supplier text DEFAULT NULL::text, p_supplier_contact text DEFAULT NULL::text, p_notes text DEFAULT NULL::text, p_auto_reorder_enabled boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_user_id uuid;
    v_organization_id uuid;
    v_item_id uuid;
BEGIN
    -- Get current user ID
    SELECT auth.uid() INTO v_user_id;
    
    -- CRITICAL FIX: Use JWT approach like bookkeeper instead of auth.users query
    -- This matches the working bookkeeper.add_transaction pattern exactly
    SELECT (auth.jwt() ->> 'user_metadata')::json ->> 'organization_id' INTO v_organization_id;
    
    -- Block if no organization_id (same as delete function)
    IF v_organization_id IS NULL THEN
        RAISE EXCEPTION 'User must have organization_id in metadata to create inventory items';
    END IF;
    
    INSERT INTO inventory.items (
        user_id, organization_id, name, description, sku, category, subcategory,
        location, current_quantity, minimum_threshold, maximum_capacity,
        unit_of_measurement, unit_cost, unit_price, supplier, supplier_contact,
        notes, auto_reorder_enabled, last_updated_by
    ) VALUES (
        v_user_id, v_organization_id::uuid, p_name, p_description, p_sku, p_category, p_subcategory,
        p_location, p_current_quantity, p_minimum_threshold, p_maximum_capacity,
        p_unit_of_measurement, p_unit_cost, p_unit_price, p_supplier, p_supplier_contact,
        p_notes, p_auto_reorder_enabled, v_user_id
    ) RETURNING id INTO v_item_id;
    
    -- Create initial transaction if quantity > 0
    IF p_current_quantity > 0 THEN
        INSERT INTO inventory.transactions (
            item_id, user_id, organization_id, transaction_type, quantity_change,
            quantity_before, quantity_after, reason, processed_by
        ) VALUES (
            v_item_id, v_user_id, v_organization_id::uuid, 'stock_in', p_current_quantity,
            0, p_current_quantity, 'Initial stock', v_user_id
        );
    END IF;
    
    -- Check for low stock alerts
    IF p_current_quantity <= p_minimum_threshold THEN
        INSERT INTO inventory.alerts (
            item_id, user_id, organization_id, alert_type, message, auto_generated,
            threshold_value, current_value
        ) VALUES (
            v_item_id, v_user_id, v_organization_id::uuid, 
            CASE WHEN p_current_quantity = 0 THEN 'out_of_stock' ELSE 'low_stock' END,
            CASE 
                WHEN p_current_quantity = 0 THEN 'Item "' || p_name || '" is out of stock'
                ELSE 'Item "' || p_name || '" is below minimum threshold (' || p_minimum_threshold || ')'
            END,
            true, p_minimum_threshold, p_current_quantity
        );
    END IF;
END;
$$;


ALTER FUNCTION public.add_inventory_item(p_name text, p_category text, p_description text, p_sku text, p_subcategory text, p_location text, p_current_quantity integer, p_minimum_threshold integer, p_maximum_capacity integer, p_unit_of_measurement text, p_unit_cost numeric, p_unit_price numeric, p_supplier text, p_supplier_contact text, p_notes text, p_auto_reorder_enabled boolean) OWNER TO postgres;

--
-- Name: add_mileage_entry(date, text, numeric, boolean, text, text, uuid, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.add_mileage_entry(p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text) RETURNS uuid
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    new_entry_id UUID;
    user_org_id UUID;
    customer_name_val TEXT;
BEGIN
    user_org_id := public.get_user_organization_id();
    
    IF user_org_id IS NULL THEN
        RAISE EXCEPTION 'User does not belong to any organization';
    END IF;
    
    -- Get customer name if customer_id is provided
    IF p_customer_id IS NOT NULL THEN
        SELECT full_name INTO customer_name_val 
        FROM crm.customers 
        WHERE id = p_customer_id;
    END IF;
    
    INSERT INTO mileage.entries (
        user_id, date, purpose, miles, is_business, start_location, 
        end_location, customer_id, customer_name, notes, organization_id
    )
    VALUES (
        auth.uid(), p_date, p_purpose, p_miles, p_is_business, p_start_location,
        p_end_location, p_customer_id, customer_name_val, p_notes, user_org_id
    )
    RETURNING id INTO new_entry_id;
    
    RETURN new_entry_id;
END;
$$;


ALTER FUNCTION public.add_mileage_entry(p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text) OWNER TO postgres;

--
-- Name: add_transaction(text, text, text, numeric, uuid, uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.add_transaction(type text, category text, description text, amount numeric, customer_id uuid DEFAULT NULL::uuid, interaction_id uuid DEFAULT NULL::uuid) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    user_org_id uuid;
BEGIN
    -- Get the organization_id from the current user's metadata
    SELECT (auth.jwt() ->> 'user_metadata')::json ->> 'organization_id' INTO user_org_id;
    
    INSERT INTO bookkeeper.transactions (
        type,
        category,
        description,
        amount,
        customer_id,
        interaction_id,
        source,
        uploaded_by,
        organization_id,
        timestamp
    )
    VALUES (
        type,
        category,
        description,
        amount,
        customer_id,
        interaction_id,
        'manual',
        auth.uid(),
        user_org_id::uuid,
        NOW()
    );
END;
$$;


ALTER FUNCTION public.add_transaction(type text, category text, description text, amount numeric, customer_id uuid, interaction_id uuid) OWNER TO postgres;

--
-- Name: calculate_next_payment_date(timestamp with time zone, text, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.calculate_next_payment_date(from_date timestamp with time zone, frequency text, day_of_month integer DEFAULT NULL::integer, day_of_week integer DEFAULT NULL::integer) RETURNS timestamp with time zone
    LANGUAGE plpgsql
    AS $$
DECLARE
    next_date TIMESTAMPTZ;
    target_day INTEGER;
    days_to_add INTEGER;
BEGIN
    CASE frequency
        WHEN 'daily' THEN
            next_date := from_date + INTERVAL '1 day';
            
        WHEN 'weekly' THEN
            IF day_of_week IS NOT NULL THEN
                -- Calculate days until next occurrence of target weekday
                days_to_add := (day_of_week - EXTRACT(DOW FROM from_date)::INTEGER + 7) % 7;
                IF days_to_add = 0 THEN
                    days_to_add := 7; -- Next week if today is the target day
                END IF;
                next_date := from_date + (days_to_add || ' days')::INTERVAL;
            ELSE
                next_date := from_date + INTERVAL '1 week';
            END IF;
            
        WHEN 'monthly' THEN
            IF day_of_month IS NOT NULL THEN
                -- Set to target day of next month
                next_date := date_trunc('month', from_date) + INTERVAL '1 month' + (day_of_month - 1 || ' days')::INTERVAL;
                
                -- Handle months where target day doesn't exist (e.g., Feb 30th -> Feb 28th)
                IF EXTRACT(DAY FROM next_date) != day_of_month THEN
                    next_date := date_trunc('month', next_date) + INTERVAL '1 month' - INTERVAL '1 day';
                END IF;
            ELSE
                next_date := from_date + INTERVAL '1 month';
            END IF;
            
        WHEN 'quarterly' THEN
            IF day_of_month IS NOT NULL THEN
                next_date := date_trunc('month', from_date) + INTERVAL '3 months' + (day_of_month - 1 || ' days')::INTERVAL;
                IF EXTRACT(DAY FROM next_date) != day_of_month THEN
                    next_date := date_trunc('month', next_date) + INTERVAL '1 month' - INTERVAL '1 day';
                END IF;
            ELSE
                next_date := from_date + INTERVAL '3 months';
            END IF;
            
        WHEN 'yearly' THEN
            IF day_of_month IS NOT NULL THEN
                next_date := date_trunc('year', from_date) + INTERVAL '1 year' + 
                            (EXTRACT(MONTH FROM from_date) - 1 || ' months')::INTERVAL + 
                            (day_of_month - 1 || ' days')::INTERVAL;
                IF EXTRACT(DAY FROM next_date) != day_of_month THEN
                    next_date := date_trunc('month', next_date) + INTERVAL '1 month' - INTERVAL '1 day';
                END IF;
            ELSE
                next_date := from_date + INTERVAL '1 year';
            END IF;
            
        ELSE
            -- Default to daily
            next_date := from_date + INTERVAL '1 day';
    END CASE;
    
    RETURN next_date;
END;
$$;


ALTER FUNCTION public.calculate_next_payment_date(from_date timestamp with time zone, frequency text, day_of_month integer, day_of_week integer) OWNER TO postgres;

--
-- Name: cleanup_gis_scraped_properties_api(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.cleanup_gis_scraped_properties_api() RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
        DECLARE
            deleted_count integer;
        BEGIN
            -- Only allow cleanup if user has GIS permissions
            IF NOT public.has_gis_permission('gis_scraper') THEN
                RAISE EXCEPTION 'Unauthorized: GIS scraper access required to trigger cleanup';
            END IF;

            -- Perform cleanup - only delete unsaved scraped properties older than 7 days
            DELETE FROM gis.scraped_properties 
            WHERE scraped_at < (now() - interval '7 days') 
            AND is_saved = false;
            
            GET DIAGNOSTICS deleted_count = ROW_COUNT;
            
            RETURN json_build_object(
                'success', true,
                'deleted_count', deleted_count,
                'cleaned_at', now()
            );
        END;
        $$;


ALTER FUNCTION public.cleanup_gis_scraped_properties_api() OWNER TO postgres;

--
-- Name: FUNCTION cleanup_gis_scraped_properties_api(); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.cleanup_gis_scraped_properties_api() IS 'API-callable function to clean up old unsaved GIS scraped properties';


--
-- Name: cleanup_scraped_properties(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.cleanup_scraped_properties() RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Only delete scraped properties that are older than 7 days AND haven't been saved
    DELETE FROM gis.scraped_properties 
    WHERE scraped_at < (now() - interval '7 days') 
    AND is_saved = false;
    
    RAISE NOTICE 'GIS scraped properties cleanup completed at %', now();
END;
$$;


ALTER FUNCTION public.cleanup_scraped_properties() OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: recurring_payments; Type: TABLE; Schema: bookkeeper; Owner: postgres
--

CREATE TABLE bookkeeper.recurring_payments (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    type text NOT NULL,
    category text NOT NULL,
    description text NOT NULL,
    amount numeric(10,2) NOT NULL,
    frequency text NOT NULL,
    start_date timestamp with time zone NOT NULL,
    end_date timestamp with time zone,
    day_of_month integer,
    day_of_week integer,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    created_by uuid NOT NULL,
    customer_id uuid,
    customer_name text,
    interaction_id uuid,
    interaction_title text,
    interaction_outcome text,
    next_payment_date timestamp with time zone NOT NULL,
    payments_processed integer DEFAULT 0,
    payment_limit integer,
    updated_by uuid,
    organization_id uuid NOT NULL,
    CONSTRAINT recurring_payments_day_of_month_check CHECK (((day_of_month >= 1) AND (day_of_month <= 31))),
    CONSTRAINT recurring_payments_day_of_week_check CHECK (((day_of_week >= 0) AND (day_of_week <= 6))),
    CONSTRAINT recurring_payments_frequency_check CHECK ((frequency = ANY (ARRAY['daily'::text, 'weekly'::text, 'monthly'::text, 'quarterly'::text, 'yearly'::text]))),
    CONSTRAINT recurring_payments_type_check CHECK ((type = ANY (ARRAY['income'::text, 'expense'::text])))
);

ALTER TABLE ONLY bookkeeper.recurring_payments FORCE ROW LEVEL SECURITY;


ALTER TABLE bookkeeper.recurring_payments OWNER TO postgres;

--
-- Name: create_recurring_payment(text, text, text, numeric, text, timestamp with time zone, timestamp with time zone, integer, integer, uuid, uuid, uuid, timestamp with time zone, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.create_recurring_payment(p_type text, p_category text, p_description text, p_amount numeric, p_frequency text, p_start_date timestamp with time zone, p_end_date timestamp with time zone DEFAULT NULL::timestamp with time zone, p_day_of_month integer DEFAULT NULL::integer, p_day_of_week integer DEFAULT NULL::integer, p_created_by uuid DEFAULT auth.uid(), p_customer_id uuid DEFAULT NULL::uuid, p_interaction_id uuid DEFAULT NULL::uuid, p_next_payment_date timestamp with time zone DEFAULT NULL::timestamp with time zone, p_payment_limit integer DEFAULT NULL::integer) RETURNS bookkeeper.recurring_payments
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    new_payment bookkeeper.recurring_payments;
    user_org_id uuid;
BEGIN
    -- Get the organization_id from the current user's metadata
    SELECT (auth.jwt() ->> 'user_metadata')::json ->> 'organization_id' INTO user_org_id;
    
    -- Insert the recurring payment
    INSERT INTO bookkeeper.recurring_payments (
        type, category, description, amount, frequency,
        start_date, end_date, day_of_month, day_of_week,
        created_by, customer_id, interaction_id,
        next_payment_date, payment_limit, organization_id
    ) VALUES (
        p_type, p_category, p_description, p_amount, p_frequency,
        p_start_date, p_end_date, p_day_of_month, p_day_of_week,
        p_created_by, p_customer_id, p_interaction_id,
        COALESCE(p_next_payment_date, p_start_date), p_payment_limit, user_org_id
    ) RETURNING * INTO new_payment;

    -- Update customer_name if customer_id is provided
    IF p_customer_id IS NOT NULL THEN
        UPDATE bookkeeper.recurring_payments 
        SET customer_name = (SELECT full_name FROM crm.customers WHERE id = p_customer_id AND organization_id = user_org_id)
        WHERE id = new_payment.id;
    END IF;

    -- Update interaction details if interaction_id is provided
    IF p_interaction_id IS NOT NULL THEN
        UPDATE bookkeeper.recurring_payments 
        SET 
            interaction_title = (SELECT title FROM crm.interactions WHERE id = p_interaction_id AND organization_id = user_org_id),
            interaction_outcome = (SELECT outcome FROM crm.interactions WHERE id = p_interaction_id AND organization_id = user_org_id)
        WHERE id = new_payment.id;
    END IF;

    -- Return the updated payment
    SELECT * INTO new_payment FROM bookkeeper.recurring_payments WHERE id = new_payment.id;
    RETURN new_payment;
END;
$$;


ALTER FUNCTION public.create_recurring_payment(p_type text, p_category text, p_description text, p_amount numeric, p_frequency text, p_start_date timestamp with time zone, p_end_date timestamp with time zone, p_day_of_month integer, p_day_of_week integer, p_created_by uuid, p_customer_id uuid, p_interaction_id uuid, p_next_payment_date timestamp with time zone, p_payment_limit integer) OWNER TO postgres;

--
-- Name: create_recurring_payment(text, text, text, numeric, text, timestamp with time zone, timestamp with time zone, integer, integer, uuid, uuid, uuid, timestamp with time zone, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.create_recurring_payment(p_type text, p_category text, p_description text, p_amount numeric, p_frequency text, p_start_date timestamp with time zone, p_end_date timestamp with time zone DEFAULT NULL::timestamp with time zone, p_day_of_month integer DEFAULT NULL::integer, p_day_of_week integer DEFAULT NULL::integer, p_created_by uuid DEFAULT auth.uid(), p_customer_id uuid DEFAULT NULL::uuid, p_interaction_id uuid DEFAULT NULL::uuid, p_next_payment_date timestamp with time zone DEFAULT NULL::timestamp with time zone, p_payment_limit integer DEFAULT NULL::integer, p_payments_processed integer DEFAULT 0) RETURNS bookkeeper.recurring_payments
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    new_payment bookkeeper.recurring_payments;
    user_org_id uuid;
BEGIN
    -- Get the organization_id from the current user's metadata
    SELECT (auth.jwt() ->> 'user_metadata')::json ->> 'organization_id' INTO user_org_id;
    
    -- Insert the recurring payment
    INSERT INTO bookkeeper.recurring_payments (
        type, category, description, amount, frequency,
        start_date, end_date, day_of_month, day_of_week,
        created_by, customer_id, interaction_id,
        next_payment_date, payment_limit, organization_id, payments_processed
    ) VALUES (
        p_type, p_category, p_description, p_amount, p_frequency,
        p_start_date, p_end_date, p_day_of_month, p_day_of_week,
        p_created_by, p_customer_id, p_interaction_id,
        COALESCE(p_next_payment_date, p_start_date), p_payment_limit, user_org_id, p_payments_processed
    ) RETURNING * INTO new_payment;

    -- Update customer_name if customer_id is provided
    IF p_customer_id IS NOT NULL THEN
        UPDATE bookkeeper.recurring_payments 
        SET customer_name = (SELECT full_name FROM crm.customers WHERE id = p_customer_id AND organization_id = user_org_id)
        WHERE id = new_payment.id;
    END IF;

    -- Update interaction details if interaction_id is provided
    IF p_interaction_id IS NOT NULL THEN
        UPDATE bookkeeper.recurring_payments 
        SET 
            interaction_title = (SELECT title FROM crm.interactions WHERE id = p_interaction_id AND organization_id = user_org_id),
            interaction_outcome = (SELECT outcome FROM crm.interactions WHERE id = p_interaction_id AND organization_id = user_org_id)
        WHERE id = new_payment.id;
    END IF;

    -- Return the updated payment
    SELECT * INTO new_payment FROM bookkeeper.recurring_payments WHERE id = new_payment.id;
    RETURN new_payment;
END;
$$;


ALTER FUNCTION public.create_recurring_payment(p_type text, p_category text, p_description text, p_amount numeric, p_frequency text, p_start_date timestamp with time zone, p_end_date timestamp with time zone, p_day_of_month integer, p_day_of_week integer, p_created_by uuid, p_customer_id uuid, p_interaction_id uuid, p_next_payment_date timestamp with time zone, p_payment_limit integer, p_payments_processed integer) OWNER TO postgres;

--
-- Name: delete_customer(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.delete_customer(p_id uuid) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    DELETE FROM crm.customers WHERE id = p_id;
    RETURN FOUND;
END;
$$;


ALTER FUNCTION public.delete_customer(p_id uuid) OWNER TO postgres;

--
-- Name: delete_interaction(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.delete_interaction(p_id uuid) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    DELETE FROM crm.interactions WHERE id = p_id;
    RETURN FOUND;
END;
$$;


ALTER FUNCTION public.delete_interaction(p_id uuid) OWNER TO postgres;

--
-- Name: delete_inventory_item(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.delete_inventory_item(p_id uuid) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_user_id uuid;
    v_organization_id uuid;
    v_item_name text;
BEGIN
    -- Get current user
    SELECT auth.uid() INTO v_user_id;
    
    -- CRITICAL FIX: Use JWT approach like bookkeeper instead of auth.users query
    SELECT (auth.jwt() ->> 'user_metadata')::json ->> 'organization_id' INTO v_organization_id;
    
    -- Block if no organization_id
    IF v_organization_id IS NULL THEN
        RAISE EXCEPTION 'User must have organization_id in metadata to delete inventory items';
    END IF;
    
    -- Get item name for logging (and verify it exists in user's org)
    SELECT name INTO v_item_name
    FROM inventory.items 
    WHERE id = p_id AND organization_id = v_organization_id::uuid;
    
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Item not found or access denied';
    END IF;
    
    -- Create a transaction record before deleting (for audit trail)
    INSERT INTO inventory.transactions (
        item_id, user_id, organization_id, transaction_type, quantity_change,
        quantity_before, quantity_after, reason, processed_by
    ) SELECT 
        p_id, v_user_id, v_organization_id::uuid, 'stock_out', 
        -current_quantity, current_quantity, 0, 
        'Item deleted: ' || v_item_name, v_user_id
    FROM inventory.items 
    WHERE id = p_id;
    
    -- Delete the item (this will cascade to related transactions and alerts)
    DELETE FROM inventory.items 
    WHERE id = p_id AND organization_id = v_organization_id::uuid;
    
END;
$$;


ALTER FUNCTION public.delete_inventory_item(p_id uuid) OWNER TO postgres;

--
-- Name: delete_mileage_entry(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.delete_mileage_entry(p_id uuid) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    DELETE FROM mileage.entries WHERE id = p_id;
    RETURN FOUND;
END;
$$;


ALTER FUNCTION public.delete_mileage_entry(p_id uuid) OWNER TO postgres;

--
-- Name: delete_recurring_payment(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.delete_recurring_payment(p_payment_id uuid) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    user_org_id uuid;
BEGIN
    -- Get the organization_id from the current user's metadata
    SELECT (auth.jwt() ->> 'user_metadata')::json ->> 'organization_id' INTO user_org_id;
    
    DELETE FROM bookkeeper.recurring_payments 
    WHERE id = p_payment_id AND organization_id = user_org_id;
    
    RETURN FOUND;
END;
$$;


ALTER FUNCTION public.delete_recurring_payment(p_payment_id uuid) OWNER TO postgres;

--
-- Name: delete_transaction(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.delete_transaction(p_id uuid) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    DELETE FROM bookkeeper.transactions WHERE id = p_id;
    RETURN FOUND;
END;
$$;


ALTER FUNCTION public.delete_transaction(p_id uuid) OWNER TO postgres;

--
-- Name: get_lead_stats_optimized(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_lead_stats_optimized(org_id uuid) RETURNS TABLE(total_leads bigint, qualified_leads bigint, manual_leads bigint, ai_generated_leads bigint, average_score numeric, closed_won_leads bigint)
    LANGUAGE sql STABLE
    AS $$
  SELECT 
    COUNT(*) as total_leads,
    COUNT(CASE WHEN is_qualified = true THEN 1 END) as qualified_leads,
    COUNT(CASE WHEN source = 'manual' THEN 1 END) as manual_leads,
    COUNT(CASE WHEN source = 'ai_agent' THEN 1 END) as ai_generated_leads,
    COALESCE(AVG(score), 0) as average_score,
    COUNT(CASE WHEN status = 'closed_won' THEN 1 END) as closed_won_leads
  FROM leads 
  WHERE organization_id = org_id;
$$;


ALTER FUNCTION public.get_lead_stats_optimized(org_id uuid) OWNER TO postgres;

--
-- Name: FUNCTION get_lead_stats_optimized(org_id uuid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.get_lead_stats_optimized(org_id uuid) IS 'Optimized function to get all lead statistics in a single query instead of 6 separate queries. 
Improves performance by ~70-80% for lead stats calculation.';


--
-- Name: get_mileage_growth(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_mileage_growth(p_user_id uuid DEFAULT NULL::uuid) RETURNS numeric
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RETURN mileage.get_growth(p_user_id);
END;
$$;


ALTER FUNCTION public.get_mileage_growth(p_user_id uuid) OWNER TO postgres;

--
-- Name: FUNCTION get_mileage_growth(p_user_id uuid); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.get_mileage_growth(p_user_id uuid) IS 'Calculate month-over-month mileage growth percentage';


--
-- Name: get_user_organization_id(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_user_organization_id() RETURNS uuid
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public', 'auth'
    AS $$
BEGIN
    RETURN (
        SELECT (users.raw_user_meta_data ->> 'organization_id')::uuid
        FROM auth.users
        WHERE users.id = auth.uid()
    );
END;
$$;


ALTER FUNCTION public.get_user_organization_id() OWNER TO postgres;

--
-- Name: handle_updated_at(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.handle_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.handle_updated_at() OWNER TO postgres;

--
-- Name: has_gis_permission(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.has_gis_permission(feature text DEFAULT 'gis_scraper'::text) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    user_org_id uuid;
    has_permission boolean := false;
BEGIN
    -- Get current user's organization ID
    user_org_id := public.get_user_organization_id();
    
    IF user_org_id IS NULL THEN
        RETURN false;
    END IF;
    
    -- Check if organization has permission for this feature
    SELECT gp.is_enabled INTO has_permission
    FROM public.gis_permissions gp
    WHERE gp.organization_id = user_org_id 
    AND gp.feature_name = feature
    AND gp.is_enabled = true;
    
    RETURN COALESCE(has_permission, false);
END;
$$;


ALTER FUNCTION public.has_gis_permission(feature text) OWNER TO postgres;

--
-- Name: FUNCTION has_gis_permission(feature text); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.has_gis_permission(feature text) IS 'Checks if current user organization has permission for specified GIS feature';


--
-- Name: process_due_recurring_payments(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.process_due_recurring_payments() RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    payment_record RECORD;
    processed_count INTEGER := 0;
    next_payment_date TIMESTAMPTZ;
BEGIN
    -- Find all due recurring payments
    FOR payment_record IN
        SELECT * FROM bookkeeper.recurring_payments 
        WHERE is_active = TRUE 
        AND next_payment_date <= NOW()
        AND (end_date IS NULL OR end_date > NOW())
        AND (payment_limit IS NULL OR payments_processed < payment_limit)
    LOOP
        -- Create transaction from recurring payment using your existing table structure
        INSERT INTO bookkeeper.transactions (
            type,
            category,
            description,
            amount,
            source,
            uploaded_by,
            customer_id,
            interaction_id,
            organization_id,
            timestamp
        ) VALUES (
            payment_record.type,
            payment_record.category,
            payment_record.description || ' (Recurring)',
            payment_record.amount,
            'recurring',
            payment_record.created_by,
            payment_record.customer_id,
            payment_record.interaction_id,
            payment_record.organization_id,
            NOW()
        );

        -- Calculate next payment date
        next_payment_date := calculate_next_payment_date(
            payment_record.next_payment_date,
            payment_record.frequency,
            payment_record.day_of_month,
            payment_record.day_of_week
        );

        -- Update recurring payment
        UPDATE bookkeeper.recurring_payments
        SET 
            next_payment_date = next_payment_date,
            payments_processed = payments_processed + 1,
            updated_at = NOW()
        WHERE id = payment_record.id;

        -- Check if we've reached the payment limit
        IF payment_record.payment_limit IS NOT NULL AND 
           payment_record.payments_processed + 1 >= payment_record.payment_limit THEN
            UPDATE bookkeeper.recurring_payments
            SET is_active = FALSE
            WHERE id = payment_record.id;
        END IF;

        processed_count := processed_count + 1;
    END LOOP;

    RETURN json_build_object('processed_count', processed_count);
END;
$$;


ALTER FUNCTION public.process_due_recurring_payments() OWNER TO postgres;

--
-- Name: process_recurring_payments_optimized(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.process_recurring_payments_optimized() RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    payment_record RECORD;
    processed_count INTEGER := 0;
    failed_count INTEGER := 0;
    next_payment_date TIMESTAMPTZ;
    error_details TEXT[];
BEGIN
    -- Process all due recurring payments in a single transaction
    FOR payment_record IN
        SELECT rp.* 
        FROM bookkeeper.recurring_payments rp
        WHERE rp.is_active = TRUE 
        AND rp.next_payment_date::DATE <= CURRENT_DATE
        AND (rp.end_date IS NULL OR rp.end_date > NOW())
        AND (rp.payment_limit IS NULL OR rp.payments_processed < rp.payment_limit)
        ORDER BY rp.next_payment_date ASC
    LOOP
        BEGIN
            -- Create transaction
            INSERT INTO bookkeeper.transactions (
                type, category, description, amount, date,
                created_by, customer_id, interaction_id, 
                customer_name, interaction_title, interaction_outcome,
                source, organization_id
            ) VALUES (
                payment_record.type,
                payment_record.category,
                payment_record.description || ' (Auto-Recurring)',
                payment_record.amount,
                payment_record.next_payment_date::DATE,
                payment_record.created_by,
                payment_record.customer_id,
                payment_record.interaction_id,
                payment_record.customer_name,
                payment_record.interaction_title,
                payment_record.interaction_outcome,
                'recurring_payment',
                payment_record.organization_id
            );
            
            -- Calculate next payment date using optimized function
            next_payment_date := calculate_next_payment_date(
                payment_record.next_payment_date,
                payment_record.frequency,
                payment_record.day_of_month,
                payment_record.day_of_week
            );
            
            -- Update recurring payment
            UPDATE bookkeeper.recurring_payments
            SET 
                next_payment_date = next_payment_date,
                payments_processed = payments_processed + 1,
                is_active = CASE 
                    WHEN payment_limit IS NOT NULL AND payments_processed + 1 >= payment_limit THEN FALSE
                    WHEN end_date IS NOT NULL AND next_payment_date > end_date THEN FALSE
                    ELSE TRUE
                END,
                updated_at = NOW()
            WHERE id = payment_record.id;
            
            processed_count := processed_count + 1;
            
        EXCEPTION WHEN OTHERS THEN
            -- Log error and continue with next payment
            failed_count := failed_count + 1;
            error_details := array_append(error_details, 
                'Payment ID ' || payment_record.id || ': ' || SQLERRM);
            CONTINUE;
        END;
    END LOOP;
    
    -- Return processing summary
    RETURN json_build_object(
        'processed_count', processed_count,
        'failed_count', failed_count,
        'timestamp', NOW(),
        'errors', COALESCE(error_details, ARRAY[]::TEXT[])
    );
END;
$$;


ALTER FUNCTION public.process_recurring_payments_optimized() OWNER TO postgres;

--
-- Name: set_user_organization(text, uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.set_user_organization(user_email text, org_id uuid) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    user_id UUID;
BEGIN
    -- Get user ID from email
    SELECT id INTO user_id FROM auth.users WHERE email = user_email;
    
    IF user_id IS NULL THEN
        RAISE EXCEPTION 'User not found with email: %', user_email;
    END IF;
    
    -- Update user metadata
    UPDATE auth.users 
    SET raw_user_meta_data = COALESCE(raw_user_meta_data, '{}'::jsonb) || jsonb_build_object('organization_id', org_id)
    WHERE id = user_id;
    
    RETURN TRUE;
END;
$$;


ALTER FUNCTION public.set_user_organization(user_email text, org_id uuid) OWNER TO postgres;

--
-- Name: trigger_recurring_payments_manually(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.trigger_recurring_payments_manually() RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RETURN process_recurring_payments_optimized();
END;
$$;


ALTER FUNCTION public.trigger_recurring_payments_manually() OWNER TO postgres;

--
-- Name: update_customer(uuid, text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_customer(p_id uuid, p_full_name text, p_email text, p_phone text, p_business text, p_status text) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    UPDATE crm.customers 
    SET 
        full_name = p_full_name,
        email = p_email,
        phone = p_phone,
        business = p_business,
        status = p_status,
        updated_at = NOW()
    WHERE id = p_id;
    
    RETURN FOUND;
END;
$$;


ALTER FUNCTION public.update_customer(p_id uuid, p_full_name text, p_email text, p_phone text, p_business text, p_status text) OWNER TO postgres;

--
-- Name: update_interaction(uuid, uuid, text, text, text, text, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_interaction(p_id uuid, p_customer_id uuid, p_type text, p_title text, p_notes text, p_outcome text, p_follow_up_required boolean) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    UPDATE crm.interactions 
    SET 
        customer_id = p_customer_id,
        type = p_type,
        title = p_title,
        notes = p_notes,
        outcome = p_outcome,
        follow_up_required = p_follow_up_required
    WHERE id = p_id;
    
    RETURN FOUND;
END;
$$;


ALTER FUNCTION public.update_interaction(p_id uuid, p_customer_id uuid, p_type text, p_title text, p_notes text, p_outcome text, p_follow_up_required boolean) OWNER TO postgres;

--
-- Name: update_inventory_item(uuid, text, text, integer, text, text, text, text, integer, integer, text, numeric, numeric, text, text, text, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_inventory_item(p_id uuid, p_name text, p_category text, p_current_quantity integer, p_description text DEFAULT NULL::text, p_sku text DEFAULT NULL::text, p_subcategory text DEFAULT NULL::text, p_location text DEFAULT NULL::text, p_minimum_threshold integer DEFAULT 0, p_maximum_capacity integer DEFAULT NULL::integer, p_unit_of_measurement text DEFAULT 'units'::text, p_unit_cost numeric DEFAULT 0, p_unit_price numeric DEFAULT 0, p_supplier text DEFAULT NULL::text, p_supplier_contact text DEFAULT NULL::text, p_notes text DEFAULT NULL::text, p_auto_reorder_enabled boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_user_id uuid;
    v_organization_id uuid;
    v_old_quantity integer;
    v_item_name text;
BEGIN
    -- Get current user ID
    SELECT auth.uid() INTO v_user_id;
    
    -- CRITICAL FIX: Use JWT approach like bookkeeper instead of auth.users query
    SELECT (auth.jwt() ->> 'user_metadata')::json ->> 'organization_id' INTO v_organization_id;
    
    -- Block if no organization_id
    IF v_organization_id IS NULL THEN
        RAISE EXCEPTION 'User must have organization_id in metadata to update inventory items';
    END IF;
    
    -- Get current quantity and name (ensure organization isolation)
    SELECT current_quantity, name INTO v_old_quantity, v_item_name
    FROM inventory.items 
    WHERE id = p_id AND organization_id = v_organization_id::uuid;
    
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Item not found or access denied';
    END IF;
    
    -- Update item
    UPDATE inventory.items SET
        name = p_name,
        description = p_description,
        sku = p_sku,
        category = p_category,
        subcategory = p_subcategory,
        location = p_location,
        current_quantity = p_current_quantity,
        minimum_threshold = p_minimum_threshold,
        maximum_capacity = p_maximum_capacity,
        unit_of_measurement = p_unit_of_measurement,
        unit_cost = p_unit_cost,
        unit_price = p_unit_price,
        supplier = p_supplier,
        supplier_contact = p_supplier_contact,
        notes = p_notes,
        auto_reorder_enabled = p_auto_reorder_enabled,
        last_updated_by = v_user_id,
        updated_at = timezone('utc'::text, now())
    WHERE id = p_id AND organization_id = v_organization_id::uuid;
    
    -- Create transaction if quantity changed
    IF v_old_quantity != p_current_quantity THEN
        INSERT INTO inventory.transactions (
            item_id, user_id, organization_id, transaction_type, quantity_change,
            quantity_before, quantity_after, reason, processed_by
        ) VALUES (
            p_id, v_user_id, v_organization_id::uuid, 'adjustment', 
            p_current_quantity - v_old_quantity,
            v_old_quantity, p_current_quantity, 'Manual adjustment via edit', v_user_id
        );
    END IF;
    
    -- Update alerts for quantity changes
    IF p_current_quantity <= p_minimum_threshold AND NOT EXISTS (
        SELECT 1 FROM inventory.alerts 
        WHERE item_id = p_id AND alert_type IN ('low_stock', 'out_of_stock') AND status = 'active'
    ) THEN
        INSERT INTO inventory.alerts (
            item_id, user_id, organization_id, alert_type, message, auto_generated,
            threshold_value, current_value
        ) VALUES (
            p_id, v_user_id, v_organization_id::uuid, 
            CASE WHEN p_current_quantity = 0 THEN 'out_of_stock' ELSE 'low_stock' END,
            CASE 
                WHEN p_current_quantity = 0 THEN 'Item "' || p_name || '" is out of stock'
                ELSE 'Item "' || p_name || '" is below minimum threshold (' || p_minimum_threshold || ')'
            END,
            true, p_minimum_threshold, p_current_quantity
        );
    END IF;
END;
$$;


ALTER FUNCTION public.update_inventory_item(p_id uuid, p_name text, p_category text, p_current_quantity integer, p_description text, p_sku text, p_subcategory text, p_location text, p_minimum_threshold integer, p_maximum_capacity integer, p_unit_of_measurement text, p_unit_cost numeric, p_unit_price numeric, p_supplier text, p_supplier_contact text, p_notes text, p_auto_reorder_enabled boolean) OWNER TO postgres;

--
-- Name: update_inventory_item_quantity_after_transaction(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_inventory_item_quantity_after_transaction() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    UPDATE public.inventory_items 
    SET current_quantity = NEW.quantity_after,
        updated_at = timezone('utc'::text, now())
    WHERE id = NEW.item_id;
    
    -- Check if we need to create alerts
    INSERT INTO public.inventory_alerts (item_id, user_id, organization_id, alert_type, message, auto_generated, threshold_value, current_value)
    SELECT 
        NEW.item_id,
        NEW.user_id,
        NEW.organization_id,
        CASE 
            WHEN NEW.quantity_after = 0 THEN 'out_of_stock'
            WHEN NEW.quantity_after <= i.minimum_threshold THEN 'low_stock'
            ELSE NULL
        END,
        CASE 
            WHEN NEW.quantity_after = 0 THEN 'Item "' || i.name || '" is out of stock'
            WHEN NEW.quantity_after <= i.minimum_threshold THEN 'Item "' || i.name || '" is below minimum threshold (' || i.minimum_threshold || ')'
            ELSE NULL
        END,
        true,
        i.minimum_threshold,
        NEW.quantity_after
    FROM public.inventory_items i
    WHERE i.id = NEW.item_id 
    AND (NEW.quantity_after = 0 OR NEW.quantity_after <= i.minimum_threshold)
    AND NOT EXISTS (
        SELECT 1 FROM public.inventory_alerts a 
        WHERE a.item_id = NEW.item_id 
        AND a.alert_type IN ('low_stock', 'out_of_stock') 
        AND a.status = 'active'
    );
    
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_inventory_item_quantity_after_transaction() OWNER TO postgres;

--
-- Name: update_mileage_entry(uuid, date, text, numeric, boolean, text, text, uuid, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_mileage_entry(p_id uuid, p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    customer_name_val TEXT;
BEGIN
    -- Get customer name if customer_id is provided
    IF p_customer_id IS NOT NULL THEN
        SELECT full_name INTO customer_name_val 
        FROM crm.customers 
        WHERE id = p_customer_id;
    END IF;
    
    UPDATE mileage.entries 
    SET 
        date = p_date,
        purpose = p_purpose,
        miles = p_miles,
        is_business = p_is_business,
        start_location = p_start_location,
        end_location = p_end_location,
        customer_id = p_customer_id,
        customer_name = customer_name_val,
        notes = p_notes,
        updated_at = NOW()
    WHERE id = p_id;
    
    RETURN FOUND;
END;
$$;


ALTER FUNCTION public.update_mileage_entry(p_id uuid, p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text) OWNER TO postgres;

--
-- Name: update_recurring_payment(uuid, jsonb); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_recurring_payment(p_payment_id uuid, p_update_data jsonb) RETURNS bookkeeper.recurring_payments
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    updated_payment bookkeeper.recurring_payments;
    user_org_id uuid;
BEGIN
    -- Get the organization_id from the current user's metadata
    SELECT (auth.jwt() ->> 'user_metadata')::json ->> 'organization_id' INTO user_org_id;
    
    -- Update the recurring payment with provided fields
    UPDATE bookkeeper.recurring_payments
    SET 
        type = COALESCE((p_update_data->>'type')::TEXT, type),
        category = COALESCE(p_update_data->>'category', category),
        description = COALESCE(p_update_data->>'description', description),
        amount = COALESCE((p_update_data->>'amount')::DECIMAL, amount),
        frequency = COALESCE(p_update_data->>'frequency', frequency),
        start_date = COALESCE((p_update_data->>'start_date')::TIMESTAMPTZ, start_date),
        end_date = COALESCE((p_update_data->>'end_date')::TIMESTAMPTZ, end_date),
        day_of_month = COALESCE((p_update_data->>'day_of_month')::INTEGER, day_of_month),
        day_of_week = COALESCE((p_update_data->>'day_of_week')::INTEGER, day_of_week),
        is_active = COALESCE((p_update_data->>'is_active')::BOOLEAN, is_active),
        customer_id = COALESCE((p_update_data->>'customer_id')::UUID, customer_id),
        interaction_id = COALESCE((p_update_data->>'interaction_id')::UUID, interaction_id),
        payment_limit = COALESCE((p_update_data->>'payment_limit')::INTEGER, payment_limit),
        updated_at = NOW(),
        updated_by = auth.uid()
    WHERE id = p_payment_id AND organization_id = user_org_id
    RETURNING * INTO updated_payment;

    RETURN updated_payment;
END;
$$;


ALTER FUNCTION public.update_recurring_payment(p_payment_id uuid, p_update_data jsonb) OWNER TO postgres;

--
-- Name: update_transaction(uuid, text, text, text, numeric, uuid, uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_transaction(p_id uuid, p_type text, p_category text, p_description text, p_amount numeric, p_customer_id uuid, p_interaction_id uuid) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    UPDATE bookkeeper.transactions 
    SET 
        type = p_type,
        category = p_category,
        description = p_description,
        amount = p_amount,
        customer_id = p_customer_id,
        interaction_id = p_interaction_id
    WHERE id = p_id;
    
    RETURN FOUND;
END;
$$;


ALTER FUNCTION public.update_transaction(p_id uuid, p_type text, p_category text, p_description text, p_amount numeric, p_customer_id uuid, p_interaction_id uuid) OWNER TO postgres;

--
-- Name: update_updated_at(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_updated_at() OWNER TO postgres;

--
-- Name: apply_rls(jsonb, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)) RETURNS SETOF realtime.wal_rls
    LANGUAGE plpgsql
    AS $$
declare
-- Regclass of the table e.g. public.notes
entity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;

-- I, U, D, T: insert, update ...
action realtime.action = (
    case wal ->> 'action'
        when 'I' then 'INSERT'
        when 'U' then 'UPDATE'
        when 'D' then 'DELETE'
        else 'ERROR'
    end
);

-- Is row level security enabled for the table
is_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;

subscriptions realtime.subscription[] = array_agg(subs)
    from
        realtime.subscription subs
    where
        subs.entity = entity_;

-- Subscription vars
roles regrole[] = array_agg(distinct us.claims_role::text)
    from
        unnest(subscriptions) us;

working_role regrole;
claimed_role regrole;
claims jsonb;

subscription_id uuid;
subscription_has_access bool;
visible_to_subscription_ids uuid[] = '{}';

-- structured info for wal's columns
columns realtime.wal_column[];
-- previous identity values for update/delete
old_columns realtime.wal_column[];

error_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;

-- Primary jsonb output for record
output jsonb;

begin
perform set_config('role', null, true);

columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'columns') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

old_columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'identity') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

for working_role in select * from unnest(roles) loop

    -- Update `is_selectable` for columns and old_columns
    columns =
        array_agg(
            (
                c.name,
                c.type_name,
                c.type_oid,
                c.value,
                c.is_pkey,
                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
            )::realtime.wal_column
        )
        from
            unnest(columns) c;

    old_columns =
            array_agg(
                (
                    c.name,
                    c.type_name,
                    c.type_oid,
                    c.value,
                    c.is_pkey,
                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                )::realtime.wal_column
            )
            from
                unnest(old_columns) c;

    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            -- subscriptions is already filtered by entity
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 400: Bad Request, no primary key']
        )::realtime.wal_rls;

    -- The claims role does not have SELECT permission to the primary key of entity
    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 401: Unauthorized']
        )::realtime.wal_rls;

    else
        output = jsonb_build_object(
            'schema', wal ->> 'schema',
            'table', wal ->> 'table',
            'type', action,
            'commit_timestamp', to_char(
                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),
                'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"'
            ),
            'columns', (
                select
                    jsonb_agg(
                        jsonb_build_object(
                            'name', pa.attname,
                            'type', pt.typname
                        )
                        order by pa.attnum asc
                    )
                from
                    pg_attribute pa
                    join pg_type pt
                        on pa.atttypid = pt.oid
                where
                    attrelid = entity_
                    and attnum > 0
                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')
            )
        )
        -- Add "record" key for insert and update
        || case
            when action in ('INSERT', 'UPDATE') then
                jsonb_build_object(
                    'record',
                    (
                        select
                            jsonb_object_agg(
                                -- if unchanged toast, get column name and value from old record
                                coalesce((c).name, (oc).name),
                                case
                                    when (c).name is null then (oc).value
                                    else (c).value
                                end
                            )
                        from
                            unnest(columns) c
                            full outer join unnest(old_columns) oc
                                on (c).name = (oc).name
                        where
                            coalesce((c).is_selectable, (oc).is_selectable)
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                    )
                )
            else '{}'::jsonb
        end
        -- Add "old_record" key for update and delete
        || case
            when action = 'UPDATE' then
                jsonb_build_object(
                        'old_record',
                        (
                            select jsonb_object_agg((c).name, (c).value)
                            from unnest(old_columns) c
                            where
                                (c).is_selectable
                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                        )
                    )
            when action = 'DELETE' then
                jsonb_build_object(
                    'old_record',
                    (
                        select jsonb_object_agg((c).name, (c).value)
                        from unnest(old_columns) c
                        where
                            (c).is_selectable
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey
                    )
                )
            else '{}'::jsonb
        end;

        -- Create the prepared statement
        if is_rls_enabled and action <> 'DELETE' then
            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then
                deallocate walrus_rls_stmt;
            end if;
            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);
        end if;

        visible_to_subscription_ids = '{}';

        for subscription_id, claims in (
                select
                    subs.subscription_id,
                    subs.claims
                from
                    unnest(subscriptions) subs
                where
                    subs.entity = entity_
                    and subs.claims_role = working_role
                    and (
                        realtime.is_visible_through_filters(columns, subs.filters)
                        or (
                          action = 'DELETE'
                          and realtime.is_visible_through_filters(old_columns, subs.filters)
                        )
                    )
        ) loop

            if not is_rls_enabled or action = 'DELETE' then
                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
            else
                -- Check if RLS allows the role to see the record
                perform
                    -- Trim leading and trailing quotes from working_role because set_config
                    -- doesn't recognize the role as valid if they are included
                    set_config('role', trim(both '"' from working_role::text), true),
                    set_config('request.jwt.claims', claims::text, true);

                execute 'execute walrus_rls_stmt' into subscription_has_access;

                if subscription_has_access then
                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                end if;
            end if;
        end loop;

        perform set_config('role', null, true);

        return next (
            output,
            is_rls_enabled,
            visible_to_subscription_ids,
            case
                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']
                else '{}'
            end
        )::realtime.wal_rls;

    end if;
end loop;

perform set_config('role', null, true);
end;
$$;


ALTER FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: broadcast_changes(text, text, text, text, text, record, record, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text DEFAULT 'ROW'::text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    -- Declare a variable to hold the JSONB representation of the row
    row_data jsonb := '{}'::jsonb;
BEGIN
    IF level = 'STATEMENT' THEN
        RAISE EXCEPTION 'function can only be triggered for each row, not for each statement';
    END IF;
    -- Check the operation type and handle accordingly
    IF operation = 'INSERT' OR operation = 'UPDATE' OR operation = 'DELETE' THEN
        row_data := jsonb_build_object('old_record', OLD, 'record', NEW, 'operation', operation, 'table', table_name, 'schema', table_schema);
        PERFORM realtime.send (row_data, event_name, topic_name);
    ELSE
        RAISE EXCEPTION 'Unexpected operation type: %', operation;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to process the row: %', SQLERRM;
END;

$$;


ALTER FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) OWNER TO supabase_admin;

--
-- Name: build_prepared_statement_sql(text, regclass, realtime.wal_column[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) RETURNS text
    LANGUAGE sql
    AS $$
      /*
      Builds a sql string that, if executed, creates a prepared statement to
      tests retrive a row from *entity* by its primary key columns.
      Example
          select realtime.build_prepared_statement_sql('public.notes', '{"id"}'::text[], '{"bigint"}'::text[])
      */
          select
      'prepare ' || prepared_statement_name || ' as
          select
              exists(
                  select
                      1
                  from
                      ' || entity || '
                  where
                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '
              )'
          from
              unnest(columns) pkc
          where
              pkc.is_pkey
          group by
              entity
      $$;


ALTER FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) OWNER TO supabase_admin;

--
-- Name: cast(text, regtype); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime."cast"(val text, type_ regtype) RETURNS jsonb
    LANGUAGE plpgsql IMMUTABLE
    AS $$
    declare
      res jsonb;
    begin
      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;
      return res;
    end
    $$;


ALTER FUNCTION realtime."cast"(val text, type_ regtype) OWNER TO supabase_admin;

--
-- Name: check_equality_op(realtime.equality_op, regtype, text, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
      /*
      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness
      */
      declare
          op_symbol text = (
              case
                  when op = 'eq' then '='
                  when op = 'neq' then '!='
                  when op = 'lt' then '<'
                  when op = 'lte' then '<='
                  when op = 'gt' then '>'
                  when op = 'gte' then '>='
                  when op = 'in' then '= any'
                  else 'UNKNOWN OP'
              end
          );
          res boolean;
      begin
          execute format(
              'select %L::'|| type_::text || ' ' || op_symbol
              || ' ( %L::'
              || (
                  case
                      when op = 'in' then type_::text || '[]'
                      else type_::text end
              )
              || ')', val_1, val_2) into res;
          return res;
      end;
      $$;


ALTER FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) OWNER TO supabase_admin;

--
-- Name: is_visible_through_filters(realtime.wal_column[], realtime.user_defined_filter[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$
    /*
    Should the record be visible (true) or filtered out (false) after *filters* are applied
    */
        select
            -- Default to allowed when no filters present
            $2 is null -- no filters. this should not happen because subscriptions has a default
            or array_length($2, 1) is null -- array length of an empty array is null
            or bool_and(
                coalesce(
                    realtime.check_equality_op(
                        op:=f.op,
                        type_:=coalesce(
                            col.type_oid::regtype, -- null when wal2json version <= 2.4
                            col.type_name::regtype
                        ),
                        -- cast jsonb to text
                        val_1:=col.value #>> '{}',
                        val_2:=f.value
                    ),
                    false -- if null, filter does not match
                )
            )
        from
            unnest(filters) f
            join unnest(columns) col
                on f.column_name = col.name;
    $_$;


ALTER FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) OWNER TO supabase_admin;

--
-- Name: list_changes(name, name, integer, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) RETURNS SETOF realtime.wal_rls
    LANGUAGE sql
    SET log_min_messages TO 'fatal'
    AS $$
      with pub as (
        select
          concat_ws(
            ',',
            case when bool_or(pubinsert) then 'insert' else null end,
            case when bool_or(pubupdate) then 'update' else null end,
            case when bool_or(pubdelete) then 'delete' else null end
          ) as w2j_actions,
          coalesce(
            string_agg(
              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),
              ','
            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),
            ''
          ) w2j_add_tables
        from
          pg_publication pp
          left join pg_publication_tables ppt
            on pp.pubname = ppt.pubname
        where
          pp.pubname = publication
        group by
          pp.pubname
        limit 1
      ),
      w2j as (
        select
          x.*, pub.w2j_add_tables
        from
          pub,
          pg_logical_slot_get_changes(
            slot_name, null, max_changes,
            'include-pk', 'true',
            'include-transaction', 'false',
            'include-timestamp', 'true',
            'include-type-oids', 'true',
            'format-version', '2',
            'actions', pub.w2j_actions,
            'add-tables', pub.w2j_add_tables
          ) x
      )
      select
        xyz.wal,
        xyz.is_rls_enabled,
        xyz.subscription_ids,
        xyz.errors
      from
        w2j,
        realtime.apply_rls(
          wal := w2j.data::jsonb,
          max_record_bytes := max_record_bytes
        ) xyz(wal, is_rls_enabled, subscription_ids, errors)
      where
        w2j.w2j_add_tables <> ''
        and xyz.subscription_ids[1] is not null
    $$;


ALTER FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: quote_wal2json(regclass); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.quote_wal2json(entity regclass) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
      select
        (
          select string_agg('' || ch,'')
          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
        )
        || '.'
        || (
          select string_agg('' || ch,'')
          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
          )
      from
        pg_class pc
        join pg_namespace nsp
          on pc.relnamespace = nsp.oid
      where
        pc.oid = entity
    $$;


ALTER FUNCTION realtime.quote_wal2json(entity regclass) OWNER TO supabase_admin;

--
-- Name: send(jsonb, text, text, boolean); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  BEGIN
    -- Set the topic configuration
    EXECUTE format('SET LOCAL realtime.topic TO %L', topic);

    -- Attempt to insert the message
    INSERT INTO realtime.messages (payload, event, topic, private, extension)
    VALUES (payload, event, topic, private, 'broadcast');
  EXCEPTION
    WHEN OTHERS THEN
      -- Capture and notify the error
      RAISE WARNING 'ErrorSendingBroadcastMessage: %', SQLERRM;
  END;
END;
$$;


ALTER FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) OWNER TO supabase_admin;

--
-- Name: subscription_check_filters(); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.subscription_check_filters() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    /*
    Validates that the user defined filters for a subscription:
    - refer to valid columns that the claimed role may access
    - values are coercable to the correct column type
    */
    declare
        col_names text[] = coalesce(
                array_agg(c.column_name order by c.ordinal_position),
                '{}'::text[]
            )
            from
                information_schema.columns c
            where
                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity
                and pg_catalog.has_column_privilege(
                    (new.claims ->> 'role'),
                    format('%I.%I', c.table_schema, c.table_name)::regclass,
                    c.column_name,
                    'SELECT'
                );
        filter realtime.user_defined_filter;
        col_type regtype;

        in_val jsonb;
    begin
        for filter in select * from unnest(new.filters) loop
            -- Filtered column is valid
            if not filter.column_name = any(col_names) then
                raise exception 'invalid column for filter %', filter.column_name;
            end if;

            -- Type is sanitized and safe for string interpolation
            col_type = (
                select atttypid::regtype
                from pg_catalog.pg_attribute
                where attrelid = new.entity
                      and attname = filter.column_name
            );
            if col_type is null then
                raise exception 'failed to lookup type for column %', filter.column_name;
            end if;

            -- Set maximum number of entries for in filter
            if filter.op = 'in'::realtime.equality_op then
                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);
                if coalesce(jsonb_array_length(in_val), 0) > 100 then
                    raise exception 'too many values for `in` filter. Maximum 100';
                end if;
            else
                -- raises an exception if value is not coercable to type
                perform realtime.cast(filter.value, col_type);
            end if;

        end loop;

        -- Apply consistent order to filters so the unique constraint on
        -- (subscription_id, entity, filters) can't be tricked by a different filter order
        new.filters = coalesce(
            array_agg(f order by f.column_name, f.op, f.value),
            '{}'
        ) from unnest(new.filters) f;

        return new;
    end;
    $$;


ALTER FUNCTION realtime.subscription_check_filters() OWNER TO supabase_admin;

--
-- Name: to_regrole(text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.to_regrole(role_name text) RETURNS regrole
    LANGUAGE sql IMMUTABLE
    AS $$ select role_name::regrole $$;


ALTER FUNCTION realtime.to_regrole(role_name text) OWNER TO supabase_admin;

--
-- Name: topic(); Type: FUNCTION; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE FUNCTION realtime.topic() RETURNS text
    LANGUAGE sql STABLE
    AS $$
select nullif(current_setting('realtime.topic', true), '')::text;
$$;


ALTER FUNCTION realtime.topic() OWNER TO supabase_realtime_admin;

--
-- Name: can_insert_object(text, text, uuid, jsonb); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO "storage"."objects" ("bucket_id", "name", "owner", "metadata") VALUES (bucketid, name, owner, metadata);
  -- hack to rollback the successful insert
  RAISE sqlstate 'PT200' using
  message = 'ROLLBACK',
  detail = 'rollback successful insert';
END
$$;


ALTER FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) OWNER TO supabase_storage_admin;

--
-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.extension(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
_filename text;
BEGIN
	select string_to_array(name, '/') into _parts;
	select _parts[array_length(_parts,1)] into _filename;
	-- @todo return the last part instead of 2
	return reverse(split_part(reverse(_filename), '.', 1));
END
$$;


ALTER FUNCTION storage.extension(name text) OWNER TO supabase_storage_admin;

--
-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.filename(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION storage.filename(name text) OWNER TO supabase_storage_admin;

--
-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.foldername(name text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[1:array_length(_parts,1)-1];
END
$$;


ALTER FUNCTION storage.foldername(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_size_by_bucket(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_size_by_bucket() RETURNS TABLE(size bigint, bucket_id text)
    LANGUAGE plpgsql
    AS $$
BEGIN
    return query
        select sum((metadata->>'size')::int) as size, obj.bucket_id
        from "storage".objects as obj
        group by obj.bucket_id;
END
$$;


ALTER FUNCTION storage.get_size_by_bucket() OWNER TO supabase_storage_admin;

--
-- Name: list_multipart_uploads_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text) RETURNS TABLE(key text, id text, created_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(key COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))
                    ELSE
                        key
                END AS key, id, created_at
            FROM
                storage.s3_multipart_uploads
            WHERE
                bucket_id = $5 AND
                key ILIKE $1 || ''%'' AND
                CASE
                    WHEN $4 != '''' AND $6 = '''' THEN
                        CASE
                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                key COLLATE "C" > $4
                            END
                    ELSE
                        true
                END AND
                CASE
                    WHEN $6 != '''' THEN
                        id COLLATE "C" > $6
                    ELSE
                        true
                    END
            ORDER BY
                key COLLATE "C" ASC, created_at ASC) as e order by key COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;
END;
$_$;


ALTER FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) OWNER TO supabase_storage_admin;

--
-- Name: list_objects_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text) RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(name COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))
                    ELSE
                        name
                END AS name, id, metadata, updated_at
            FROM
                storage.objects
            WHERE
                bucket_id = $5 AND
                name ILIKE $1 || ''%'' AND
                CASE
                    WHEN $6 != '''' THEN
                    name COLLATE "C" > $6
                ELSE true END
                AND CASE
                    WHEN $4 != '''' THEN
                        CASE
                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                name COLLATE "C" > $4
                            END
                    ELSE
                        true
                END
            ORDER BY
                name COLLATE "C" ASC) as e order by name COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;
END;
$_$;


ALTER FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) OWNER TO supabase_storage_admin;

--
-- Name: operation(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.operation() RETURNS text
    LANGUAGE plpgsql STABLE
    AS $$
BEGIN
    RETURN current_setting('storage.operation', true);
END;
$$;


ALTER FUNCTION storage.operation() OWNER TO supabase_storage_admin;

--
-- Name: search(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
  v_order_by text;
  v_sort_order text;
begin
  case
    when sortcolumn = 'name' then
      v_order_by = 'name';
    when sortcolumn = 'updated_at' then
      v_order_by = 'updated_at';
    when sortcolumn = 'created_at' then
      v_order_by = 'created_at';
    when sortcolumn = 'last_accessed_at' then
      v_order_by = 'last_accessed_at';
    else
      v_order_by = 'name';
  end case;

  case
    when sortorder = 'asc' then
      v_sort_order = 'asc';
    when sortorder = 'desc' then
      v_sort_order = 'desc';
    else
      v_sort_order = 'asc';
  end case;

  v_order_by = v_order_by || ' ' || v_sort_order;

  return query execute
    'with folders as (
       select path_tokens[$1] as folder
       from storage.objects
         where objects.name ilike $2 || $3 || ''%''
           and bucket_id = $4
           and array_length(objects.path_tokens, 1) <> $1
       group by folder
       order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(objects.path_tokens, 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW; 
END;
$$;


ALTER FUNCTION storage.update_updated_at_column() OWNER TO supabase_storage_admin;

--
-- Name: http_request(); Type: FUNCTION; Schema: supabase_functions; Owner: supabase_functions_admin
--

CREATE FUNCTION supabase_functions.http_request() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'supabase_functions'
    AS $$
    DECLARE
      request_id bigint;
      payload jsonb;
      url text := TG_ARGV[0]::text;
      method text := TG_ARGV[1]::text;
      headers jsonb DEFAULT '{}'::jsonb;
      params jsonb DEFAULT '{}'::jsonb;
      timeout_ms integer DEFAULT 1000;
    BEGIN
      IF url IS NULL OR url = 'null' THEN
        RAISE EXCEPTION 'url argument is missing';
      END IF;

      IF method IS NULL OR method = 'null' THEN
        RAISE EXCEPTION 'method argument is missing';
      END IF;

      IF TG_ARGV[2] IS NULL OR TG_ARGV[2] = 'null' THEN
        headers = '{"Content-Type": "application/json"}'::jsonb;
      ELSE
        headers = TG_ARGV[2]::jsonb;
      END IF;

      IF TG_ARGV[3] IS NULL OR TG_ARGV[3] = 'null' THEN
        params = '{}'::jsonb;
      ELSE
        params = TG_ARGV[3]::jsonb;
      END IF;

      IF TG_ARGV[4] IS NULL OR TG_ARGV[4] = 'null' THEN
        timeout_ms = 1000;
      ELSE
        timeout_ms = TG_ARGV[4]::integer;
      END IF;

      CASE
        WHEN method = 'GET' THEN
          SELECT http_get INTO request_id FROM net.http_get(
            url,
            params,
            headers,
            timeout_ms
          );
        WHEN method = 'POST' THEN
          payload = jsonb_build_object(
            'old_record', OLD,
            'record', NEW,
            'type', TG_OP,
            'table', TG_TABLE_NAME,
            'schema', TG_TABLE_SCHEMA
          );

          SELECT http_post INTO request_id FROM net.http_post(
            url,
            payload,
            params,
            headers,
            timeout_ms
          );
        ELSE
          RAISE EXCEPTION 'method argument % is invalid', method;
      END CASE;

      INSERT INTO supabase_functions.hooks
        (hook_table_id, hook_name, request_id)
      VALUES
        (TG_RELID, TG_NAME, request_id);

      RETURN NEW;
    END
  $$;


ALTER FUNCTION supabase_functions.http_request() OWNER TO supabase_functions_admin;

--
-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.audit_log_entries (
    instance_id uuid,
    id uuid NOT NULL,
    payload json,
    created_at timestamp with time zone,
    ip_address character varying(64) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE auth.audit_log_entries OWNER TO supabase_auth_admin;

--
-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';


--
-- Name: flow_state; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.flow_state (
    id uuid NOT NULL,
    user_id uuid,
    auth_code text NOT NULL,
    code_challenge_method auth.code_challenge_method NOT NULL,
    code_challenge text NOT NULL,
    provider_type text NOT NULL,
    provider_access_token text,
    provider_refresh_token text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    authentication_method text NOT NULL,
    auth_code_issued_at timestamp with time zone
);


ALTER TABLE auth.flow_state OWNER TO supabase_auth_admin;

--
-- Name: TABLE flow_state; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.flow_state IS 'stores metadata for pkce logins';


--
-- Name: identities; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.identities (
    provider_id text NOT NULL,
    user_id uuid NOT NULL,
    identity_data jsonb NOT NULL,
    provider text NOT NULL,
    last_sign_in_at timestamp with time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE auth.identities OWNER TO supabase_auth_admin;

--
-- Name: TABLE identities; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.identities IS 'Auth: Stores identities associated to a user.';


--
-- Name: COLUMN identities.email; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.identities.email IS 'Auth: Email is a generated column that references the optional email property in the identity_data';


--
-- Name: instances; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid,
    raw_base_config text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.instances OWNER TO supabase_auth_admin;

--
-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';


--
-- Name: mfa_amr_claims; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_amr_claims (
    session_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    authentication_method text NOT NULL,
    id uuid NOT NULL
);


ALTER TABLE auth.mfa_amr_claims OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_amr_claims; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_amr_claims IS 'auth: stores authenticator method reference claims for multi factor authentication';


--
-- Name: mfa_challenges; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_challenges (
    id uuid NOT NULL,
    factor_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    verified_at timestamp with time zone,
    ip_address inet NOT NULL,
    otp_code text,
    web_authn_session_data jsonb
);


ALTER TABLE auth.mfa_challenges OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_challenges; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_challenges IS 'auth: stores metadata about challenge requests made';


--
-- Name: mfa_factors; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_factors (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    friendly_name text,
    factor_type auth.factor_type NOT NULL,
    status auth.factor_status NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    secret text,
    phone text,
    last_challenged_at timestamp with time zone,
    web_authn_credential jsonb,
    web_authn_aaguid uuid
);


ALTER TABLE auth.mfa_factors OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_factors; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_factors IS 'auth: stores metadata about factors';


--
-- Name: one_time_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.one_time_tokens (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    token_type auth.one_time_token_type NOT NULL,
    token_hash text NOT NULL,
    relates_to text NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    CONSTRAINT one_time_tokens_token_hash_check CHECK ((char_length(token_hash) > 0))
);


ALTER TABLE auth.one_time_tokens OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL,
    token character varying(255),
    user_id character varying(255),
    revoked boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    parent character varying(255),
    session_id uuid
);


ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;

--
-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: supabase_auth_admin
--

CREATE SEQUENCE auth.refresh_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE auth.refresh_tokens_id_seq OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: supabase_auth_admin
--

ALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;


--
-- Name: saml_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_providers (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    entity_id text NOT NULL,
    metadata_xml text NOT NULL,
    metadata_url text,
    attribute_mapping jsonb,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    name_id_format text,
    CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0)),
    CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),
    CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0))
);


ALTER TABLE auth.saml_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_providers IS 'Auth: Manages SAML Identity Provider connections.';


--
-- Name: saml_relay_states; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_relay_states (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    request_id text NOT NULL,
    for_email text,
    redirect_to text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    flow_state_id uuid,
    CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0))
);


ALTER TABLE auth.saml_relay_states OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_relay_states; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_relay_states IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';


--
-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE auth.schema_migrations OWNER TO supabase_auth_admin;

--
-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';


--
-- Name: sessions; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sessions (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    factor_id uuid,
    aal auth.aal_level,
    not_after timestamp with time zone,
    refreshed_at timestamp without time zone,
    user_agent text,
    ip inet,
    tag text
);


ALTER TABLE auth.sessions OWNER TO supabase_auth_admin;

--
-- Name: TABLE sessions; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sessions IS 'Auth: Stores session data associated to a user.';


--
-- Name: COLUMN sessions.not_after; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sessions.not_after IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';


--
-- Name: sso_domains; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_domains (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    domain text NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0))
);


ALTER TABLE auth.sso_domains OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_domains; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_domains IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';


--
-- Name: sso_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_providers (
    id uuid NOT NULL,
    resource_id text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))
);


ALTER TABLE auth.sso_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_providers IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';


--
-- Name: COLUMN sso_providers.resource_id; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sso_providers.resource_id IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';


--
-- Name: users; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.users (
    instance_id uuid,
    id uuid NOT NULL,
    aud character varying(255),
    role character varying(255),
    email character varying(255),
    encrypted_password character varying(255),
    email_confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token character varying(255),
    confirmation_sent_at timestamp with time zone,
    recovery_token character varying(255),
    recovery_sent_at timestamp with time zone,
    email_change_token_new character varying(255),
    email_change character varying(255),
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    phone text DEFAULT NULL::character varying,
    phone_confirmed_at timestamp with time zone,
    phone_change text DEFAULT ''::character varying,
    phone_change_token character varying(255) DEFAULT ''::character varying,
    phone_change_sent_at timestamp with time zone,
    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,
    email_change_token_current character varying(255) DEFAULT ''::character varying,
    email_change_confirm_status smallint DEFAULT 0,
    banned_until timestamp with time zone,
    reauthentication_token character varying(255) DEFAULT ''::character varying,
    reauthentication_sent_at timestamp with time zone,
    is_sso_user boolean DEFAULT false NOT NULL,
    deleted_at timestamp with time zone,
    is_anonymous boolean DEFAULT false NOT NULL,
    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))
);


ALTER TABLE auth.users OWNER TO supabase_auth_admin;

--
-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';


--
-- Name: COLUMN users.is_sso_user; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.users.is_sso_user IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';


--
-- Name: transactions; Type: TABLE; Schema: bookkeeper; Owner: postgres
--

CREATE TABLE bookkeeper.transactions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    type text NOT NULL,
    category text,
    description text,
    amount numeric(10,2),
    source text,
    "timestamp" timestamp with time zone DEFAULT now(),
    uploaded_by uuid,
    customer_id uuid,
    interaction_id uuid,
    updated_by uuid,
    organization_id uuid
);

ALTER TABLE ONLY bookkeeper.transactions FORCE ROW LEVEL SECURITY;


ALTER TABLE bookkeeper.transactions OWNER TO postgres;

--
-- Name: customers; Type: TABLE; Schema: crm; Owner: postgres
--

CREATE TABLE crm.customers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    full_name text NOT NULL,
    email text NOT NULL,
    phone text,
    status text DEFAULT 'new'::text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    business text,
    user_id uuid,
    updated_by uuid,
    organization_id uuid,
    CONSTRAINT customers_status_check CHECK ((status = ANY (ARRAY['lead'::text, 'prospect'::text, 'contacted'::text, 'qualified'::text, 'proposal'::text, 'closed'::text])))
);

ALTER TABLE ONLY crm.customers FORCE ROW LEVEL SECURITY;


ALTER TABLE crm.customers OWNER TO postgres;

--
-- Name: interactions; Type: TABLE; Schema: crm; Owner: postgres
--

CREATE TABLE crm.interactions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    customer_id uuid,
    type text NOT NULL,
    notes text,
    created_at timestamp with time zone DEFAULT now(),
    title text,
    follow_up_required boolean DEFAULT false,
    outcome text,
    user_id uuid,
    updated_by uuid,
    organization_id uuid
);

ALTER TABLE ONLY crm.interactions FORCE ROW LEVEL SECURITY;


ALTER TABLE crm.interactions OWNER TO postgres;

--
-- Name: saved_properties; Type: TABLE; Schema: gis; Owner: postgres
--

CREATE TABLE gis.saved_properties (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    organization_id uuid NOT NULL,
    scraped_property_id uuid,
    owner_name text NOT NULL,
    address text NOT NULL,
    city text NOT NULL,
    acreage numeric(10,2) NOT NULL,
    assessed_value numeric(12,2),
    property_type text,
    parcel_id text,
    search_criteria jsonb,
    original_scraped_at timestamp with time zone NOT NULL,
    exported_to_leads boolean DEFAULT false NOT NULL,
    exported_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

ALTER TABLE ONLY gis.saved_properties FORCE ROW LEVEL SECURITY;


ALTER TABLE gis.saved_properties OWNER TO postgres;

--
-- Name: TABLE saved_properties; Type: COMMENT; Schema: gis; Owner: postgres
--

COMMENT ON TABLE gis.saved_properties IS 'Private table for user-saved properties - persist until exported to leads';


--
-- Name: saved_properties_stats; Type: VIEW; Schema: gis; Owner: postgres
--

CREATE VIEW gis.saved_properties_stats WITH (security_invoker='true') AS
 SELECT saved_properties.organization_id,
    count(*) AS total_saved,
    count(*) FILTER (WHERE (saved_properties.exported_to_leads = true)) AS exported_count,
    avg(saved_properties.acreage) AS avg_acreage,
    avg(saved_properties.assessed_value) AS avg_assessed_value,
    min(saved_properties.original_scraped_at) AS first_scraped,
    max(saved_properties.created_at) AS last_saved
   FROM gis.saved_properties
  GROUP BY saved_properties.organization_id;


ALTER VIEW gis.saved_properties_stats OWNER TO postgres;

--
-- Name: scraped_properties; Type: TABLE; Schema: gis; Owner: postgres
--

CREATE TABLE gis.scraped_properties (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    organization_id uuid NOT NULL,
    search_session_id uuid DEFAULT gen_random_uuid() NOT NULL,
    owner_name text NOT NULL,
    address text NOT NULL,
    city text NOT NULL,
    acreage numeric(10,2) NOT NULL,
    assessed_value numeric(12,2),
    property_type text,
    parcel_id text,
    search_criteria jsonb,
    scraped_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    is_saved boolean DEFAULT false NOT NULL,
    saved_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

ALTER TABLE ONLY gis.scraped_properties FORCE ROW LEVEL SECURITY;


ALTER TABLE gis.scraped_properties OWNER TO postgres;

--
-- Name: TABLE scraped_properties; Type: COMMENT; Schema: gis; Owner: postgres
--

COMMENT ON TABLE gis.scraped_properties IS 'Private table for scraped property data - unsaved properties cleaned weekly';


--
-- Name: scraped_properties_stats; Type: VIEW; Schema: gis; Owner: postgres
--

CREATE VIEW gis.scraped_properties_stats WITH (security_invoker='true') AS
 SELECT scraped_properties.organization_id,
    count(*) AS total_scraped,
    count(*) FILTER (WHERE (scraped_properties.is_saved = true)) AS saved_count,
    avg(scraped_properties.acreage) AS avg_acreage,
    avg(scraped_properties.assessed_value) AS avg_assessed_value,
    min(scraped_properties.scraped_at) AS first_scraped,
    max(scraped_properties.scraped_at) AS last_scraped
   FROM gis.scraped_properties
  GROUP BY scraped_properties.organization_id;


ALTER VIEW gis.scraped_properties_stats OWNER TO postgres;

--
-- Name: alerts; Type: TABLE; Schema: inventory; Owner: postgres
--

CREATE TABLE inventory.alerts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    item_id uuid NOT NULL,
    user_id uuid NOT NULL,
    organization_id uuid,
    alert_type text NOT NULL,
    status text DEFAULT 'active'::text,
    message text NOT NULL,
    priority text DEFAULT 'medium'::text,
    auto_generated boolean DEFAULT false,
    threshold_value integer,
    current_value integer,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    acknowledged_at timestamp with time zone,
    resolved_at timestamp with time zone,
    acknowledged_by uuid,
    CONSTRAINT alerts_alert_type_check CHECK ((alert_type = ANY (ARRAY['low_stock'::text, 'out_of_stock'::text, 'overstock'::text, 'expiry_warning'::text]))),
    CONSTRAINT alerts_priority_check CHECK ((priority = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'critical'::text]))),
    CONSTRAINT alerts_status_check CHECK ((status = ANY (ARRAY['active'::text, 'acknowledged'::text, 'resolved'::text])))
);

ALTER TABLE ONLY inventory.alerts FORCE ROW LEVEL SECURITY;


ALTER TABLE inventory.alerts OWNER TO postgres;

--
-- Name: items; Type: TABLE; Schema: inventory; Owner: postgres
--

CREATE TABLE inventory.items (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    organization_id uuid,
    name text NOT NULL,
    description text,
    sku text,
    category text NOT NULL,
    subcategory text,
    location text,
    current_quantity integer DEFAULT 0 NOT NULL,
    minimum_threshold integer DEFAULT 0,
    maximum_capacity integer,
    unit_of_measurement text DEFAULT 'units'::text,
    unit_cost numeric(10,2),
    unit_price numeric(10,2),
    supplier text,
    supplier_contact text,
    status text DEFAULT 'active'::text,
    notes text,
    last_counted_at timestamp with time zone,
    last_updated_by uuid,
    auto_reorder_enabled boolean DEFAULT false,
    reorder_point integer,
    reorder_quantity integer,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    CONSTRAINT items_status_check CHECK ((status = ANY (ARRAY['active'::text, 'discontinued'::text, 'out_of_stock'::text])))
);

ALTER TABLE ONLY inventory.items FORCE ROW LEVEL SECURITY;


ALTER TABLE inventory.items OWNER TO postgres;

--
-- Name: transactions; Type: TABLE; Schema: inventory; Owner: postgres
--

CREATE TABLE inventory.transactions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    item_id uuid NOT NULL,
    user_id uuid NOT NULL,
    organization_id uuid,
    transaction_type text NOT NULL,
    quantity_change integer NOT NULL,
    quantity_before integer NOT NULL,
    quantity_after integer NOT NULL,
    reference_number text,
    reason text NOT NULL,
    notes text,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    processed_by uuid,
    CONSTRAINT transactions_transaction_type_check CHECK ((transaction_type = ANY (ARRAY['stock_in'::text, 'stock_out'::text, 'adjustment'::text, 'transfer'::text, 'return'::text])))
);

ALTER TABLE ONLY inventory.transactions FORCE ROW LEVEL SECURITY;


ALTER TABLE inventory.transactions OWNER TO postgres;

--
-- Name: entries; Type: TABLE; Schema: mileage; Owner: postgres
--

CREATE TABLE mileage.entries (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    date date NOT NULL,
    purpose text NOT NULL,
    miles numeric(10,2) NOT NULL,
    is_business boolean DEFAULT true NOT NULL,
    start_location text,
    end_location text,
    customer_id uuid,
    customer_name text,
    notes text,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    organization_id uuid,
    CONSTRAINT entries_miles_check CHECK ((miles > (0)::numeric))
);

ALTER TABLE ONLY mileage.entries FORCE ROW LEVEL SECURITY;


ALTER TABLE mileage.entries OWNER TO postgres;

--
-- Name: TABLE entries; Type: COMMENT; Schema: mileage; Owner: postgres
--

COMMENT ON TABLE mileage.entries IS 'Business and personal mileage tracking with AI integration readiness';


--
-- Name: stats; Type: VIEW; Schema: mileage; Owner: postgres
--

CREATE VIEW mileage.stats WITH (security_invoker='true') AS
 SELECT entries.user_id,
    date_trunc('month'::text, (entries.date)::timestamp with time zone) AS month,
    sum(
        CASE
            WHEN entries.is_business THEN entries.miles
            ELSE (0)::numeric
        END) AS business_miles,
    sum(
        CASE
            WHEN (NOT entries.is_business) THEN entries.miles
            ELSE (0)::numeric
        END) AS personal_miles,
    sum(entries.miles) AS total_miles,
    count(*) AS total_entries,
    count(
        CASE
            WHEN entries.is_business THEN 1
            ELSE NULL::integer
        END) AS business_entries,
    count(
        CASE
            WHEN (NOT entries.is_business) THEN 1
            ELSE NULL::integer
        END) AS personal_entries,
    count(
        CASE
            WHEN ((entries.start_location IS NOT NULL) AND (entries.end_location IS NOT NULL)) THEN 1
            ELSE NULL::integer
        END) AS entries_with_locations,
    count(
        CASE
            WHEN ((entries.start_location IS NULL) OR (entries.end_location IS NULL)) THEN 1
            ELSE NULL::integer
        END) AS entries_without_locations,
    sum(
        CASE
            WHEN entries.is_business THEN (entries.miles * 0.67)
            ELSE (0)::numeric
        END) AS potential_deduction,
    avg(
        CASE
            WHEN entries.is_business THEN entries.miles
            ELSE NULL::numeric
        END) AS avg_business_trip_miles,
    max(
        CASE
            WHEN entries.is_business THEN entries.miles
            ELSE NULL::numeric
        END) AS max_business_trip_miles,
    min(
        CASE
            WHEN entries.is_business THEN entries.miles
            ELSE NULL::numeric
        END) AS min_business_trip_miles,
    count(DISTINCT entries.customer_id) AS unique_customers,
    count(
        CASE
            WHEN (entries.customer_id IS NOT NULL) THEN 1
            ELSE NULL::integer
        END) AS customer_linked_trips
   FROM mileage.entries
  GROUP BY entries.user_id, (date_trunc('month'::text, (entries.date)::timestamp with time zone))
  ORDER BY entries.user_id, (date_trunc('month'::text, (entries.date)::timestamp with time zone)) DESC;


ALTER VIEW mileage.stats OWNER TO postgres;

--
-- Name: VIEW stats; Type: COMMENT; Schema: mileage; Owner: postgres
--

COMMENT ON VIEW mileage.stats IS 'Advanced mileage analytics and statistics per user per month';


--
-- Name: ai_batches; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ai_batches (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    organization_id uuid NOT NULL,
    user_id uuid NOT NULL,
    batch_name text,
    search_criteria jsonb,
    total_leads_generated integer DEFAULT 0,
    leads_qualified integer DEFAULT 0,
    ai_model_version text,
    processing_duration_seconds integer,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    completed_at timestamp with time zone
);


ALTER TABLE public.ai_batches OWNER TO postgres;

--
-- Name: customers; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.customers AS
 SELECT customers.id,
    customers.full_name,
    customers.email,
    customers.phone,
    customers.status,
    customers.created_at,
    customers.updated_at,
    customers.business,
    customers.organization_id
   FROM crm.customers
  WHERE (customers.organization_id = public.get_user_organization_id());


ALTER VIEW public.customers OWNER TO postgres;

--
-- Name: gis_permissions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.gis_permissions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    organization_id uuid NOT NULL,
    feature_name text DEFAULT 'gis_scraper'::text NOT NULL,
    is_enabled boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    created_by uuid,
    notes text
);


ALTER TABLE public.gis_permissions OWNER TO postgres;

--
-- Name: TABLE gis_permissions; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.gis_permissions IS 'Controls which organizations have access to GIS features';


--
-- Name: interactions; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.interactions AS
 SELECT i.id,
    i.customer_id,
    c.full_name AS customer_name,
    i.type,
    i.title,
    i.notes,
    i.created_at,
    i.follow_up_required,
    i.outcome,
    i.organization_id,
    row_number() OVER (PARTITION BY i.customer_id ORDER BY i.created_at) AS interaction_index
   FROM (crm.interactions i
     JOIN crm.customers c ON ((i.customer_id = c.id)))
  WHERE ((i.organization_id = public.get_user_organization_id()) AND (c.organization_id = public.get_user_organization_id()));


ALTER VIEW public.interactions OWNER TO postgres;

--
-- Name: inventory_alerts; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.inventory_alerts AS
 SELECT a.id,
    a.item_id,
    a.user_id,
    a.organization_id,
    a.alert_type,
    a.status,
    a.message,
    a.priority,
    a.auto_generated,
    a.threshold_value,
    a.current_value,
    a.created_at,
    a.acknowledged_at,
    a.resolved_at,
    a.acknowledged_by,
    i.name AS item_name
   FROM (inventory.alerts a
     JOIN inventory.items i ON ((a.item_id = i.id)));


ALTER VIEW public.inventory_alerts OWNER TO postgres;

--
-- Name: inventory_items; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.inventory_items AS
 SELECT i.id,
    i.user_id,
    i.organization_id,
    i.name,
    i.description,
    i.sku,
    i.category,
    i.subcategory,
    i.location,
    i.current_quantity,
    i.minimum_threshold,
    i.maximum_capacity,
    i.unit_of_measurement,
    i.unit_cost,
    i.unit_price,
    i.supplier,
    i.supplier_contact,
    i.status,
    i.notes,
    i.last_counted_at,
    i.last_updated_by,
    i.auto_reorder_enabled,
    i.reorder_point,
    i.reorder_quantity,
    i.created_at,
    i.updated_at,
        CASE
            WHEN (i.current_quantity = 0) THEN 'out_of_stock'::text
            WHEN (i.current_quantity <= i.minimum_threshold) THEN 'low_stock'::text
            ELSE 'in_stock'::text
        END AS stock_status,
    ((i.current_quantity)::numeric * i.unit_cost) AS total_cost_value,
    ((i.current_quantity)::numeric * i.unit_price) AS total_selling_value
   FROM inventory.items i;


ALTER VIEW public.inventory_items OWNER TO postgres;

--
-- Name: lead_activities; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.lead_activities (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    lead_id uuid NOT NULL,
    user_id uuid NOT NULL,
    organization_id uuid NOT NULL,
    activity_type text NOT NULL,
    subject text NOT NULL,
    description text,
    outcome text,
    scheduled_at timestamp with time zone,
    completed_at timestamp with time zone,
    is_completed boolean DEFAULT false NOT NULL,
    follow_up_date date,
    follow_up_notes text,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE public.lead_activities OWNER TO postgres;

--
-- Name: lead_sources; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.lead_sources (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    organization_id uuid NOT NULL,
    name text NOT NULL,
    description text,
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE public.lead_sources OWNER TO postgres;

--
-- Name: leads; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.leads (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    organization_id uuid NOT NULL,
    first_name text NOT NULL,
    last_name text NOT NULL,
    email text,
    phone text,
    company text,
    job_title text,
    source text NOT NULL,
    status text DEFAULT 'new'::text NOT NULL,
    priority text DEFAULT 'medium'::text,
    ai_agent_batch_id uuid,
    ai_confidence_score numeric,
    ai_generated_notes text,
    score integer DEFAULT 0,
    is_qualified boolean DEFAULT false NOT NULL,
    qualified_at timestamp with time zone,
    address text,
    city text,
    state text,
    zip_code text,
    country text DEFAULT 'US'::text,
    estimated_value numeric,
    expected_close_date date,
    industry text,
    company_size text,
    notes text,
    tags text[],
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    last_contacted_at timestamp with time zone,
    CONSTRAINT leads_ai_confidence_score_check CHECK (((ai_confidence_score >= (0)::numeric) AND (ai_confidence_score <= (1)::numeric))),
    CONSTRAINT leads_estimated_value_check CHECK ((estimated_value >= (0)::numeric)),
    CONSTRAINT leads_score_check CHECK (((score >= 0) AND (score <= 100))),
    CONSTRAINT leads_source_check CHECK ((source = ANY (ARRAY['manual'::text, 'ai_agent'::text])))
);


ALTER TABLE public.leads OWNER TO postgres;

--
-- Name: mileage_entries; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.mileage_entries AS
 SELECT entries.id,
    entries.user_id,
    entries.date,
    entries.purpose,
    entries.miles,
    entries.is_business,
    entries.start_location,
    entries.end_location,
    entries.customer_id,
    entries.customer_name,
    entries.notes,
    entries.created_at,
    entries.updated_at,
    entries.organization_id
   FROM mileage.entries
  WHERE (entries.organization_id = public.get_user_organization_id());


ALTER VIEW public.mileage_entries OWNER TO postgres;

--
-- Name: mileage_stats; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.mileage_stats AS
 SELECT entries.user_id,
    date_trunc('month'::text, (entries.date)::timestamp with time zone) AS month,
    sum(entries.miles) AS total_miles,
    sum(
        CASE
            WHEN entries.is_business THEN entries.miles
            ELSE (0)::numeric
        END) AS business_miles,
    sum(
        CASE
            WHEN (NOT entries.is_business) THEN entries.miles
            ELSE (0)::numeric
        END) AS personal_miles,
    count(*) AS total_trips,
    count(
        CASE
            WHEN entries.is_business THEN 1
            ELSE NULL::integer
        END) AS business_trips,
    count(
        CASE
            WHEN (entries.customer_id IS NOT NULL) THEN 1
            ELSE NULL::integer
        END) AS customer_linked_trips
   FROM mileage.entries
  WHERE (entries.organization_id = public.get_user_organization_id())
  GROUP BY entries.user_id, (date_trunc('month'::text, (entries.date)::timestamp with time zone))
  ORDER BY entries.user_id, (date_trunc('month'::text, (entries.date)::timestamp with time zone)) DESC;


ALTER VIEW public.mileage_stats OWNER TO postgres;

--
-- Name: organizations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.organizations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255) NOT NULL,
    slug character varying(100) NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE public.organizations OWNER TO postgres;

--
-- Name: recurring_payments; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.recurring_payments AS
 SELECT recurring_payments.id,
    recurring_payments.type,
    recurring_payments.category,
    recurring_payments.description,
    recurring_payments.amount,
    recurring_payments.frequency,
    recurring_payments.start_date,
    recurring_payments.end_date,
    recurring_payments.day_of_month,
    recurring_payments.day_of_week,
    recurring_payments.is_active,
    recurring_payments.created_at,
    recurring_payments.updated_at,
    recurring_payments.created_by,
    recurring_payments.customer_id,
    recurring_payments.customer_name,
    recurring_payments.interaction_id,
    recurring_payments.interaction_title,
    recurring_payments.interaction_outcome,
    recurring_payments.next_payment_date,
    recurring_payments.payments_processed,
    recurring_payments.payment_limit,
    recurring_payments.updated_by,
    recurring_payments.organization_id
   FROM bookkeeper.recurring_payments;


ALTER VIEW public.recurring_payments OWNER TO postgres;

--
-- Name: saved_properties; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.saved_properties AS
 SELECT sp.id,
    sp.user_id,
    sp.organization_id,
    sp.scraped_property_id,
    sp.owner_name,
    sp.address,
    sp.city,
    sp.acreage,
    sp.assessed_value,
    sp.property_type,
    sp.parcel_id,
    sp.search_criteria,
    sp.original_scraped_at,
    sp.exported_to_leads,
    sp.exported_at,
    sp.created_at,
    sp.updated_at
   FROM gis.saved_properties sp;


ALTER VIEW public.saved_properties OWNER TO postgres;

--
-- Name: scraped_properties; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.scraped_properties AS
 SELECT sp.id,
    sp.user_id,
    sp.organization_id,
    sp.search_session_id,
    sp.owner_name,
    sp.address,
    sp.city,
    sp.acreage,
    sp.assessed_value,
    sp.property_type,
    sp.parcel_id,
    sp.search_criteria,
    sp.scraped_at,
    sp.is_saved,
    sp.saved_at,
    sp.created_at,
    sp.updated_at
   FROM gis.scraped_properties sp;


ALTER VIEW public.scraped_properties OWNER TO postgres;

--
-- Name: transactions; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.transactions AS
 SELECT t.id,
    t.type,
    t.category,
    t.description,
    t.amount,
    t.source,
    t."timestamp",
    t.uploaded_by,
    t.customer_id,
    t.interaction_id,
    t.updated_by,
    t.organization_id,
    c.full_name AS customer_name,
    c.business AS customer_business,
    i.title AS interaction_title,
    i.outcome AS interaction_outcome
   FROM ((bookkeeper.transactions t
     LEFT JOIN crm.customers c ON (((t.customer_id = c.id) AND (c.organization_id = public.get_user_organization_id()))))
     LEFT JOIN crm.interactions i ON (((t.interaction_id = i.id) AND (i.organization_id = public.get_user_organization_id()))))
  WHERE (t.organization_id = public.get_user_organization_id());


ALTER VIEW public.transactions OWNER TO postgres;

--
-- Name: messages; Type: TABLE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE TABLE realtime.messages (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
)
PARTITION BY RANGE (inserted_at);


ALTER TABLE realtime.messages OWNER TO supabase_realtime_admin;

--
-- Name: schema_migrations; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.schema_migrations (
    version bigint NOT NULL,
    inserted_at timestamp(0) without time zone
);


ALTER TABLE realtime.schema_migrations OWNER TO supabase_admin;

--
-- Name: subscription; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.subscription (
    id bigint NOT NULL,
    subscription_id uuid NOT NULL,
    entity regclass NOT NULL,
    filters realtime.user_defined_filter[] DEFAULT '{}'::realtime.user_defined_filter[] NOT NULL,
    claims jsonb NOT NULL,
    claims_role regrole GENERATED ALWAYS AS (realtime.to_regrole((claims ->> 'role'::text))) STORED NOT NULL,
    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE realtime.subscription OWNER TO supabase_admin;

--
-- Name: subscription_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE realtime.subscription ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME realtime.subscription_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: buckets; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets (
    id text NOT NULL,
    name text NOT NULL,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    public boolean DEFAULT false,
    avif_autodetection boolean DEFAULT false,
    file_size_limit bigint,
    allowed_mime_types text[],
    owner_id text
);


ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;

--
-- Name: COLUMN buckets.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.buckets.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: migrations; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.migrations (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    hash character varying(40) NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE storage.migrations OWNER TO supabase_storage_admin;

--
-- Name: objects; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.objects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    bucket_id text,
    name text,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_accessed_at timestamp with time zone DEFAULT now(),
    metadata jsonb,
    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,
    version text,
    owner_id text,
    user_metadata jsonb
);


ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

--
-- Name: COLUMN objects.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.objects.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: s3_multipart_uploads; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads (
    id text NOT NULL,
    in_progress_size bigint DEFAULT 0 NOT NULL,
    upload_signature text NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    version text NOT NULL,
    owner_id text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_metadata jsonb
);


ALTER TABLE storage.s3_multipart_uploads OWNER TO supabase_storage_admin;

--
-- Name: s3_multipart_uploads_parts; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads_parts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    upload_id text NOT NULL,
    size bigint DEFAULT 0 NOT NULL,
    part_number integer NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    etag text NOT NULL,
    owner_id text,
    version text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.s3_multipart_uploads_parts OWNER TO supabase_storage_admin;

--
-- Name: hooks; Type: TABLE; Schema: supabase_functions; Owner: supabase_functions_admin
--

CREATE TABLE supabase_functions.hooks (
    id bigint NOT NULL,
    hook_table_id integer NOT NULL,
    hook_name text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    request_id bigint
);


ALTER TABLE supabase_functions.hooks OWNER TO supabase_functions_admin;

--
-- Name: TABLE hooks; Type: COMMENT; Schema: supabase_functions; Owner: supabase_functions_admin
--

COMMENT ON TABLE supabase_functions.hooks IS 'Supabase Functions Hooks: Audit trail for triggered hooks.';


--
-- Name: hooks_id_seq; Type: SEQUENCE; Schema: supabase_functions; Owner: supabase_functions_admin
--

CREATE SEQUENCE supabase_functions.hooks_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE supabase_functions.hooks_id_seq OWNER TO supabase_functions_admin;

--
-- Name: hooks_id_seq; Type: SEQUENCE OWNED BY; Schema: supabase_functions; Owner: supabase_functions_admin
--

ALTER SEQUENCE supabase_functions.hooks_id_seq OWNED BY supabase_functions.hooks.id;


--
-- Name: migrations; Type: TABLE; Schema: supabase_functions; Owner: supabase_functions_admin
--

CREATE TABLE supabase_functions.migrations (
    version text NOT NULL,
    inserted_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE supabase_functions.migrations OWNER TO supabase_functions_admin;

--
-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);


--
-- Name: hooks id; Type: DEFAULT; Schema: supabase_functions; Owner: supabase_functions_admin
--

ALTER TABLE ONLY supabase_functions.hooks ALTER COLUMN id SET DEFAULT nextval('supabase_functions.hooks_id_seq'::regclass);


--
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at, ip_address) FROM stdin;
00000000-0000-0000-0000-000000000000	d6e4d02a-50c9-4383-beb0-c0dc26e585d4	{"action":"user_confirmation_requested","actor_id":"11f3d262-acea-4ac7-b8fe-f54b8a89b793","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-06-19 23:31:48.395415+00	
00000000-0000-0000-0000-000000000000	a99b03ab-7c65-4a24-ab0a-c5ceaef796ac	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"wwhite@heisenbergllc.com","user_id":"11f3d262-acea-4ac7-b8fe-f54b8a89b793","user_phone":""}}	2025-06-19 23:32:58.430777+00	
00000000-0000-0000-0000-000000000000	580f3b4c-0e32-4685-97af-b1bb9c7a7652	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"wwhite@heisenbergllc.com","user_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","user_phone":""}}	2025-06-19 23:33:20.101253+00	
00000000-0000-0000-0000-000000000000	a163490c-7602-4f4d-b035-61c4f44c5c8e	{"action":"login","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-06-19 23:33:52.778017+00	
00000000-0000-0000-0000-000000000000	70fdd5c6-3ae1-4d54-a068-2d851ea96f98	{"action":"login","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-06-19 23:33:53.676258+00	
00000000-0000-0000-0000-000000000000	c4f568f5-ca6e-4030-824b-73103cc9980a	{"action":"login","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-06-19 23:40:45.89573+00	
00000000-0000-0000-0000-000000000000	a6e70f40-2f46-4b86-af6d-07752545bff5	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-20 20:12:38.738461+00	
00000000-0000-0000-0000-000000000000	48de07b8-4a61-47c8-af94-02776bf35675	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-20 20:12:38.743942+00	
00000000-0000-0000-0000-000000000000	93f42897-8f4e-46b0-bc4d-8dbb82fedb56	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-20 21:53:44.822811+00	
00000000-0000-0000-0000-000000000000	522a5871-b569-4498-98d3-518b4ccb8149	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-20 21:53:44.824127+00	
00000000-0000-0000-0000-000000000000	b30fe119-2ed6-46ce-99fd-18dc0d040bab	{"action":"login","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-06-20 21:56:57.454346+00	
00000000-0000-0000-0000-000000000000	0eb503b6-5b09-4614-895e-a54d6d67bc31	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-21 19:25:25.439045+00	
00000000-0000-0000-0000-000000000000	cf9f0248-5e14-44fb-86cf-05ff1c7d8273	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-21 19:25:25.44216+00	
00000000-0000-0000-0000-000000000000	05c01377-eb37-416a-bf57-4c865a751e82	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-21 20:24:01.068431+00	
00000000-0000-0000-0000-000000000000	62a70639-dd95-4603-8cfb-29e96d59f05b	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-21 20:24:01.073563+00	
00000000-0000-0000-0000-000000000000	5a150688-f54f-462d-bda2-09cadb729572	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-21 21:32:40.128438+00	
00000000-0000-0000-0000-000000000000	98c22ed1-ae41-48be-bb45-4b6c575b565f	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-21 21:32:40.129861+00	
00000000-0000-0000-0000-000000000000	569d2e14-bb38-4c05-ba4c-3be98911c396	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-21 23:45:47.800875+00	
00000000-0000-0000-0000-000000000000	caa1b745-4ee2-4d89-9941-247e520e8360	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-21 23:45:47.804973+00	
00000000-0000-0000-0000-000000000000	16b1eafd-a334-4e90-b6b3-fb0f1905b9af	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-22 01:03:29.950932+00	
00000000-0000-0000-0000-000000000000	46541430-9bfb-46d2-842d-29813e57bb92	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-22 01:03:29.951701+00	
00000000-0000-0000-0000-000000000000	6b547a58-ebcb-4050-810e-3cece7f42d24	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-23 18:42:35.799768+00	
00000000-0000-0000-0000-000000000000	592dea5d-f909-4179-87f3-14aae3d5757d	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-23 18:42:35.811989+00	
00000000-0000-0000-0000-000000000000	dfab8a28-8886-46bd-8047-77020e391c8f	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-23 23:58:04.556487+00	
00000000-0000-0000-0000-000000000000	cdb2109d-bd0a-459f-a866-0a3b610d6c0a	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-23 23:58:04.561843+00	
00000000-0000-0000-0000-000000000000	79e05ac6-089c-44de-b271-513241d9be21	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-24 20:06:56.650278+00	
00000000-0000-0000-0000-000000000000	41b99603-8f9b-42e3-b09b-2b0cb7121202	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-24 20:06:56.654968+00	
00000000-0000-0000-0000-000000000000	8f97189b-f52c-4d27-97a7-c8f24fd52d86	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-24 23:44:35.363939+00	
00000000-0000-0000-0000-000000000000	ad1bd4cf-b2e9-4221-b593-1b8ecde214b3	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-24 23:44:35.368111+00	
00000000-0000-0000-0000-000000000000	c73b8f90-53dd-47bb-989b-cd03557e56ea	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-25 20:42:29.729918+00	
00000000-0000-0000-0000-000000000000	0131184d-7a98-4bb8-932a-84398c3bdaf7	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-25 20:42:29.7413+00	
00000000-0000-0000-0000-000000000000	47922678-c402-4ceb-9255-677067fffe21	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-03 16:44:29.824223+00	
00000000-0000-0000-0000-000000000000	f3098d55-464b-480e-aa90-1276de095088	{"action":"login","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-06-25 20:43:01.748338+00	
00000000-0000-0000-0000-000000000000	afda679f-7895-4360-80c8-8f6ad2762bda	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-28 22:54:59.581165+00	
00000000-0000-0000-0000-000000000000	60f5d955-2ec1-4a51-8309-b84123907740	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-28 22:54:59.589261+00	
00000000-0000-0000-0000-000000000000	7e5cc295-f833-4534-b219-f853939ba9b7	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-29 00:15:37.257068+00	
00000000-0000-0000-0000-000000000000	11c22ee9-a715-4b3d-9b8d-54b06ebdde36	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-29 00:15:37.263678+00	
00000000-0000-0000-0000-000000000000	d4a10b6f-dd27-4422-8f40-91b85628c69b	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-29 01:15:35.625984+00	
00000000-0000-0000-0000-000000000000	c289508e-b7ba-4a1d-bac6-2eba6f3d878a	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-29 01:15:35.629629+00	
00000000-0000-0000-0000-000000000000	5ff4b16c-3990-4393-886c-9d5d838d569b	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-29 20:09:57.719823+00	
00000000-0000-0000-0000-000000000000	82e93a47-7c4a-414a-90c2-02e4dbc34f59	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-29 20:09:57.727339+00	
00000000-0000-0000-0000-000000000000	c2e35962-7f53-4059-bc79-be637fe68a11	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-29 21:10:48.117702+00	
00000000-0000-0000-0000-000000000000	91d3524f-156b-40a2-99f8-2ffe91ee9611	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-29 21:10:48.123142+00	
00000000-0000-0000-0000-000000000000	8f117b70-6e85-4eea-a507-742b0d80cb18	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-30 12:15:08.308059+00	
00000000-0000-0000-0000-000000000000	fc17ae88-4846-41ec-aad7-0e5b9953ca65	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-30 12:15:08.313995+00	
00000000-0000-0000-0000-000000000000	39fe9d7b-b57e-49f5-af6a-d09ea759788c	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-30 13:15:35.741642+00	
00000000-0000-0000-0000-000000000000	ec3699b3-3eee-4a45-88f6-243d64b0df05	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-30 13:15:35.743321+00	
00000000-0000-0000-0000-000000000000	d050467e-af77-452d-86cb-a7a7809f6c39	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-30 14:15:22.459573+00	
00000000-0000-0000-0000-000000000000	287f6a57-6335-4f16-ad4a-c106b4391d03	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-06-30 14:15:22.461493+00	
00000000-0000-0000-0000-000000000000	5b17358e-4be5-4c7d-96fb-cb11dfc8750e	{"action":"login","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-02 12:39:44.890908+00	
00000000-0000-0000-0000-000000000000	2d949672-798d-488a-b2a4-d9b795c10437	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-02 13:44:50.626658+00	
00000000-0000-0000-0000-000000000000	2fead3e5-76f3-49ab-95d0-c84976c67dff	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-02 13:44:50.629261+00	
00000000-0000-0000-0000-000000000000	96ccf4b4-e9c6-439a-bea5-dc9ff5125f38	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-02 13:44:58.323394+00	
00000000-0000-0000-0000-000000000000	9c1c86d9-0362-4513-b988-cf385f5cd9ab	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-02 14:55:07.640002+00	
00000000-0000-0000-0000-000000000000	922ea663-316f-479c-88c3-54aa4ef680a3	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-02 14:55:07.641387+00	
00000000-0000-0000-0000-000000000000	0ed44cfc-97cf-44d6-acf5-56c807976e79	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-02 17:31:36.35324+00	
00000000-0000-0000-0000-000000000000	6359cc48-1c18-4a50-839a-c8834ab18b67	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-02 17:31:36.355207+00	
00000000-0000-0000-0000-000000000000	013bbe77-04e9-4fc9-96a8-89048347e415	{"action":"login","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-02 18:29:10.91121+00	
00000000-0000-0000-0000-000000000000	de254013-36c0-4f7c-a424-183bae616339	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-03 14:15:11.953127+00	
00000000-0000-0000-0000-000000000000	4d49b67f-09d1-492d-8992-d930074c6d89	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-03 14:15:11.958848+00	
00000000-0000-0000-0000-000000000000	c2aa1f05-f23c-4855-9b8c-fe4cc6411338	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-03 15:22:55.516244+00	
00000000-0000-0000-0000-000000000000	46022162-cf6e-436e-bbec-8f93c9e9d0ea	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-03 15:22:55.519861+00	
00000000-0000-0000-0000-000000000000	d7727b9f-1b97-41a5-83f0-824442e652fb	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-03 16:21:54.318496+00	
00000000-0000-0000-0000-000000000000	b3bba0ac-7755-4c99-904f-2bee30db3bf3	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-03 16:21:54.320042+00	
00000000-0000-0000-0000-000000000000	c93b0331-a481-46c1-8292-dd2c0f486f35	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-03 16:44:29.821554+00	
00000000-0000-0000-0000-000000000000	041d82b2-cb31-4c29-9224-61a6475c49ef	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-03 17:44:18.987731+00	
00000000-0000-0000-0000-000000000000	e367c467-b838-4a8e-bd36-54e085594648	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-03 17:44:18.995352+00	
00000000-0000-0000-0000-000000000000	100578b8-b589-4a18-bd54-3f87ffb3dfe3	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-07 17:33:34.108314+00	
00000000-0000-0000-0000-000000000000	e1942cbc-7e92-4ee7-96be-11963df8bfdf	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-07 17:33:34.118209+00	
00000000-0000-0000-0000-000000000000	53b43a41-7552-4273-b106-6148c7119bfa	{"action":"login","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-07 18:25:38.020712+00	
00000000-0000-0000-0000-000000000000	2dc8c642-af9d-445b-ba2b-a0addb3aa2b7	{"action":"login","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-07 18:25:39.127679+00	
00000000-0000-0000-0000-000000000000	0fed2af2-7f1f-4aea-87ef-40a0cbba47aa	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-07 18:37:20.213665+00	
00000000-0000-0000-0000-000000000000	5bb6456f-3198-4fe6-bea5-13a7ea68d1c3	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-07 18:37:20.215649+00	
00000000-0000-0000-0000-000000000000	0e063f45-c422-45dc-8b33-fa41abb19cb2	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-08 22:12:04.505685+00	
00000000-0000-0000-0000-000000000000	aed4206a-745b-40fc-862c-ee593a96e7a1	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-08 22:12:04.515468+00	
00000000-0000-0000-0000-000000000000	be32ad08-ba77-4147-9be0-c13a9707d3cf	{"action":"user_confirmation_requested","actor_id":"f9b1c90a-eb03-462a-b49b-50e6d4da1320","actor_username":"milanfusco68@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-07-08 22:20:27.674244+00	
00000000-0000-0000-0000-000000000000	def3c7af-533f-437c-9eb8-78ef996d0024	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-08 23:26:41.105523+00	
00000000-0000-0000-0000-000000000000	d0a32e27-f0c1-421b-a2e4-3581cc51c128	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-08 23:26:41.107404+00	
00000000-0000-0000-0000-000000000000	153a5022-fd40-485a-8914-a9c3e3eaf7ea	{"action":"user_confirmation_requested","actor_id":"4b8887c7-7e39-4e16-ab2f-2906bc484210","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-07-12 20:53:37.751785+00	
00000000-0000-0000-0000-000000000000	4d4cd246-5cfd-49ea-9168-eb7389423767	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"covertlaptop@gmail.com","user_id":"4b8887c7-7e39-4e16-ab2f-2906bc484210","user_phone":""}}	2025-07-12 22:48:58.533362+00	
00000000-0000-0000-0000-000000000000	64712259-be5c-4200-9807-6e452c2acbfe	{"action":"user_confirmation_requested","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-07-12 22:49:12.977306+00	
00000000-0000-0000-0000-000000000000	e7fca97d-b205-484b-a882-4bea258c80bc	{"action":"user_signedup","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-07-12 22:49:22.088892+00	
00000000-0000-0000-0000-000000000000	5bf9f576-2280-4fbf-9ae4-3cc2f91dc0d5	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-12 23:53:04.582262+00	
00000000-0000-0000-0000-000000000000	4280de21-3db9-46ff-a4d4-22dc6b1e408e	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-12 23:53:04.585996+00	
00000000-0000-0000-0000-000000000000	bbfa89f1-8430-4b23-8b11-5843f6d01893	{"action":"token_refreshed","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-07-14 01:50:55.726081+00	
00000000-0000-0000-0000-000000000000	35da38e0-8305-4f24-b375-54d128286693	{"action":"token_revoked","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-07-14 01:50:55.735469+00	
00000000-0000-0000-0000-000000000000	06468dff-97d7-45d9-b340-f943d3872687	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-14 13:54:16.182789+00	
00000000-0000-0000-0000-000000000000	21672897-8359-4ce7-a5d2-38159caf0a8d	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-14 13:54:16.19278+00	
00000000-0000-0000-0000-000000000000	8f58cb11-46c7-4a13-bec5-fddb39927a62	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-14 15:02:48.91738+00	
00000000-0000-0000-0000-000000000000	f0b591a0-8861-484c-aa6b-6bea8fbd94b0	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-14 15:02:48.920137+00	
00000000-0000-0000-0000-000000000000	5130eddc-5714-4be1-bf3d-16a0617ebaf0	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-14 16:05:41.571681+00	
00000000-0000-0000-0000-000000000000	3ac47311-b1b4-4aa5-9192-42b980b085f1	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-14 16:05:41.574383+00	
00000000-0000-0000-0000-000000000000	8543be56-a99f-4c46-9dc6-183e4ce92912	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-14 22:34:26.48558+00	
00000000-0000-0000-0000-000000000000	8df97748-d9a2-4fc7-8873-90f3b5a90fc0	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-14 22:34:26.499158+00	
00000000-0000-0000-0000-000000000000	4ceb8e6c-8eb4-4860-8f5d-ec2709bef5ad	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-14 23:53:44.697332+00	
00000000-0000-0000-0000-000000000000	855eeb73-87f5-473c-a1df-f75ee5d068a0	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-14 23:53:44.702726+00	
00000000-0000-0000-0000-000000000000	d0a3d9aa-ea2c-45aa-a461-830aafac1f8b	{"action":"token_refreshed","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-07-15 02:46:33.22007+00	
00000000-0000-0000-0000-000000000000	04f48a2e-765d-4db7-ba45-7d5513b10592	{"action":"token_revoked","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-07-15 02:46:33.226334+00	
00000000-0000-0000-0000-000000000000	a0823c9e-b8d9-4b19-a398-a5f6470e318b	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-15 17:58:53.242613+00	
00000000-0000-0000-0000-000000000000	646cf7ff-91d7-42e2-ad99-53afd759292a	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-15 17:58:53.261506+00	
00000000-0000-0000-0000-000000000000	2d66d6a1-6f93-4a37-86b3-ce42d82363d1	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-15 18:59:18.084888+00	
00000000-0000-0000-0000-000000000000	88206128-8210-48a3-b975-7f69bb465096	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-15 18:59:18.086383+00	
00000000-0000-0000-0000-000000000000	b7cce578-ea8c-4b74-a1b1-d693bdc1d30a	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-15 20:00:21.414682+00	
00000000-0000-0000-0000-000000000000	016bf0de-1b5e-4f50-a747-2b0537909be0	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-15 20:00:21.415868+00	
00000000-0000-0000-0000-000000000000	57013c64-e73c-42c7-810d-cc910b8b6a0f	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-15 20:59:41.164663+00	
00000000-0000-0000-0000-000000000000	be64b025-1ff4-4e0e-87a6-ba3f93c4c88b	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-15 20:59:41.168459+00	
00000000-0000-0000-0000-000000000000	e350aaf6-b30a-4f3e-bad5-7999c2d8c257	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-15 21:58:13.647874+00	
00000000-0000-0000-0000-000000000000	a82d7850-e3a2-49d4-baf7-e77bd998d35c	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-15 21:58:13.657886+00	
00000000-0000-0000-0000-000000000000	a7f0513c-8e62-4c5f-ad26-8ec54c45ae51	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-16 12:14:10.899369+00	
00000000-0000-0000-0000-000000000000	807ea94f-7398-473d-8dcc-c37ed8acebe0	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-16 12:14:10.909918+00	
00000000-0000-0000-0000-000000000000	1a991348-6221-4cbb-8c2f-533135d762e2	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-16 13:31:13.040674+00	
00000000-0000-0000-0000-000000000000	533caba9-9af0-444f-a6d4-cc0047d92eee	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-16 13:31:13.047084+00	
00000000-0000-0000-0000-000000000000	10ee98c3-895c-4750-8b2e-a3c5b7917028	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-16 14:32:53.034231+00	
00000000-0000-0000-0000-000000000000	dc036cb8-c7b0-4d5c-b112-7e6898b8fc01	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-16 14:32:53.039792+00	
00000000-0000-0000-0000-000000000000	fc00d2e3-a396-44dd-9f11-8cdc9edf8ca3	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-16 16:30:56.121384+00	
00000000-0000-0000-0000-000000000000	e59c2a0e-27d5-4541-ae14-b90b5ee1741a	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-16 16:30:56.126205+00	
00000000-0000-0000-0000-000000000000	239154fc-5481-4cf9-82e6-aa00835eae8c	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-16 18:38:44.134437+00	
00000000-0000-0000-0000-000000000000	d883d4ff-c723-4929-b6ee-7f979805405c	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-16 18:38:44.136236+00	
00000000-0000-0000-0000-000000000000	09c21324-846d-4adc-9631-6c0572f880ef	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-16 19:37:28.361742+00	
00000000-0000-0000-0000-000000000000	cd90ef8c-4aeb-4ca6-be6f-b193b245fdb0	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-16 19:37:28.363308+00	
00000000-0000-0000-0000-000000000000	a035eef0-ba9e-4b73-93da-e497cb175fa5	{"action":"token_refreshed","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-07-16 22:54:34.892364+00	
00000000-0000-0000-0000-000000000000	0b7017d4-b628-4ffe-be2e-a077a7c25920	{"action":"token_revoked","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-07-16 22:54:34.894428+00	
00000000-0000-0000-0000-000000000000	07af252f-e108-4d37-9e86-68891d6c4668	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-17 17:49:05.493715+00	
00000000-0000-0000-0000-000000000000	96c27cb8-d0c0-4dd6-b578-f28506c8a22d	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-17 17:49:05.5036+00	
00000000-0000-0000-0000-000000000000	e7c39f49-c991-4a76-8721-83004bb8d7e0	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-17 18:54:13.443121+00	
00000000-0000-0000-0000-000000000000	614e0fd4-b649-4721-b911-11b633c024d2	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-17 18:54:13.445291+00	
00000000-0000-0000-0000-000000000000	1cd71150-8f51-4559-8be4-f5097decf888	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-17 22:29:52.149423+00	
00000000-0000-0000-0000-000000000000	abb2c2fc-386e-4ced-8c4e-416e9e56a624	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-17 22:29:52.151646+00	
00000000-0000-0000-0000-000000000000	cc368b2d-028d-4920-90b3-b3981567f123	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-17 23:31:17.483318+00	
00000000-0000-0000-0000-000000000000	00e8c507-2fc6-4aa6-a1ff-9cbe7af15811	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-17 23:31:17.486536+00	
00000000-0000-0000-0000-000000000000	8bf1a1d4-977c-435f-a066-8cf6ea1f46fb	{"action":"token_refreshed","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-07-18 02:13:45.117029+00	
00000000-0000-0000-0000-000000000000	0aa5ef98-5b40-4b2b-9d64-0581a65ca958	{"action":"token_revoked","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-07-18 02:13:45.120358+00	
00000000-0000-0000-0000-000000000000	59b6c1a8-668f-4326-b025-a44544dfd5b2	{"action":"token_refreshed","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-07-18 04:14:07.10696+00	
00000000-0000-0000-0000-000000000000	3e0c0241-96a8-4acc-a077-8f6f7a390b0b	{"action":"token_revoked","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-07-18 04:14:07.117291+00	
00000000-0000-0000-0000-000000000000	9bb82d6a-4c80-4cda-aa9c-ba147ebb8913	{"action":"token_refreshed","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-07-18 15:56:34.140375+00	
00000000-0000-0000-0000-000000000000	a0aeca57-5018-49bc-841d-ed4becf46cc9	{"action":"token_revoked","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-07-18 15:56:34.146367+00	
00000000-0000-0000-0000-000000000000	0ff37916-90da-4840-a0a5-186fab56953b	{"action":"logout","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-07-18 16:40:20.877137+00	
00000000-0000-0000-0000-000000000000	68ede5ed-17c6-43d0-b605-3cadb679db1b	{"action":"login","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-18 16:41:22.491012+00	
00000000-0000-0000-0000-000000000000	1e6a9001-c40a-4b0c-ab57-3ff6c3f65650	{"action":"token_refreshed","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-07-18 17:58:04.377713+00	
00000000-0000-0000-0000-000000000000	820f3842-c059-405a-b827-60118f4e0133	{"action":"token_revoked","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-07-18 17:58:04.379272+00	
00000000-0000-0000-0000-000000000000	973f81a9-a3e9-4382-854b-2e8bfc7e4ba0	{"action":"logout","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-07-18 18:21:27.058009+00	
00000000-0000-0000-0000-000000000000	4bfabff2-f7ab-411d-b676-bf87766fd915	{"action":"user_confirmation_requested","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-07-18 18:21:49.526721+00	
00000000-0000-0000-0000-000000000000	37ce2039-6bc2-4d60-9f3e-a6f19296bc7e	{"action":"user_signedup","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"team"}	2025-07-18 18:22:21.270048+00	
00000000-0000-0000-0000-000000000000	7e9cc179-f726-40a7-9aea-7c4029f429d3	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-18 18:30:25.277068+00	
00000000-0000-0000-0000-000000000000	adcfc0ee-86a3-440f-948b-87d36cfee180	{"action":"login","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-18 18:30:35.030874+00	
00000000-0000-0000-0000-000000000000	bee6f679-dbcf-41d0-a960-bf15e3af3cad	{"action":"logout","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-07-18 18:32:57.03658+00	
00000000-0000-0000-0000-000000000000	91e4e7fa-22ec-4497-85b4-48da0b9e35ee	{"action":"login","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-18 18:37:24.160779+00	
00000000-0000-0000-0000-000000000000	e7a67a2c-e5a2-4bc1-9730-8d926f8ff8dd	{"action":"logout","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-07-18 18:38:05.675998+00	
00000000-0000-0000-0000-000000000000	6c62377a-9f2e-4866-af3a-f31087cfdbf8	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-18 18:38:19.945981+00	
00000000-0000-0000-0000-000000000000	68c39399-78f2-4342-9ce3-2251f782329f	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-18 18:41:46.131188+00	
00000000-0000-0000-0000-000000000000	12d44bcc-23d0-4f9f-bfea-dd2e19680b86	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-18 18:43:11.642168+00	
00000000-0000-0000-0000-000000000000	95045ded-b5d7-48c5-980b-b14247b8c618	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-18 18:43:39.754651+00	
00000000-0000-0000-0000-000000000000	72dfa5d6-4ef8-4dbf-ac93-59288d4e9568	{"action":"login","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-18 18:44:00.603375+00	
00000000-0000-0000-0000-000000000000	62df6bfb-5b29-4827-a165-53130e5c5c8c	{"action":"logout","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-07-18 18:44:16.470888+00	
00000000-0000-0000-0000-000000000000	43031781-2df9-40a0-b041-38a1070f0734	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-18 18:44:26.466106+00	
00000000-0000-0000-0000-000000000000	4d0203d1-d02e-4cce-82bf-3fc9583cd65f	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-18 18:45:01.473566+00	
00000000-0000-0000-0000-000000000000	1b268fc2-97d0-4f80-8b2c-2b61bb6bb740	{"action":"login","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-18 18:45:15.084083+00	
00000000-0000-0000-0000-000000000000	781247d4-0ae6-4c3e-8bdb-f453f090cb0e	{"action":"logout","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-07-18 18:46:09.760693+00	
00000000-0000-0000-0000-000000000000	ef3ece2c-a14e-4805-b3a6-9ef354e30ad6	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-18 18:46:23.663767+00	
00000000-0000-0000-0000-000000000000	508579d8-5adb-4d2b-968f-33aef25ce5af	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-18 18:50:40.638292+00	
00000000-0000-0000-0000-000000000000	8db03c5e-36c8-4721-9fcb-3c2d13adba29	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-18 18:50:52.493859+00	
00000000-0000-0000-0000-000000000000	7dc70054-0c34-435b-81b6-353d4bef9ebe	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-18 18:51:20.632872+00	
00000000-0000-0000-0000-000000000000	cff8f04e-6178-408c-b17e-fcfd97457197	{"action":"login","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-18 18:51:29.808243+00	
00000000-0000-0000-0000-000000000000	619ec84f-9c4a-4739-bfca-e62e70dea59d	{"action":"logout","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-07-18 18:54:41.329717+00	
00000000-0000-0000-0000-000000000000	9d0dca6c-7218-4404-bd54-76b0f9d45ae2	{"action":"login","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-18 18:55:17.75131+00	
00000000-0000-0000-0000-000000000000	373dfa13-034a-4e19-b7e9-624c12b412cd	{"action":"logout","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-07-18 18:55:32.531492+00	
00000000-0000-0000-0000-000000000000	831d76b3-d7a5-4125-b2a2-5afb930bda72	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-18 18:55:45.996004+00	
00000000-0000-0000-0000-000000000000	d7ffce81-5548-42c4-8e93-563190bb6097	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-18 18:56:30.90715+00	
00000000-0000-0000-0000-000000000000	adcf144e-c6d4-4c36-870b-a34c55d39ca5	{"action":"login","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-18 18:56:45.735081+00	
00000000-0000-0000-0000-000000000000	44799ae7-0acc-466f-a6bc-29381bb200fb	{"action":"logout","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-07-18 19:27:03.051694+00	
00000000-0000-0000-0000-000000000000	7886b4a5-3170-4117-8992-616fb7c994f1	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-18 19:27:27.024392+00	
00000000-0000-0000-0000-000000000000	0b6b27bd-8dc6-45bc-b5a6-28f92576f504	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-18 22:13:05.315924+00	
00000000-0000-0000-0000-000000000000	188a5147-39ad-4b09-85b2-b92a013c6c9c	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-18 22:13:05.317407+00	
00000000-0000-0000-0000-000000000000	f3cca6a0-2ccf-4b12-92f9-b4618c4dd1ae	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 01:10:14.83896+00	
00000000-0000-0000-0000-000000000000	385605cd-a542-4489-98e4-4fd9760b4107	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 01:10:14.844272+00	
00000000-0000-0000-0000-000000000000	b212327d-046d-4855-aabf-418a2ef217f5	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 03:30:02.316265+00	
00000000-0000-0000-0000-000000000000	e4a5a088-27bb-4f8d-8a8d-7aff92813819	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 03:30:02.325294+00	
00000000-0000-0000-0000-000000000000	83c00dba-48e9-4dc7-b31a-9916caf20b17	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-19 03:30:11.447602+00	
00000000-0000-0000-0000-000000000000	86d6e3a4-938c-49b3-8725-b3e57848a45b	{"action":"login","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-19 03:37:00.167595+00	
00000000-0000-0000-0000-000000000000	82933223-958f-45a6-96a7-8f99e3f55c4c	{"action":"logout","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-07-19 04:08:07.003007+00	
00000000-0000-0000-0000-000000000000	d1d1b350-7114-43a2-919c-ff703e092ed0	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-19 04:08:15.287986+00	
00000000-0000-0000-0000-000000000000	81e1ffac-1302-4a93-9c1c-5b1aacc65391	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 05:26:03.168746+00	
00000000-0000-0000-0000-000000000000	f07e4399-79d4-42f4-bd6b-af5448cf01b9	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 05:26:03.17081+00	
00000000-0000-0000-0000-000000000000	608ab3dc-bd99-46f5-b41b-9c404d6216c1	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 17:50:36.375237+00	
00000000-0000-0000-0000-000000000000	83aea160-6125-4727-91df-51c9dda7b525	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 17:50:36.387522+00	
00000000-0000-0000-0000-000000000000	f0a8bd02-6aa1-49f8-9791-34ac7a2f5daf	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-19 18:33:11.04377+00	
00000000-0000-0000-0000-000000000000	1efb0327-8e06-481c-add5-65ce2bc05666	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-19 18:33:23.149949+00	
00000000-0000-0000-0000-000000000000	4661c163-6633-405a-8f8f-835ee7db37ed	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"rfusco@summitautomation.io","user_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","user_phone":""}}	2025-07-19 18:37:53.115443+00	
00000000-0000-0000-0000-000000000000	e863ede5-3e2d-45af-ac1b-54983c07cc2c	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-19 18:40:15.609709+00	
00000000-0000-0000-0000-000000000000	a1ef3888-9ead-4933-a59f-d7b45763c3fa	{"action":"logout","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-19 18:40:21.125826+00	
00000000-0000-0000-0000-000000000000	c9d3f1cf-c26b-46e1-a7a9-5c4b43d3b171	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-19 18:42:38.06269+00	
00000000-0000-0000-0000-000000000000	14adb2a1-23bc-4ed1-95c7-17b2f0b6c9d8	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-19 18:42:39.226157+00	
00000000-0000-0000-0000-000000000000	d72ed807-cf12-4549-bd25-7b73520167d1	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-19 18:43:47.412259+00	
00000000-0000-0000-0000-000000000000	c6736b32-b160-4eab-b153-3a721bb77824	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-23 05:41:48.164843+00	
00000000-0000-0000-0000-000000000000	71c9b54e-cd4c-43d6-9f75-30f07dad8543	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-19 19:25:22.240322+00	
00000000-0000-0000-0000-000000000000	cd39d835-216f-49a3-a2f0-3301ae431416	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-19 19:25:26.274529+00	
00000000-0000-0000-0000-000000000000	bfe9f6d9-2d11-4985-b90a-74c9654b95f3	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 19:43:20.792391+00	
00000000-0000-0000-0000-000000000000	398aa54b-6834-4ab6-8780-a1412b50ecae	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 19:43:20.795119+00	
00000000-0000-0000-0000-000000000000	83935586-01e2-459e-9ae1-7cae8b72be91	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 19:44:37.918007+00	
00000000-0000-0000-0000-000000000000	3c317a4f-3b92-49e4-b66a-f03180f1f8a4	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 19:44:37.91926+00	
00000000-0000-0000-0000-000000000000	2c589f22-b865-4429-9279-077aeb0bae48	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 20:44:54.880963+00	
00000000-0000-0000-0000-000000000000	03985112-454d-4a75-b83e-2658ab8972da	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 20:44:54.883018+00	
00000000-0000-0000-0000-000000000000	0f49850f-553f-4097-bfdd-b64f041bd9b9	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 21:42:58.076807+00	
00000000-0000-0000-0000-000000000000	fba11ec3-2a58-4fb3-ac79-0fc53d106eaa	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 21:42:58.079606+00	
00000000-0000-0000-0000-000000000000	9a8f81ab-cd43-4226-b74a-be1a24d08623	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 22:41:28.328412+00	
00000000-0000-0000-0000-000000000000	a0e8ba1e-acb1-4958-aeec-f0be66874f74	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 22:41:28.329995+00	
00000000-0000-0000-0000-000000000000	cfb89f1a-6f1d-4a63-82b8-d723b95754e8	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 23:39:58.113561+00	
00000000-0000-0000-0000-000000000000	7aa1a713-0992-49f6-8ae9-6bed5d1f3a49	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-19 23:39:58.115164+00	
00000000-0000-0000-0000-000000000000	9c82d4d7-12e9-43a8-a2dc-a1adde043011	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 00:37:58.244768+00	
00000000-0000-0000-0000-000000000000	48fd621a-8d21-4b88-9c2e-d6c4686eab43	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 00:37:58.246723+00	
00000000-0000-0000-0000-000000000000	20e1fb19-a246-4183-8b81-f56781657792	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 01:05:11.424881+00	
00000000-0000-0000-0000-000000000000	1203c010-db99-42f7-ba63-64d5fdbf3b9c	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 01:05:11.428027+00	
00000000-0000-0000-0000-000000000000	62add0e0-791c-418b-8af3-9b2ec51a8d19	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 01:35:58.266425+00	
00000000-0000-0000-0000-000000000000	a78304bc-ea00-49f6-bba0-de5c2d8f6c91	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 01:35:58.269154+00	
00000000-0000-0000-0000-000000000000	ea1dc5c6-e0ae-4a14-84d9-092d69442d84	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-20 13:10:48.407037+00	
00000000-0000-0000-0000-000000000000	f2dc7b2f-228e-42ca-b501-42bb852e2831	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-20 13:10:49.412232+00	
00000000-0000-0000-0000-000000000000	634dae13-dee2-465f-af85-a6c4d67ca6b2	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 16:15:52.802847+00	
00000000-0000-0000-0000-000000000000	9411421a-abbc-4e63-8c5b-1cf0bbaaf7fa	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 16:15:52.805962+00	
00000000-0000-0000-0000-000000000000	67a81ca6-8ad8-4f8a-9983-229f50e8214e	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 19:12:08.614809+00	
00000000-0000-0000-0000-000000000000	780ec107-ffec-480d-948d-d7b783a3824a	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 19:12:08.620327+00	
00000000-0000-0000-0000-000000000000	e8ddbb9e-b976-4bd8-bb57-444fd3b3de94	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 19:19:47.280538+00	
00000000-0000-0000-0000-000000000000	884da347-eda7-47f9-9e0c-6ba9f7dbaa53	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 19:19:47.283768+00	
00000000-0000-0000-0000-000000000000	97e08612-b9d7-47af-a81d-7ecf83aa119a	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 19:41:03.421322+00	
00000000-0000-0000-0000-000000000000	1a859819-9597-40a0-8c4e-2aae5ee97726	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 19:41:03.423335+00	
00000000-0000-0000-0000-000000000000	45dc9f9c-c53e-4a3d-8484-d7db79acdee3	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 20:28:11.452516+00	
00000000-0000-0000-0000-000000000000	12ee7c68-b53d-4973-9f52-5dfa0f396ee9	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 20:28:11.45469+00	
00000000-0000-0000-0000-000000000000	1279a413-e34c-4d77-8141-c87ff2523ac5	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-20 20:40:25.894841+00	
00000000-0000-0000-0000-000000000000	d0082121-bb44-4eb4-b0c9-088d40358b17	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 20:43:20.84795+00	
00000000-0000-0000-0000-000000000000	c0ef3192-881c-4caa-85f1-9c874499caea	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 20:43:20.848733+00	
00000000-0000-0000-0000-000000000000	083e4871-a700-49c0-9bb1-7576e6951ee3	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 20:49:38.78596+00	
00000000-0000-0000-0000-000000000000	d16801a7-06e2-496c-b6bf-22cd445cac8d	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-20 20:49:38.789274+00	
00000000-0000-0000-0000-000000000000	75ff01df-88ad-4696-a979-3f13daf080e3	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"demo@demo.com","user_id":"3756a8de-233f-414d-90a6-8053a5a13657","user_phone":""}}	2025-07-20 20:54:00.711419+00	
00000000-0000-0000-0000-000000000000	db87031a-a644-484d-8817-43ec7b9f51d0	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-20 20:54:52.369667+00	
00000000-0000-0000-0000-000000000000	3197822d-6e93-4dc0-97c0-3acdb3cb977a	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-20 20:55:00.910452+00	
00000000-0000-0000-0000-000000000000	04069ba2-554c-4fc7-ad2e-afed2bc241b5	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-20 20:55:05.219817+00	
00000000-0000-0000-0000-000000000000	213bfd7f-9eeb-4e1f-ac73-998747d4ab56	{"action":"logout","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-20 20:58:05.109247+00	
00000000-0000-0000-0000-000000000000	cf295493-edb6-431e-bb1f-dcec681baa97	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-20 20:59:16.569852+00	
00000000-0000-0000-0000-000000000000	c4c284bd-5553-486a-a0ad-cafb88298f3d	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-21 01:18:48.215641+00	
00000000-0000-0000-0000-000000000000	8b46ece9-7d55-48ab-9722-5cc83b0c5915	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-21 01:26:54.181874+00	
00000000-0000-0000-0000-000000000000	bea19c72-96bc-476f-92ed-1cd6a696622a	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-21 01:42:27.74967+00	
00000000-0000-0000-0000-000000000000	495deeac-19d2-4354-a3a5-90b25239a4c7	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-21 01:47:10.521982+00	
00000000-0000-0000-0000-000000000000	c9b315d8-5c20-43ad-86d0-64b2af79fadb	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-21 01:47:19.669362+00	
00000000-0000-0000-0000-000000000000	1b9aca83-06c6-43c2-95da-0fad5ff94c1d	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-21 01:50:15.062078+00	
00000000-0000-0000-0000-000000000000	aa0b22d1-62ea-401c-ac91-05e44cc04842	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-21 01:50:22.487061+00	
00000000-0000-0000-0000-000000000000	5dc4ed03-8cbf-4ef2-ac07-34d015272266	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-21 02:49:51.604913+00	
00000000-0000-0000-0000-000000000000	4241c91a-916a-4ad2-b2d0-4ee3ebd0fcde	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-21 02:49:51.609959+00	
00000000-0000-0000-0000-000000000000	74812668-0017-4997-b493-33f33c9c407d	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-21 02:51:05.470232+00	
00000000-0000-0000-0000-000000000000	3491ca5b-f10f-493e-9f92-805e7380cbb5	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-21 02:51:18.683883+00	
00000000-0000-0000-0000-000000000000	744caeda-a62f-4ded-95db-dc82af825a39	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-21 03:49:37.434366+00	
00000000-0000-0000-0000-000000000000	1ad77494-cbf6-4444-8224-d2bd5a2304ba	{"action":"token_revoked","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-21 03:49:37.447916+00	
00000000-0000-0000-0000-000000000000	0a529de1-a1dd-4eae-8d26-c04dc2e4d476	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-21 11:01:11.32003+00	
00000000-0000-0000-0000-000000000000	733786b2-3926-4bd6-bc69-4aea4cde9900	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-21 11:03:19.478767+00	
00000000-0000-0000-0000-000000000000	24c790a6-22c1-4745-a8be-c7adb4e0325a	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-21 11:59:24.136826+00	
00000000-0000-0000-0000-000000000000	8fd61888-74e0-4e6f-b72b-079c596dc468	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-21 12:01:17.3527+00	
00000000-0000-0000-0000-000000000000	c060ca3e-74bf-43b8-95e3-2980222ef957	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-21 13:39:45.915458+00	
00000000-0000-0000-0000-000000000000	59be0081-5db7-466f-a78d-e9c1dcf7753c	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-21 13:39:47.00782+00	
00000000-0000-0000-0000-000000000000	016da18c-9295-4e7c-87ba-5e264db4ec2d	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-21 16:02:00.190333+00	
00000000-0000-0000-0000-000000000000	02e69400-a77d-4145-b262-ee9dc7b3422e	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-21 16:10:11.719495+00	
00000000-0000-0000-0000-000000000000	f2c249ab-fe8b-4c8b-978d-eccf037a2f0f	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-21 16:10:13.773601+00	
00000000-0000-0000-0000-000000000000	8928ffcc-f1dc-4eda-a156-5df576b95ea2	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-21 20:51:26.435603+00	
00000000-0000-0000-0000-000000000000	66930830-42ed-45d7-acc0-9b09771481ad	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-21 20:51:26.440312+00	
00000000-0000-0000-0000-000000000000	d75b3b75-3d34-46db-b45e-ab0a267693ed	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-21 21:30:59.189307+00	
00000000-0000-0000-0000-000000000000	fdb79c82-3992-4ac9-960c-b318030259e3	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-21 21:31:03.161729+00	
00000000-0000-0000-0000-000000000000	5ba06e0e-9b3c-4f27-b7d7-76f0b403486d	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-21 21:32:21.590978+00	
00000000-0000-0000-0000-000000000000	f37f1165-a001-45c5-b3d2-47bbb5475943	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-21 22:05:17.808978+00	
00000000-0000-0000-0000-000000000000	9e44ab9d-c724-4272-b205-523bb8d9e90f	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-21 22:05:17.811976+00	
00000000-0000-0000-0000-000000000000	37bd5191-7138-4d6e-8a79-d1409e42448f	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-22 01:58:39.017822+00	
00000000-0000-0000-0000-000000000000	ef4d4f12-4791-4f1e-9f1a-bf6b286852ce	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-22 02:49:13.745078+00	
00000000-0000-0000-0000-000000000000	9901dd0d-6b82-4f90-af94-dc1f57e55c46	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-22 02:49:35.165445+00	
00000000-0000-0000-0000-000000000000	0316426b-6606-4407-be21-58fb3aedef4b	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-22 14:12:10.037915+00	
00000000-0000-0000-0000-000000000000	2cb03c09-c406-4035-8391-7220beed3893	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-22 14:12:10.04707+00	
00000000-0000-0000-0000-000000000000	cbfc3609-0602-47f8-8ce5-62e9bed2c6bb	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-22 14:54:01.611773+00	
00000000-0000-0000-0000-000000000000	68f9c900-bb67-4cd0-af44-c7b0642a17a5	{"action":"user_recovery_requested","actor_id":"60c47787-f9f0-442a-bbfc-1803ffb060a4","actor_username":"covertlaptop@gmail.com","actor_via_sso":false,"log_type":"user"}	2025-07-22 14:55:29.934936+00	
00000000-0000-0000-0000-000000000000	81176ef6-5521-4ab2-bbd3-2e937d30c48c	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-22 15:07:26.369405+00	
00000000-0000-0000-0000-000000000000	a8823af2-c0ed-48a3-a312-77cc23488d2c	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-22 15:13:46.932269+00	
00000000-0000-0000-0000-000000000000	366589eb-01db-4844-b19a-b5de7830836f	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-22 16:11:53.820934+00	
00000000-0000-0000-0000-000000000000	c09e9fce-58db-4341-90bf-621e9c136f84	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-22 16:11:53.824077+00	
00000000-0000-0000-0000-000000000000	c3683965-55cd-4358-8e0d-6cb2edc0a628	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-22 16:13:14.835987+00	
00000000-0000-0000-0000-000000000000	f0d9d8ac-ff28-4f15-aeab-60e785ad373b	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-22 16:13:22.680792+00	
00000000-0000-0000-0000-000000000000	129d2f59-ad78-4422-9eb2-1805992cbcbd	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-22 16:19:39.84028+00	
00000000-0000-0000-0000-000000000000	ff32d3f3-a5ab-4da9-939e-071b8a5511de	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"koleb@gmail.com","user_id":"82f426b7-1293-47b5-9203-1bf14f1b99dc","user_phone":""}}	2025-07-22 16:30:57.730651+00	
00000000-0000-0000-0000-000000000000	c9ea4828-a0e8-4bc7-9eb9-081841ad0290	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"koleb@gmail.com","user_id":"82f426b7-1293-47b5-9203-1bf14f1b99dc","user_phone":""}}	2025-07-22 16:34:24.95097+00	
00000000-0000-0000-0000-000000000000	3f999da3-894a-40d8-a764-d59fd78c1905	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"koleb256@gmail.com","user_id":"94226e5b-ce51-4949-8f54-b82f1686fc42","user_phone":""}}	2025-07-22 16:34:41.534164+00	
00000000-0000-0000-0000-000000000000	c3fe85ae-872e-4170-9421-03eb122c5683	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-22 16:36:12.028173+00	
00000000-0000-0000-0000-000000000000	98386eff-4318-404b-bd97-acaf3b56f406	{"action":"login","actor_id":"94226e5b-ce51-4949-8f54-b82f1686fc42","actor_username":"koleb256@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-22 16:36:31.684108+00	
00000000-0000-0000-0000-000000000000	98a49822-9ce1-4e28-b30d-0f48ec583722	{"action":"logout","actor_id":"94226e5b-ce51-4949-8f54-b82f1686fc42","actor_username":"koleb256@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-07-22 16:37:50.229615+00	
00000000-0000-0000-0000-000000000000	7e9bb840-fe1d-4d1c-b125-81f137ebd697	{"action":"login","actor_id":"94226e5b-ce51-4949-8f54-b82f1686fc42","actor_username":"koleb256@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-22 16:44:17.411063+00	
00000000-0000-0000-0000-000000000000	95ae72a7-bdd9-48bf-8cae-a5c330db649a	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-22 16:55:05.260537+00	
00000000-0000-0000-0000-000000000000	7e369735-7b30-43a7-b781-a56dc3cdad22	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-22 16:55:21.245129+00	
00000000-0000-0000-0000-000000000000	26305d77-6cc5-401a-85b3-fe65c0006854	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-22 17:48:57.795082+00	
00000000-0000-0000-0000-000000000000	3ab0e52e-0b08-4fd5-81a4-8657bca5b7bb	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-22 17:49:06.711724+00	
00000000-0000-0000-0000-000000000000	441d9ad0-42ae-4ce0-805d-b836f4dea13d	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-22 18:42:07.232578+00	
00000000-0000-0000-0000-000000000000	8d6234ed-bf87-461a-8e18-60901dfb341b	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-22 18:43:35.034777+00	
00000000-0000-0000-0000-000000000000	a098a9b9-0376-4edf-b510-5e8e9d229330	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-22 23:13:49.64932+00	
00000000-0000-0000-0000-000000000000	ca23665b-5bde-4f16-877c-da6aeb57fddc	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-22 23:13:49.665956+00	
00000000-0000-0000-0000-000000000000	f14d2a4d-9d1f-4ad2-93b0-2bb3c22ccfcf	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-22 23:13:55.619276+00	
00000000-0000-0000-0000-000000000000	1a00da91-e882-42e9-a1d2-d6540fb5a9ef	{"action":"token_revoked","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-22 23:13:55.620476+00	
00000000-0000-0000-0000-000000000000	8f4fe469-88f5-4019-8870-aaab58bded69	{"action":"logout","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-22 23:14:52.044365+00	
00000000-0000-0000-0000-000000000000	ad6713ed-c43e-4d8f-b4fa-09f57167e1bf	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-22 23:14:56.602442+00	
00000000-0000-0000-0000-000000000000	e463e881-4062-4eee-8443-d2609aff9379	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-22 23:15:03.131092+00	
00000000-0000-0000-0000-000000000000	18f98ed3-2f62-44e9-b7fa-a750b4f3162e	{"action":"token_refreshed","actor_id":"94226e5b-ce51-4949-8f54-b82f1686fc42","actor_username":"koleb256@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-07-22 23:21:22.648847+00	
00000000-0000-0000-0000-000000000000	860cfcfc-d8e1-4e68-a9cf-a3a48dd3ae3a	{"action":"token_revoked","actor_id":"94226e5b-ce51-4949-8f54-b82f1686fc42","actor_username":"koleb256@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-07-22 23:21:22.65138+00	
00000000-0000-0000-0000-000000000000	74998adb-2981-422d-a2a1-d0c559f56017	{"action":"logout","actor_id":"94226e5b-ce51-4949-8f54-b82f1686fc42","actor_username":"koleb256@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-07-22 23:21:47.532571+00	
00000000-0000-0000-0000-000000000000	91980e67-fc85-429d-8ef3-733cb74e82c4	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-22 23:51:16.560929+00	
00000000-0000-0000-0000-000000000000	2689a9f5-44dd-494f-8913-7a44e9958e45	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-23 00:44:37.526305+00	
00000000-0000-0000-0000-000000000000	f207529a-448d-4ce4-a4bd-ac60e4c8f438	{"action":"token_revoked","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-23 00:44:37.528849+00	
00000000-0000-0000-0000-000000000000	82d4c4ad-0523-4c47-93e6-4fd4ab870b98	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-23 00:49:23.4732+00	
00000000-0000-0000-0000-000000000000	fb4ee10b-1349-4bb1-a327-0a9ca5f79275	{"action":"token_revoked","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-23 00:49:23.474678+00	
00000000-0000-0000-0000-000000000000	fbaff289-1ae8-4826-ac98-e665c1aa9930	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-23 00:50:47.764993+00	
00000000-0000-0000-0000-000000000000	d75dc519-4ce2-483b-8314-21d47ef95e4b	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 00:50:57.012022+00	
00000000-0000-0000-0000-000000000000	f81e2dcd-da13-4789-9ff3-e06c72af0321	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-23 00:51:04.938527+00	
00000000-0000-0000-0000-000000000000	ced4d8aa-2447-495e-a37b-def6449c2e10	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 00:51:13.469327+00	
00000000-0000-0000-0000-000000000000	133c68ff-56cb-4d1d-a06b-b8a118d342ea	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-23 00:52:42.242627+00	
00000000-0000-0000-0000-000000000000	b6585c91-3e03-46ac-8ee4-4be45f20d848	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 01:01:02.154212+00	
00000000-0000-0000-0000-000000000000	99c2f034-4ca5-4121-a6be-186c9ee17c27	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-23 01:59:29.273415+00	
00000000-0000-0000-0000-000000000000	039867aa-2c0b-4ce0-89e2-21dec483d08c	{"action":"token_revoked","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-23 01:59:29.276622+00	
00000000-0000-0000-0000-000000000000	36eb087e-9511-4f14-9f93-2946c9e83b56	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-23 02:57:32.437713+00	
00000000-0000-0000-0000-000000000000	3d80ae02-6b59-4cc2-bffe-35f71dc42181	{"action":"token_revoked","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-23 02:57:32.440991+00	
00000000-0000-0000-0000-000000000000	6a6609b7-f770-42b3-a777-76fe5f9ff30c	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-23 03:55:33.13643+00	
00000000-0000-0000-0000-000000000000	63237738-0e2d-425b-9ff4-7d37308190bb	{"action":"token_revoked","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-23 03:55:33.139956+00	
00000000-0000-0000-0000-000000000000	dc739f78-0c14-4c04-94c4-b2c8f9d454cc	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-23 04:54:02.698569+00	
00000000-0000-0000-0000-000000000000	70dc5e13-92ec-414e-843a-7608cd3ce89d	{"action":"token_revoked","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-23 04:54:02.702527+00	
00000000-0000-0000-0000-000000000000	47192906-a379-4c63-8ce5-2cc5d59e10fa	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 05:42:07.264018+00	
00000000-0000-0000-0000-000000000000	bba6a7e1-f2e1-4652-b15b-f53a137e9dbc	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-23 05:42:30.859216+00	
00000000-0000-0000-0000-000000000000	3063476b-abae-436a-b14d-6a2354d453ff	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 05:43:17.657324+00	
00000000-0000-0000-0000-000000000000	6da7abd8-c5ee-45f3-a802-de19f4622955	{"action":"logout","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-23 05:43:36.674559+00	
00000000-0000-0000-0000-000000000000	4ce93fce-16fa-4e8d-9987-40d4495d86ce	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 05:43:48.518797+00	
00000000-0000-0000-0000-000000000000	634ca7a5-f127-4d66-b489-9a59dbe3309c	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-23 06:12:11.269172+00	
00000000-0000-0000-0000-000000000000	89fae371-774f-40cc-9a83-c702abbb7d36	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 06:12:22.955348+00	
00000000-0000-0000-0000-000000000000	5f777690-10bf-4e64-9cbb-66ef62b95dd1	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-23 06:14:10.289818+00	
00000000-0000-0000-0000-000000000000	c2b8a9d6-ce2f-403b-bd14-40ee0d641801	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 06:14:17.847869+00	
00000000-0000-0000-0000-000000000000	e35d481a-567e-4fb7-a423-e55613899aeb	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-23 06:16:11.214185+00	
00000000-0000-0000-0000-000000000000	d88cbd77-a2e6-46c0-9736-0968300f720a	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 06:16:29.947801+00	
00000000-0000-0000-0000-000000000000	3087eb49-d54f-45fd-8eb7-446068d005b8	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 06:24:04.18374+00	
00000000-0000-0000-0000-000000000000	ea4c02d9-5dd3-4dd1-afea-1d6eef0f9a6c	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-23 06:24:22.444665+00	
00000000-0000-0000-0000-000000000000	50b453dd-93d0-405e-b560-a5b1cc68a162	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 06:24:29.266445+00	
00000000-0000-0000-0000-000000000000	c72993c5-cd43-45ec-84de-15cc0441bcb4	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-23 06:25:59.300376+00	
00000000-0000-0000-0000-000000000000	73fc9b01-42ce-4a1a-9262-1251ef831b02	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 06:26:05.221643+00	
00000000-0000-0000-0000-000000000000	fb2a0977-e264-43e1-a019-9e89754d5943	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-23 14:57:49.567043+00	
00000000-0000-0000-0000-000000000000	e00fec36-8054-41db-be05-f865e91bc98f	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-23 14:57:49.577174+00	
00000000-0000-0000-0000-000000000000	a155dd60-00b1-4e55-be6b-d19c0de3eb7a	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 17:34:57.009698+00	
00000000-0000-0000-0000-000000000000	9d71f1c7-b16f-46da-8d0e-bac4e9e77d9e	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-23 17:55:41.754571+00	
00000000-0000-0000-0000-000000000000	97b13f9a-a50f-471d-92f2-de97fa45566e	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-23 17:55:41.758938+00	
00000000-0000-0000-0000-000000000000	84172ba4-e5bc-4613-b1ad-f9e9e2095e15	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-23 17:55:53.127269+00	
00000000-0000-0000-0000-000000000000	96c642d9-c53e-45ed-8c53-3dcb258d2e42	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 17:57:12.177952+00	
00000000-0000-0000-0000-000000000000	c8a919db-5bc5-4dc5-90b8-693751cfc351	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-23 18:01:19.547858+00	
00000000-0000-0000-0000-000000000000	bd7dc58b-8767-4edc-b324-74f9dd732bfc	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 18:01:31.815792+00	
00000000-0000-0000-0000-000000000000	8f62a512-5e52-4d58-bde8-827180b1bb33	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-23 18:04:28.289937+00	
00000000-0000-0000-0000-000000000000	f64a936e-56bb-46a1-bb4d-dafab293f3ae	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 18:04:43.802993+00	
00000000-0000-0000-0000-000000000000	de692f59-d551-43c6-b003-592a84bdb03a	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 21:14:59.26698+00	
00000000-0000-0000-0000-000000000000	b61665ab-7bd8-4a61-b435-20a2e1bfc675	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-23 21:21:51.539019+00	
00000000-0000-0000-0000-000000000000	3ebbfa3c-e5c2-417c-a277-dbab12493897	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 21:22:06.940044+00	
00000000-0000-0000-0000-000000000000	dc76d32c-21b7-46d9-a500-f99db6f6f800	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 21:40:42.51459+00	
00000000-0000-0000-0000-000000000000	32ae34bf-e494-4899-8dbd-661c8625cc0b	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-23 22:39:00.372294+00	
00000000-0000-0000-0000-000000000000	56881774-dc36-4e64-8cc4-a3e6bee83aa8	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-23 22:39:00.37611+00	
00000000-0000-0000-0000-000000000000	05fea06d-a02e-4e3e-a4c8-bd454b78e190	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-23 22:51:39.202597+00	
00000000-0000-0000-0000-000000000000	0565ba34-cb2d-43e1-be95-918e7d640f00	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-23 22:51:39.204513+00	
00000000-0000-0000-0000-000000000000	28c9c47b-00d0-42f1-9a51-e4352ae3d960	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 22:57:05.206181+00	
00000000-0000-0000-0000-000000000000	ba528e3c-1be9-4af8-bc10-7e3ed61d4adb	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-23 22:57:06.024303+00	
00000000-0000-0000-0000-000000000000	51690e00-7ae6-4848-860b-e562a4a25969	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-24 00:22:33.24458+00	
00000000-0000-0000-0000-000000000000	c111a535-ab2f-429a-9d1d-348b0de29223	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-24 00:22:33.249109+00	
00000000-0000-0000-0000-000000000000	60d0fc5b-65cf-48f0-bb7d-1a1ab05330d7	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 00:59:02.388065+00	
00000000-0000-0000-0000-000000000000	66f761f2-02fd-4f8f-9b20-f48b51e0a163	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-24 00:59:25.72983+00	
00000000-0000-0000-0000-000000000000	062ae0cc-d128-4ad5-9e8a-f54d8379605c	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 00:59:32.142353+00	
00000000-0000-0000-0000-000000000000	a615be39-97d1-4a5d-b925-e635919f69b4	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-24 01:20:51.367466+00	
00000000-0000-0000-0000-000000000000	94ed2c88-fd80-4120-8a4d-d51df7e723dd	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-24 01:20:51.372121+00	
00000000-0000-0000-0000-000000000000	117f20ba-e710-419c-8aba-06afe242bdae	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-24 01:46:08.301943+00	
00000000-0000-0000-0000-000000000000	e60a7856-2a19-4be9-bef7-910f6722655d	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 01:46:17.443629+00	
00000000-0000-0000-0000-000000000000	77ea7b08-421b-4285-a6c7-94744585dfdc	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-24 01:51:03.677858+00	
00000000-0000-0000-0000-000000000000	bfe5a3a6-cb3e-4a0b-817d-fd136a12afc7	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 01:51:10.188936+00	
00000000-0000-0000-0000-000000000000	f24fd6f9-5c54-43d3-9060-c9101b0c5ba6	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 01:52:12.530859+00	
00000000-0000-0000-0000-000000000000	a1a17230-e472-4678-95df-f2f50576e56d	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-24 02:50:17.056479+00	
00000000-0000-0000-0000-000000000000	01137e85-90a2-41f1-b8eb-40bf33d1e1f1	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-24 02:50:17.063281+00	
00000000-0000-0000-0000-000000000000	6bc268fb-35a5-431d-8f61-93119e7e96d3	{"action":"login","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 05:03:32.30949+00	
00000000-0000-0000-0000-000000000000	fe9d3fd4-85e5-4562-941a-7bcd45e372bb	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-24 05:08:53.996806+00	
00000000-0000-0000-0000-000000000000	8f6b3c8a-a90c-4b79-bb0a-e2ad6e4c3dd2	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-24 05:08:54.00022+00	
00000000-0000-0000-0000-000000000000	884b5475-2600-4dab-9e9c-89e4bce97d34	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-24 05:20:14.330662+00	
00000000-0000-0000-0000-000000000000	1518369e-fb8b-4408-bff4-7e5d66738f77	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 05:20:23.43707+00	
00000000-0000-0000-0000-000000000000	9bce4ef5-f91d-4b71-8ecc-01895bdbb171	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-24 05:20:36.609698+00	
00000000-0000-0000-0000-000000000000	9f40429c-e60f-45ca-b910-423f077fca56	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 05:20:44.966391+00	
00000000-0000-0000-0000-000000000000	9a1ba265-3816-4166-8084-b5fd6cae8070	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-24 05:37:08.162977+00	
00000000-0000-0000-0000-000000000000	6bf42972-45e9-474f-8d73-a4dcc74a2854	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-24 05:37:08.16569+00	
00000000-0000-0000-0000-000000000000	bd275522-0893-4d51-963b-0491887af740	{"action":"logout","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account"}	2025-07-24 05:43:55.807938+00	
00000000-0000-0000-0000-000000000000	5a3cd18a-da41-4682-9f71-b74849761bb5	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-24 05:47:56.378248+00	
00000000-0000-0000-0000-000000000000	3e5a0040-1aa2-4e9d-9c06-4a2530e72d63	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 05:48:06.244039+00	
00000000-0000-0000-0000-000000000000	8c816a6e-5f70-4982-a3c5-950d4b8de807	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-24 05:49:17.746321+00	
00000000-0000-0000-0000-000000000000	15d7734d-b64c-42e5-b5e7-48e5f6e90261	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 05:49:23.050679+00	
00000000-0000-0000-0000-000000000000	21f116ec-551f-4229-8cf4-ca6c0535af02	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-24 05:52:04.813636+00	
00000000-0000-0000-0000-000000000000	cd8cb393-6308-475f-94ee-507bdbb845f8	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 05:52:14.552518+00	
00000000-0000-0000-0000-000000000000	2b5c563b-58a5-4d62-9f00-460361117c5a	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-24 05:55:21.478118+00	
00000000-0000-0000-0000-000000000000	65f76ed0-ee38-4b02-b095-1f2ef23b6ccf	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 05:55:31.754844+00	
00000000-0000-0000-0000-000000000000	4fd0cad6-8f1d-4eea-81fb-e231739707f1	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-24 05:56:28.858404+00	
00000000-0000-0000-0000-000000000000	e7b1f378-e236-4196-93e0-d59f7800bad3	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 05:56:49.042122+00	
00000000-0000-0000-0000-000000000000	a179f1f8-e8c3-4ffc-9997-ac837b190bda	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-24 06:00:55.894914+00	
00000000-0000-0000-0000-000000000000	8f1a6252-8bb7-46b6-83e7-99d0e6f7c88c	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:03:49.719023+00	
00000000-0000-0000-0000-000000000000	7d0ae8a2-e590-47f2-8021-af4c930494a7	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:09:33.398284+00	
00000000-0000-0000-0000-000000000000	2b6ae4d5-92e2-4a44-b281-ddd54bb8799c	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:10:00.8266+00	
00000000-0000-0000-0000-000000000000	72cb8128-4521-4c76-b91f-e2d3f6cba597	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-24 06:10:32.034704+00	
00000000-0000-0000-0000-000000000000	ab24961a-17c2-4d19-8f17-acb516cc19ca	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:10:49.45993+00	
00000000-0000-0000-0000-000000000000	b46957d2-df8c-4543-b951-99733ec87b26	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:11:46.304761+00	
00000000-0000-0000-0000-000000000000	2a94f5c3-5948-4b3f-bb33-365cd51a577a	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-24 06:12:17.024374+00	
00000000-0000-0000-0000-000000000000	1b9c4a04-0a73-49c2-ace8-d0a0e2da6fe0	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:12:33.70018+00	
00000000-0000-0000-0000-000000000000	5947807f-0ccd-48a1-aa60-4311024e2abb	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:15:50.879493+00	
00000000-0000-0000-0000-000000000000	f65076d5-4c5d-4a3c-9ebe-20ec91d64b4c	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-24 06:16:25.609095+00	
00000000-0000-0000-0000-000000000000	b6792441-5d55-497e-b53f-fc831b40f7f9	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:16:32.732602+00	
00000000-0000-0000-0000-000000000000	7f808b11-07d3-4f80-a3ce-f143879a4c4e	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-24 06:25:37.363121+00	
00000000-0000-0000-0000-000000000000	c9faad64-c136-4f3f-829a-0bccaf9a6ea7	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:25:44.5959+00	
00000000-0000-0000-0000-000000000000	70c29adc-9348-400d-bfdf-e331bce2f4d3	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-24 06:26:13.892478+00	
00000000-0000-0000-0000-000000000000	825bd1d6-de54-41e2-97cb-3742873a35fb	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:26:22.814576+00	
00000000-0000-0000-0000-000000000000	9dc7d6ec-f297-4c88-8e63-6c8e9dd79d57	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-24 06:27:07.928262+00	
00000000-0000-0000-0000-000000000000	b29a4d47-1687-439d-a2ec-e8ed6a1d6a17	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:41:05.450165+00	
00000000-0000-0000-0000-000000000000	5e3b62f1-937a-45f3-b349-3026aa223909	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-24 06:41:22.154379+00	
00000000-0000-0000-0000-000000000000	8caa2591-5b64-4ecd-a7c0-2544223e06b4	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:42:32.334017+00	
00000000-0000-0000-0000-000000000000	dc5ef6c6-e5c3-4eaa-b36b-f7331521d0c0	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-24 06:42:58.649013+00	
00000000-0000-0000-0000-000000000000	023cda0c-bfaf-42d9-9189-d9ed8a67cc2b	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:43:09.651721+00	
00000000-0000-0000-0000-000000000000	cb38e681-c453-46d9-a6cf-60ff765edfe4	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-24 06:45:09.883672+00	
00000000-0000-0000-0000-000000000000	b63c4b40-3c4f-4e45-8a28-d8c34fd4d53e	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:45:23.986481+00	
00000000-0000-0000-0000-000000000000	ab3d5c40-25d0-484c-97f1-1b9d068b3c88	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-24 06:45:40.590868+00	
00000000-0000-0000-0000-000000000000	b7d39bdc-a218-45c7-8187-c4f6d3357d69	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:47:43.643331+00	
00000000-0000-0000-0000-000000000000	f312bcd0-96e9-4dae-9534-373bb698c7c4	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-24 06:49:14.709914+00	
00000000-0000-0000-0000-000000000000	e3218508-a075-488d-92c3-fef84fba8c8a	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:49:58.215336+00	
00000000-0000-0000-0000-000000000000	95326769-346f-47bd-beae-785210f8c38f	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-24 06:50:28.121057+00	
00000000-0000-0000-0000-000000000000	e4ffa0bb-de45-4926-8a86-55fa289a45a0	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:50:34.892721+00	
00000000-0000-0000-0000-000000000000	b2f90ebe-c41f-4852-a22d-4195c929f131	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-24 06:51:29.407026+00	
00000000-0000-0000-0000-000000000000	1bc8209f-36b6-43c0-aa31-779c0f26a8f5	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:52:40.45155+00	
00000000-0000-0000-0000-000000000000	3fdbfb1f-c2b7-4a65-ba79-30bff87d180b	{"action":"logout","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-24 06:52:47.604087+00	
00000000-0000-0000-0000-000000000000	af5afccb-372e-4a89-8b44-c5cad0288549	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:53:17.888411+00	
00000000-0000-0000-0000-000000000000	a8da9304-cde8-4cc3-9bd4-c4600d57f4a4	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-24 06:55:49.911199+00	
00000000-0000-0000-0000-000000000000	8c223dc8-bbeb-4a71-b459-754b9841e391	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 06:55:55.537643+00	
00000000-0000-0000-0000-000000000000	d76c1a74-04a1-4e36-b591-8863b15b28f9	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-24 23:23:44.528417+00	
00000000-0000-0000-0000-000000000000	8322d759-5aa9-4810-995a-724ca447cc9c	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-24 23:23:44.543876+00	
00000000-0000-0000-0000-000000000000	2f0c5c2e-e40a-435d-b62d-55637e1b0eb3	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-24 23:24:43.10027+00	
00000000-0000-0000-0000-000000000000	b6e30052-594f-44cc-88bb-f6b1737478c5	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 23:24:53.265429+00	
00000000-0000-0000-0000-000000000000	fb13fc5b-97e8-4331-b907-9553e5075871	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 23:48:29.267816+00	
00000000-0000-0000-0000-000000000000	9a3a5e6c-9a8f-4d67-b2f9-7f4c6dbccf31	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-24 23:49:08.821772+00	
00000000-0000-0000-0000-000000000000	1fa261d6-c171-4dd6-86b2-953620a0dff8	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 23:49:18.450533+00	
00000000-0000-0000-0000-000000000000	62acb465-b3e4-4351-9cbb-6fced225d275	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 23:49:22.748987+00	
00000000-0000-0000-0000-000000000000	62749699-5f39-4067-9c15-8b93edecdacb	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-24 23:57:04.315633+00	
00000000-0000-0000-0000-000000000000	b9a95a1d-1971-4cae-924f-b969f83221da	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-24 23:57:11.99565+00	
00000000-0000-0000-0000-000000000000	9df70daa-ba35-48b6-8434-6b076564d0dc	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-25 00:05:50.587626+00	
00000000-0000-0000-0000-000000000000	16c1bc1d-a19a-47db-9fc2-d3bfe856821a	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-25 00:49:52.1366+00	
00000000-0000-0000-0000-000000000000	c7a84306-5af2-4f97-80bb-f254d1a32270	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-25 00:49:57.538089+00	
00000000-0000-0000-0000-000000000000	928f4168-d561-444c-93d8-c1dae170be84	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-25 00:52:01.454571+00	
00000000-0000-0000-0000-000000000000	36e1a3ed-0ff0-4c67-8b31-60c51be6b12d	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-25 01:48:23.975771+00	
00000000-0000-0000-0000-000000000000	8cbea423-9032-45f5-a428-a6831d5d714b	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-25 01:48:31.617413+00	
00000000-0000-0000-0000-000000000000	9728e888-a947-4447-a472-154b29242d73	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-25 04:39:46.770117+00	
00000000-0000-0000-0000-000000000000	73824fda-d360-43ae-a98d-4836da788537	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-25 04:39:46.777607+00	
00000000-0000-0000-0000-000000000000	375ac22e-4143-48df-b87e-c80dc2827b7e	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-25 04:46:56.995219+00	
00000000-0000-0000-0000-000000000000	5b0d99cf-4e31-4191-9534-598ba8e8c1d4	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-25 04:46:56.997334+00	
00000000-0000-0000-0000-000000000000	140aafec-9fdc-4d88-8397-d51f5fd4be2a	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-25 04:55:11.168259+00	
00000000-0000-0000-0000-000000000000	7eca472b-0cbd-4733-b47a-b5c44fb0a0d2	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-25 05:24:58.345365+00	
00000000-0000-0000-0000-000000000000	92ebb832-870f-45f7-98c3-4ef4b9c47c4d	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-25 05:25:21.228347+00	
00000000-0000-0000-0000-000000000000	2a58a91b-52d0-4021-b772-20b7fa46fae2	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-25 05:25:29.178831+00	
00000000-0000-0000-0000-000000000000	09191c4d-96e4-48c7-b65c-9050a4aa8aa9	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-25 05:25:44.835224+00	
00000000-0000-0000-0000-000000000000	f078a297-5dbd-4c68-8529-063fa2bb22de	{"action":"login","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-25 13:22:47.673297+00	
00000000-0000-0000-0000-000000000000	86fadea2-e27c-4126-ad17-781c807c56a0	{"action":"login","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-25 13:27:44.047371+00	
00000000-0000-0000-0000-000000000000	9cb871bf-1985-4d68-aa4c-0dea9b97089d	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-25 14:25:47.559518+00	
00000000-0000-0000-0000-000000000000	e2e018ee-3538-4810-94b4-653239c7da4d	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-25 14:25:47.562754+00	
00000000-0000-0000-0000-000000000000	c2b640fa-0c90-43e3-aa68-51885375c401	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-25 14:48:00.015001+00	
00000000-0000-0000-0000-000000000000	d6886e04-ae6e-4b8e-a52b-25add21df267	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-25 14:48:00.01831+00	
00000000-0000-0000-0000-000000000000	de561a67-5180-42a2-bbe6-38fc448d8872	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-25 14:57:35.44022+00	
00000000-0000-0000-0000-000000000000	78dcb806-8e90-451e-bd45-efeab1c3a72a	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-25 16:36:56.818083+00	
00000000-0000-0000-0000-000000000000	c2648062-053f-4365-be3c-df6cceb98f70	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 03:43:45.56373+00	
00000000-0000-0000-0000-000000000000	a998a8cc-d28e-4bd2-b08f-0a2e5baa985f	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 05:16:55.756505+00	
00000000-0000-0000-0000-000000000000	6ee37756-e957-45e8-b0b5-2719da214c5a	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-26 05:19:56.046364+00	
00000000-0000-0000-0000-000000000000	330b3b33-f2bd-4b7c-ba90-ab4cd31adb35	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 05:20:19.735728+00	
00000000-0000-0000-0000-000000000000	eed3913f-97c0-4ca1-adc1-87faca9d29b9	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-26 05:27:09.951962+00	
00000000-0000-0000-0000-000000000000	55b92a9d-75ed-4bdc-8eb7-d9d6b9bb07eb	{"action":"token_revoked","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-26 05:27:09.957598+00	
00000000-0000-0000-0000-000000000000	e303407f-384a-4689-83af-7324d07d7cb3	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-26 05:30:53.030582+00	
00000000-0000-0000-0000-000000000000	3723f07d-e3bf-4a0c-a26b-407467b3b4df	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 05:31:09.278047+00	
00000000-0000-0000-0000-000000000000	2b7779dc-6ded-4d3a-a771-00f26bccc9bb	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-26 05:32:31.705616+00	
00000000-0000-0000-0000-000000000000	511d9622-45d7-411d-8272-e63d64f8c02a	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 05:32:50.024508+00	
00000000-0000-0000-0000-000000000000	26e81ab1-24de-4be6-9db6-2aede148539f	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-26 05:41:58.954697+00	
00000000-0000-0000-0000-000000000000	f7daded1-1f47-4deb-a7a0-edb1950b5880	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 05:47:15.633663+00	
00000000-0000-0000-0000-000000000000	5920f61e-9f6a-4928-b615-823ce0989ac7	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 15:17:56.232326+00	
00000000-0000-0000-0000-000000000000	9dcdc9b4-2fa5-49e9-9649-6728258d698c	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 15:32:02.130376+00	
00000000-0000-0000-0000-000000000000	471b97a1-8ef9-42a0-ae67-eea8d78ca04b	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-26 15:46:32.162608+00	
00000000-0000-0000-0000-000000000000	73a45121-0277-4979-96d6-18da68fcd57f	{"action":"token_revoked","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-26 15:46:32.165357+00	
00000000-0000-0000-0000-000000000000	bf35db2f-ad0d-45ad-81c3-196f1551eb63	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-26 16:54:23.271073+00	
00000000-0000-0000-0000-000000000000	8a4437c2-d687-4c54-b67e-8b861a298853	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-26 16:54:23.276781+00	
00000000-0000-0000-0000-000000000000	f514ac2a-8fb2-45d2-8234-b289158901d9	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-26 17:03:45.20262+00	
00000000-0000-0000-0000-000000000000	f2f9a738-b9c8-4383-9281-9caccdd7933c	{"action":"token_revoked","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-26 17:03:45.207048+00	
00000000-0000-0000-0000-000000000000	3c922715-bb8b-4e01-a990-1e3ff316056e	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-26 18:25:42.954698+00	
00000000-0000-0000-0000-000000000000	08e1f36c-31c4-4e8e-9556-f79df2359ae7	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-26 18:25:42.960047+00	
00000000-0000-0000-0000-000000000000	f9afb57a-1f3c-4c7e-8745-8be33d662856	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-26 18:57:46.783372+00	
00000000-0000-0000-0000-000000000000	6919b640-3a33-442e-98e1-08f7224eb46a	{"action":"token_revoked","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-26 18:57:46.785588+00	
00000000-0000-0000-0000-000000000000	f12bbf38-62fc-443a-9a7d-aed65ae70321	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-26 18:57:46.80672+00	
00000000-0000-0000-0000-000000000000	096695e3-4172-4acc-8098-91f1d4c8d336	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-26 18:57:46.814122+00	
00000000-0000-0000-0000-000000000000	99dd0f71-ddc5-4917-bd14-85c36fe1e9cd	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-26 19:16:31.596393+00	
00000000-0000-0000-0000-000000000000	94b177be-67ec-417a-b8d9-80234448bcf8	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 19:16:38.265168+00	
00000000-0000-0000-0000-000000000000	3792757d-df2d-424a-939c-b0422f4f7b13	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-26 19:21:03.73116+00	
00000000-0000-0000-0000-000000000000	0a00fc2a-6178-4b8e-9e38-8a9670ea521e	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 19:21:11.394219+00	
00000000-0000-0000-0000-000000000000	19bfdb8e-084f-4045-80a1-7bc8515346dc	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-26 19:21:53.999419+00	
00000000-0000-0000-0000-000000000000	d37fcc84-bbcb-43da-91d2-45bc93fe38f5	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 19:22:32.622835+00	
00000000-0000-0000-0000-000000000000	ad449d89-5718-4ce6-b680-9883fb292591	{"action":"logout","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-26 19:23:23.884955+00	
00000000-0000-0000-0000-000000000000	57db58b3-9698-48b6-89ab-e9d7e8eaaf21	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 19:30:13.986464+00	
00000000-0000-0000-0000-000000000000	9e3a2728-77da-4cb6-a1db-0bf46903e44a	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 19:36:07.677059+00	
00000000-0000-0000-0000-000000000000	4799d71b-d5d2-4d4a-8918-c6a75367da74	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 19:46:15.726215+00	
00000000-0000-0000-0000-000000000000	d25e49ae-a9e5-4104-a41e-358a0bbbf840	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-26 20:44:19.169509+00	
00000000-0000-0000-0000-000000000000	c839654a-566e-47be-b22b-5eff096b28f2	{"action":"token_revoked","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-26 20:44:19.172278+00	
00000000-0000-0000-0000-000000000000	b0daa50b-d30e-4c1b-a0e0-e45c3a25997a	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-26 21:39:08.792137+00	
00000000-0000-0000-0000-000000000000	25b9c0f5-b504-4569-8690-840f7fec5b5c	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-26 21:39:08.796089+00	
00000000-0000-0000-0000-000000000000	6342759c-7025-49f8-a227-fdb4fe14442d	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-26 21:59:49.252909+00	
00000000-0000-0000-0000-000000000000	e76acba0-dd3c-445b-9db2-7c526d58436e	{"action":"token_revoked","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-26 21:59:49.256409+00	
00000000-0000-0000-0000-000000000000	c4f2dd07-854d-448b-8fff-0f53f397ecf5	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-26 22:03:52.475365+00	
00000000-0000-0000-0000-000000000000	aa492699-d295-4598-9c41-902ed3629303	{"action":"token_revoked","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-26 22:03:52.479074+00	
00000000-0000-0000-0000-000000000000	fb5d2b1d-07f4-4cc1-8413-744fd46af6ff	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-26 22:54:52.076162+00	
00000000-0000-0000-0000-000000000000	c85c35cf-7711-4bf0-86d2-bf10d064a066	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 22:55:01.503635+00	
00000000-0000-0000-0000-000000000000	4d234217-e5b6-4a22-a6df-3c35e169f368	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 22:55:11.029019+00	
00000000-0000-0000-0000-000000000000	f8a476ae-bf5e-4799-8b52-00be47f4c078	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 22:57:36.801674+00	
00000000-0000-0000-0000-000000000000	d9dcc7cb-15e2-41d4-abb9-5d6daebb0d75	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-26 23:31:05.251515+00	
00000000-0000-0000-0000-000000000000	aeba184d-c538-441b-b501-ffd84d152cdc	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-27 04:22:32.731441+00	
00000000-0000-0000-0000-000000000000	f43b5e5d-b957-442f-8345-e1348084a918	{"action":"token_revoked","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-27 04:22:32.740823+00	
00000000-0000-0000-0000-000000000000	975a7487-00c1-4b6b-bb3d-af92cedb9615	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-28 03:52:22.833129+00	
00000000-0000-0000-0000-000000000000	5108b1d7-6853-44df-b422-ca737535a1a7	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-28 03:52:22.856283+00	
00000000-0000-0000-0000-000000000000	fea3c560-2a4d-47fe-9a23-ce4841503e06	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 14:56:33.775993+00	
00000000-0000-0000-0000-000000000000	448fd004-589a-4c4c-9d3a-9020f6513d22	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 14:56:33.789674+00	
00000000-0000-0000-0000-000000000000	639ed417-c1d2-476c-b0b8-b588c053a896	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 15:41:16.331239+00	
00000000-0000-0000-0000-000000000000	707ed5be-a9c7-4d6b-b383-6845f806626b	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 15:41:16.334336+00	
00000000-0000-0000-0000-000000000000	e67e94b2-8fe2-4692-9f67-4b74ea54b055	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 15:54:44.457882+00	
00000000-0000-0000-0000-000000000000	e6f51a42-6ade-4a9e-8bae-16e763470e78	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 15:54:44.460619+00	
00000000-0000-0000-0000-000000000000	b19a25e1-fb27-4026-9e2e-90aa6fcc3e16	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 16:52:58.268504+00	
00000000-0000-0000-0000-000000000000	58c36ecc-a8db-4e2f-a14d-794a7e9e07ee	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 16:52:58.274531+00	
00000000-0000-0000-0000-000000000000	792dbaad-ffbd-4192-b174-c3741396f269	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 17:51:10.435036+00	
00000000-0000-0000-0000-000000000000	38afe263-b9fa-405c-a07b-b6a97be11e90	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 17:51:10.438978+00	
00000000-0000-0000-0000-000000000000	940de8d5-056e-41a0-aa06-7a3cdd176f66	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 18:17:03.663235+00	
00000000-0000-0000-0000-000000000000	022310a5-6b24-4e51-a3c0-b38774fed2cb	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 18:17:03.665996+00	
00000000-0000-0000-0000-000000000000	f2849f4d-1de1-40b4-a849-2886bf519b23	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 18:49:13.932901+00	
00000000-0000-0000-0000-000000000000	8eab35d0-7654-497d-a4fb-0a3f988c82c6	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 18:49:13.936541+00	
00000000-0000-0000-0000-000000000000	0c53cb56-f4cf-48c4-bfb3-d90c3451d7c9	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-29 19:24:05.165334+00	
00000000-0000-0000-0000-000000000000	ac096705-b5b9-4e1a-8c17-6b271f305dbf	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-29 19:24:05.172131+00	
00000000-0000-0000-0000-000000000000	8d43ebd9-18c4-4637-bb88-f8bc565fa5a4	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-29 19:24:15.007814+00	
00000000-0000-0000-0000-000000000000	8379f366-b9b4-40d1-ad7c-64f18d8ea909	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-29 19:24:23.464219+00	
00000000-0000-0000-0000-000000000000	4547c864-bf5e-4edc-a711-d35d34a3af37	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 19:47:14.247493+00	
00000000-0000-0000-0000-000000000000	4cb82221-a6e5-4efa-8464-d81fe43db8f7	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 19:47:14.249647+00	
00000000-0000-0000-0000-000000000000	0e929eee-7a4e-45a5-aa30-21ff9410007e	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 21:05:50.161828+00	
00000000-0000-0000-0000-000000000000	f69fd4d2-8837-419d-93e6-eb4e14cf9096	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 21:05:50.172367+00	
00000000-0000-0000-0000-000000000000	784ba782-aa0c-43b8-9fef-6a0b1d348c1f	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-29 21:59:35.887425+00	
00000000-0000-0000-0000-000000000000	da0cd933-2302-4e58-bbc6-fbf11ba1e983	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-29 21:59:35.892865+00	
00000000-0000-0000-0000-000000000000	bf927262-8ae5-480b-ac81-722fa5ca9363	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 22:04:17.072439+00	
00000000-0000-0000-0000-000000000000	29505d9a-0d93-4045-aa10-772dde5af62c	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 22:04:17.074278+00	
00000000-0000-0000-0000-000000000000	b203f284-25db-4703-b519-0ef57b903d55	{"action":"logout","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-07-29 22:11:09.325798+00	
00000000-0000-0000-0000-000000000000	19c2a38d-fd6e-4897-9685-07806302ed4a	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-29 22:11:11.892705+00	
00000000-0000-0000-0000-000000000000	006a39fc-4509-4e57-a6d1-f8b373c7c974	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-29 22:13:22.079924+00	
00000000-0000-0000-0000-000000000000	6bc380d6-82d8-4bdd-856f-6bc204bb69e5	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-07-29 22:17:21.792335+00	
00000000-0000-0000-0000-000000000000	12655bb9-7fe6-4396-a34a-ea19fdeedd05	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-29 22:20:11.019144+00	
00000000-0000-0000-0000-000000000000	db450cf6-6f05-483a-82ea-f1bfabb80137	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-29 22:34:12.014598+00	
00000000-0000-0000-0000-000000000000	6d3f4dbb-6c43-4de4-b590-d7272bd4e936	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 23:02:17.327084+00	
00000000-0000-0000-0000-000000000000	4b54dbfa-4d2d-4b4b-87b7-93ff79505bd0	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 23:02:17.333207+00	
00000000-0000-0000-0000-000000000000	04f0b929-3e01-4ca3-a7c9-29bee7d2aa60	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 23:13:44.998915+00	
00000000-0000-0000-0000-000000000000	d55e707e-3a91-4d6e-be9d-2b2a9c868cb0	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-29 23:13:45.00146+00	
00000000-0000-0000-0000-000000000000	4b406b74-81f9-417f-8cfc-ce097a37b913	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-29 23:48:40.680354+00	
00000000-0000-0000-0000-000000000000	a9a451f1-461e-4207-a2ff-065c346dc78e	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-29 23:48:40.683801+00	
00000000-0000-0000-0000-000000000000	cdf777b6-6c83-4e5f-8dc4-ee8be4dc6080	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-30 00:00:17.297609+00	
00000000-0000-0000-0000-000000000000	8392636a-4392-45cf-91f5-906c1e87eb8b	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-30 00:00:17.300121+00	
00000000-0000-0000-0000-000000000000	6a8b0ebd-e0e6-430a-9056-6c62dba58be3	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-30 15:18:34.621612+00	
00000000-0000-0000-0000-000000000000	f6973fa9-9874-4c5c-9fee-ef34373ecee8	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-30 15:18:34.634159+00	
00000000-0000-0000-0000-000000000000	cd0a8892-2cfb-4cfc-b5d2-f97bc49e8738	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-30 15:54:35.330902+00	
00000000-0000-0000-0000-000000000000	b95bb830-19bc-4d18-8378-3fa2c216523e	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-30 15:54:35.336947+00	
00000000-0000-0000-0000-000000000000	b01ab7ce-5847-4d8c-ba1e-1bb9a0beab9f	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-30 16:16:35.009674+00	
00000000-0000-0000-0000-000000000000	a24f1454-bb02-4252-bbb3-cc91e0916a47	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-30 16:16:35.011867+00	
00000000-0000-0000-0000-000000000000	f4d39abb-98b7-419d-82ee-ce0f393196a6	{"action":"token_refreshed","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-30 17:14:41.894083+00	
00000000-0000-0000-0000-000000000000	0b9075b7-1dbd-4d4b-82e6-0cab53bc2b4f	{"action":"token_revoked","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"token"}	2025-07-30 17:14:41.896587+00	
00000000-0000-0000-0000-000000000000	9ca8d787-29be-43cb-9b57-ea7d9b55cbf9	{"action":"logout","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account"}	2025-07-30 17:59:40.663359+00	
00000000-0000-0000-0000-000000000000	b8dca859-40ab-41ec-be79-cb3f531382f2	{"action":"login","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-30 17:59:47.629207+00	
00000000-0000-0000-0000-000000000000	1d451052-c69b-4fbb-8445-1e1fe4885dc7	{"action":"login","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-30 18:01:26.649179+00	
00000000-0000-0000-0000-000000000000	c4f9a07c-8d18-441c-8091-43e1240a01e6	{"action":"logout","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account"}	2025-07-30 18:01:30.152066+00	
00000000-0000-0000-0000-000000000000	79d1f567-b3e2-47f3-b695-d55126c2ca18	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-07-31 15:23:58.699909+00	
00000000-0000-0000-0000-000000000000	8ee2eefc-5e05-41f4-ad93-5155fd3a0e49	{"action":"token_refreshed","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-31 20:14:19.26276+00	
00000000-0000-0000-0000-000000000000	0ac5bfe3-6181-4ccd-a754-a45f6fa2e199	{"action":"token_revoked","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"token"}	2025-07-31 20:14:19.26793+00	
00000000-0000-0000-0000-000000000000	61a8a409-0da5-4f6c-afde-3551c206642e	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-31 23:11:24.812396+00	
00000000-0000-0000-0000-000000000000	813d037e-6c8c-4a94-96a8-7b248f979465	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-07-31 23:11:24.813916+00	
00000000-0000-0000-0000-000000000000	b84d4851-db0b-4209-a30e-e3b0a3ec004a	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-01 11:15:54.465796+00	
00000000-0000-0000-0000-000000000000	fddcc6ae-175f-4f93-a2a9-028c145009b2	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-01 11:15:54.472651+00	
00000000-0000-0000-0000-000000000000	8d7c5711-f30e-4819-81bf-fe00f12c7272	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-01 16:04:47.910504+00	
00000000-0000-0000-0000-000000000000	709f01f2-720a-4c72-b63e-7cdb82634e3d	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-01 16:04:47.914304+00	
00000000-0000-0000-0000-000000000000	c0faafb2-d388-49be-bdc7-cff417853acf	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-01 16:58:00.172924+00	
00000000-0000-0000-0000-000000000000	716ebd73-06e6-41d6-827b-b4a1289ba0d4	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-01 16:58:00.176475+00	
00000000-0000-0000-0000-000000000000	b8c03322-e3fe-4311-a105-203950f04f24	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-08-01 16:58:02.880858+00	
00000000-0000-0000-0000-000000000000	687097da-8723-4b96-931f-2068f3674516	{"action":"login","actor_id":"94226e5b-ce51-4949-8f54-b82f1686fc42","actor_username":"koleb256@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-01 16:59:17.755388+00	
00000000-0000-0000-0000-000000000000	f15292f0-b6db-4131-8894-8a87cd82bce5	{"action":"logout","actor_id":"94226e5b-ce51-4949-8f54-b82f1686fc42","actor_username":"koleb256@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-08-01 16:59:24.682693+00	
00000000-0000-0000-0000-000000000000	82c49787-53bc-47de-a367-28ac5886064c	{"action":"login","actor_id":"94226e5b-ce51-4949-8f54-b82f1686fc42","actor_username":"koleb256@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-01 16:59:58.650494+00	
00000000-0000-0000-0000-000000000000	d00a74d0-4959-412b-b1ff-e3353a3d4bd4	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-01 17:00:08.905683+00	
00000000-0000-0000-0000-000000000000	1f7bc410-ee76-4eed-9bb7-93daaf6c7105	{"action":"logout","actor_id":"94226e5b-ce51-4949-8f54-b82f1686fc42","actor_username":"koleb256@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-08-01 17:02:48.40157+00	
00000000-0000-0000-0000-000000000000	7caac993-7600-4ebf-a14f-68ec4987809d	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-08-01 17:02:51.600265+00	
00000000-0000-0000-0000-000000000000	fdeed688-a114-44c7-afbf-32b3e6d9eaa3	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-01 17:02:57.678254+00	
00000000-0000-0000-0000-000000000000	5866e796-5896-4139-b7dd-453a83a971f0	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-01 17:02:57.894697+00	
00000000-0000-0000-0000-000000000000	20b6e1be-0dca-4280-907f-7f49614e6f4d	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-08-01 17:03:07.206102+00	
00000000-0000-0000-0000-000000000000	1cbfa683-bf7f-4721-ae37-14cc0b362c72	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-01 17:03:15.706855+00	
00000000-0000-0000-0000-000000000000	329eddeb-392f-46f5-a16d-6d06eb697387	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-08-01 17:04:35.203008+00	
00000000-0000-0000-0000-000000000000	c7c1fd43-37a6-4bd6-9bd3-488c3ba1fc30	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-01 17:05:13.168297+00	
00000000-0000-0000-0000-000000000000	b84e5730-17e5-46e0-9054-6289793bee38	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-08-01 17:10:15.638715+00	
00000000-0000-0000-0000-000000000000	64ffc1bd-1427-4572-9ff1-f5d94c105294	{"action":"login","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-01 17:10:42.642011+00	
00000000-0000-0000-0000-000000000000	004c3623-003c-43ff-8858-c0db9010bbfa	{"action":"logout","actor_id":"3756a8de-233f-414d-90a6-8053a5a13657","actor_username":"demo@demo.com","actor_via_sso":false,"log_type":"account"}	2025-08-01 17:11:02.596461+00	
00000000-0000-0000-0000-000000000000	fecd7538-77a0-43d1-864a-dbf1cbbcd8e6	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-01 17:11:10.715162+00	
00000000-0000-0000-0000-000000000000	f920b250-452a-41e1-b7d5-bb954a3bf7e9	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-08-01 17:15:08.284902+00	
00000000-0000-0000-0000-000000000000	df920472-6755-42b8-95b0-8d2dd068c97e	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-01 17:15:22.132826+00	
00000000-0000-0000-0000-000000000000	80da5d57-f41f-4471-8e0d-589ff9c223b1	{"action":"login","actor_id":"94226e5b-ce51-4949-8f54-b82f1686fc42","actor_username":"koleb256@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-01 17:16:38.085128+00	
00000000-0000-0000-0000-000000000000	79c5c40a-26f3-4985-8dc4-bc54fc4f498d	{"action":"token_refreshed","actor_id":"94226e5b-ce51-4949-8f54-b82f1686fc42","actor_username":"koleb256@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-08-01 19:49:26.029044+00	
00000000-0000-0000-0000-000000000000	6ea20ae3-1e5e-40a8-a1e0-5561183feb73	{"action":"token_revoked","actor_id":"94226e5b-ce51-4949-8f54-b82f1686fc42","actor_username":"koleb256@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-08-01 19:49:26.036436+00	
00000000-0000-0000-0000-000000000000	7c73c89d-9880-4e3d-9359-ed8cb7038174	{"action":"login","actor_id":"94226e5b-ce51-4949-8f54-b82f1686fc42","actor_username":"koleb256@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-01 20:52:02.770992+00	
00000000-0000-0000-0000-000000000000	dc818d5c-df0f-49b0-98e3-035bbedf3bdd	{"action":"token_refreshed","actor_id":"94226e5b-ce51-4949-8f54-b82f1686fc42","actor_username":"koleb256@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-08-01 22:44:25.304487+00	
00000000-0000-0000-0000-000000000000	886fd7b8-9856-4f4e-9ad4-86066442fc24	{"action":"token_revoked","actor_id":"94226e5b-ce51-4949-8f54-b82f1686fc42","actor_username":"koleb256@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-08-01 22:44:25.311139+00	
00000000-0000-0000-0000-000000000000	d6a43cf5-340e-4111-9e19-2cb90b90c0e6	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-02 13:21:32.461309+00	
00000000-0000-0000-0000-000000000000	2cd0f97e-ca9e-4108-828f-d8484c4985e7	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-02 13:21:32.474905+00	
00000000-0000-0000-0000-000000000000	a4c708e4-996d-4462-96ad-7d688263c19f	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-02 14:29:01.174922+00	
00000000-0000-0000-0000-000000000000	fac6a102-62be-4b3c-8997-3fa2c5f263df	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-02 14:29:01.178572+00	
00000000-0000-0000-0000-000000000000	20be9d51-f5f0-4b85-b768-174cd3d6445b	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-02 16:22:13.686024+00	
00000000-0000-0000-0000-000000000000	f9df8ba9-56c0-4794-a804-8d9747e8bbbe	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-02 16:22:14.994932+00	
00000000-0000-0000-0000-000000000000	8bfaece6-05c1-4812-93a8-a442763b82f4	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-02 18:25:13.58046+00	
00000000-0000-0000-0000-000000000000	bfdc3c5f-45df-44f0-ac28-1910f003e89e	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-02 18:25:13.584245+00	
00000000-0000-0000-0000-000000000000	ffd490fa-68f6-4122-8b37-e2a39a2b3d9b	{"action":"login","actor_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","actor_username":"wwhite@heisenbergllc.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-03 00:50:55.808249+00	
00000000-0000-0000-0000-000000000000	32ab78dd-fce6-4976-b4b9-a21e36666517	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-03 03:01:07.736532+00	
00000000-0000-0000-0000-000000000000	c5f5f1d2-f703-4049-aa59-101750735c3d	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-03 03:01:07.741279+00	
00000000-0000-0000-0000-000000000000	e054abb0-afab-42ae-a5be-c53c5f5c8ae4	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-03 13:14:50.528882+00	
00000000-0000-0000-0000-000000000000	f37c58b4-832b-4833-8b14-255a10e7f33e	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-03 13:14:50.539508+00	
00000000-0000-0000-0000-000000000000	70e6d67f-f728-41e7-b821-6d725c1268ca	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-03 14:45:15.002098+00	
00000000-0000-0000-0000-000000000000	bfe94bc7-481f-4bb2-ac0b-67736c4a08eb	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-03 14:45:15.004261+00	
00000000-0000-0000-0000-000000000000	ff2d01d6-31a3-4ec7-bd98-7e93414dbad7	{"action":"token_refreshed","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-03 16:43:53.650027+00	
00000000-0000-0000-0000-000000000000	0b9b3840-03db-457c-b53f-a616a035f94c	{"action":"token_revoked","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-03 16:43:53.651583+00	
00000000-0000-0000-0000-000000000000	7c14f6a7-4139-41a0-9c27-4af7581f8c92	{"action":"logout","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-08-03 17:02:37.040425+00	
00000000-0000-0000-0000-000000000000	8b3ae324-754e-4a62-b84e-1d56a770ab92	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"romeo@forestry.com","user_id":"c057535b-408e-44f9-b99f-339ff0211025","user_phone":""}}	2025-08-04 00:41:13.34923+00	
00000000-0000-0000-0000-000000000000	746b39ef-49aa-40d6-90ec-c7dbbb88ebcf	{"action":"login","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-04 00:48:43.695642+00	
00000000-0000-0000-0000-000000000000	7ff3c17e-9247-4c40-9c08-96c436ab221d	{"action":"login","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-04 01:40:36.042228+00	
00000000-0000-0000-0000-000000000000	9845e0f0-f587-4631-b683-436be2f275a7	{"action":"login","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-04 01:45:40.435749+00	
00000000-0000-0000-0000-000000000000	d8cea194-c990-4f55-8b15-8ba3d912db6f	{"action":"login","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-04 01:49:31.338279+00	
00000000-0000-0000-0000-000000000000	c3671929-44d8-40e7-bdc8-25614d57f0a3	{"action":"logout","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"account"}	2025-08-04 01:49:40.968177+00	
00000000-0000-0000-0000-000000000000	31079963-30e9-48db-84d8-e868f42ee44e	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-04 01:49:45.952513+00	
00000000-0000-0000-0000-000000000000	3c2b3ee9-6608-4a86-8dee-c2d563e8f0c2	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-08-04 01:49:50.712435+00	
00000000-0000-0000-0000-000000000000	5a52f5b9-6ae6-4663-81e1-0570ffc0eb7f	{"action":"login","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-04 01:50:07.289512+00	
00000000-0000-0000-0000-000000000000	29c5a727-ed7a-49b6-b933-963c018d0029	{"action":"token_refreshed","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-04 02:48:24.58328+00	
00000000-0000-0000-0000-000000000000	8862f8a4-323b-4930-b81d-0904d111621f	{"action":"token_revoked","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-04 02:48:24.589014+00	
00000000-0000-0000-0000-000000000000	c941b2f5-6fca-4a04-b73b-7af8b5b466ef	{"action":"token_refreshed","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-04 03:46:28.582432+00	
00000000-0000-0000-0000-000000000000	215a0821-fe9f-47e8-8714-9133b8a26a65	{"action":"token_revoked","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-04 03:46:28.585096+00	
00000000-0000-0000-0000-000000000000	5acbaaa0-6153-4ac6-9241-cd0b6524e189	{"action":"token_refreshed","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-04 05:03:07.114192+00	
00000000-0000-0000-0000-000000000000	4a24ab37-fbca-4b42-8d2b-8123e913825e	{"action":"token_revoked","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-04 05:03:07.117011+00	
00000000-0000-0000-0000-000000000000	478d5de9-4754-4e2d-a55f-0e261f9718c7	{"action":"token_refreshed","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-04 06:05:15.065202+00	
00000000-0000-0000-0000-000000000000	c3ff3f5a-561d-4715-ab69-67f1b28f796c	{"action":"token_revoked","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-04 06:05:15.074632+00	
00000000-0000-0000-0000-000000000000	55ee1023-7742-4fac-92da-dce7adb1a7ef	{"action":"token_refreshed","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-04 07:03:31.056973+00	
00000000-0000-0000-0000-000000000000	868d181d-4a01-41e0-97c4-a1758cd079cc	{"action":"token_revoked","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-04 07:03:31.067623+00	
00000000-0000-0000-0000-000000000000	aae55024-9d4a-4563-8847-4d23d28e2485	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-04 11:09:05.65029+00	
00000000-0000-0000-0000-000000000000	4c47057e-501a-4792-881a-72bb40809e7a	{"action":"token_refreshed","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-04 21:01:03.187601+00	
00000000-0000-0000-0000-000000000000	74ea18bc-c266-4df3-82b0-8180609b5957	{"action":"token_revoked","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-04 21:01:03.19819+00	
00000000-0000-0000-0000-000000000000	371ec4a2-1ac4-4b2e-bcf5-95a83d9c00eb	{"action":"token_refreshed","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-05 01:15:00.423357+00	
00000000-0000-0000-0000-000000000000	c48d89ec-7349-400d-97b6-1b8a0a2a234f	{"action":"token_revoked","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-05 01:15:00.435819+00	
00000000-0000-0000-0000-000000000000	b30075bf-a0e7-4dc3-89d1-d415dcd8bde3	{"action":"token_refreshed","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-05 02:23:51.153228+00	
00000000-0000-0000-0000-000000000000	d2f0cd86-8b12-4d56-b41f-a09db0fa8ce4	{"action":"token_revoked","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-05 02:23:51.157537+00	
00000000-0000-0000-0000-000000000000	4b25b2e3-409e-4348-b80f-a0bbd49e4739	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-05 02:24:13.997763+00	
00000000-0000-0000-0000-000000000000	120cc105-ae82-4f87-ad68-b753fd1f66f8	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-08-05 02:26:31.051691+00	
00000000-0000-0000-0000-000000000000	80f398e3-49c7-40a9-ad45-1b274f373992	{"action":"login","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-05 02:26:40.416436+00	
00000000-0000-0000-0000-000000000000	6ca56e7d-a9ec-4d81-bc63-ff12d506f196	{"action":"token_refreshed","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-05 03:24:49.448701+00	
00000000-0000-0000-0000-000000000000	d1c11086-4244-4f33-a7f3-7aa007d00ea5	{"action":"token_revoked","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-05 03:24:49.452438+00	
00000000-0000-0000-0000-000000000000	716282ec-17dc-4242-a85a-ba2a8f786c37	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"wwhite@heisenbergllc.com","user_id":"48ebce06-f72f-4a63-a06b-fd5408ae0fd6","user_phone":""}}	2025-08-05 16:19:49.319199+00	
00000000-0000-0000-0000-000000000000	2243fa67-eacd-491e-80cd-728376c7f1fe	{"action":"token_refreshed","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-05 16:25:06.270837+00	
00000000-0000-0000-0000-000000000000	47e3d714-f965-498d-8f9c-30f4f78ddc04	{"action":"token_revoked","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-05 16:25:06.275245+00	
00000000-0000-0000-0000-000000000000	705e5255-ef35-4639-aa01-7b82855a19ba	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-05 16:53:33.215131+00	
00000000-0000-0000-0000-000000000000	c7f9cb60-7f75-42c3-b4fb-d1d0d81ce35e	{"action":"logout","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"account"}	2025-08-05 17:00:21.408784+00	
00000000-0000-0000-0000-000000000000	b98433ce-e840-4720-a819-1929e6d4d1a8	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-05 17:00:29.288133+00	
00000000-0000-0000-0000-000000000000	7a1a14e0-7331-47d5-83a6-522e127e9727	{"action":"token_refreshed","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-05 20:38:42.609817+00	
00000000-0000-0000-0000-000000000000	d0f08b4a-e15f-487a-bd51-61a4366e9887	{"action":"token_revoked","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"token"}	2025-08-05 20:38:42.616103+00	
00000000-0000-0000-0000-000000000000	ddd6fd0d-274b-4fbd-b9cd-2c5125242310	{"action":"logout","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account"}	2025-08-05 20:40:08.698189+00	
00000000-0000-0000-0000-000000000000	634ee203-9feb-47c8-ab7b-e4cf1645598e	{"action":"login","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-05 20:40:24.440604+00	
00000000-0000-0000-0000-000000000000	25ca1354-1e35-4dbb-b8f0-ffe06e3ff0f0	{"action":"login","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-05 20:42:10.824828+00	
00000000-0000-0000-0000-000000000000	67c5b06e-1686-432d-8359-649be31c1d96	{"action":"login","actor_id":"d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2","actor_username":"rfusco@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-05 20:45:56.532671+00	
00000000-0000-0000-0000-000000000000	c2b41397-7b2f-4039-95e5-bae228b7b142	{"action":"token_refreshed","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-05 22:42:37.265348+00	
00000000-0000-0000-0000-000000000000	73ec2d8d-173d-45c9-b6af-1d3ab4700866	{"action":"token_revoked","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"token"}	2025-08-05 22:42:37.271704+00	
00000000-0000-0000-0000-000000000000	21c2887a-fb10-4d92-a741-6d0242332f87	{"action":"logout","actor_id":"c057535b-408e-44f9-b99f-339ff0211025","actor_username":"romeo@forestry.com","actor_via_sso":false,"log_type":"account"}	2025-08-05 22:42:58.636984+00	
00000000-0000-0000-0000-000000000000	05073cba-7e3d-4b6f-b269-773bbe2fe8d3	{"action":"login","actor_id":"49c3d8fe-3316-4e93-9c43-96d38a132c20","actor_username":"admin@summitautomation.io","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-08-05 22:43:07.621368+00	
\.


--
-- Data for Name: flow_state; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.flow_state (id, user_id, auth_code, code_challenge_method, code_challenge, provider_type, provider_access_token, provider_refresh_token, created_at, updated_at, authentication_method, auth_code_issued_at) FROM stdin;
1d0063d8-db7c-4398-a2e1-03aa0f245502	11f3d262-acea-4ac7-b8fe-f54b8a89b793	9bc7d9cb-b263-4674-9c7c-70a03751eb03	s256	BxYGCvJFESKV9SIRrv9c6ZL55gK5PCQIojpQIWDT814	email			2025-06-19 23:31:48.400006+00	2025-06-19 23:31:48.400006+00	email/signup	\N
8dfb92cf-2980-4517-8a34-8899a207f2bc	f9b1c90a-eb03-462a-b49b-50e6d4da1320	21697abb-3ce1-43e1-8655-81b4e9a8ff4c	s256	Sl4qkTJMfcE95bWEKcNHLkf2XD5k7FPNn43OFZgzvCI	email			2025-07-08 22:20:27.678012+00	2025-07-08 22:20:27.678012+00	email/signup	\N
d752a5a2-aac8-4ac0-aeaa-9a11531215ac	4b8887c7-7e39-4e16-ab2f-2906bc484210	e5ca30cc-98ff-40a5-bfce-682907df7470	s256	8A-SyesO60WqwjCfFkKbrNA8hSFr_TcBLt9qNL3cX2w	email			2025-07-12 20:53:37.760892+00	2025-07-12 20:53:37.760892+00	email/signup	\N
a44a4232-c3d9-42bb-b8dc-a51dd1a6e034	60c47787-f9f0-442a-bbfc-1803ffb060a4	f06c03d0-ade1-4513-b5e4-516ae5361116	s256	v0CEg-zlymmVk-nuxDEQ2VgYeSISe-wqcTpz52RDU70	email			2025-07-12 22:49:12.977871+00	2025-07-12 22:49:12.977871+00	email/signup	\N
e7a78a64-b8e0-4321-b5bf-91bae438e8dd	49c3d8fe-3316-4e93-9c43-96d38a132c20	53f3fa39-5928-430c-804f-568df0b48aac	s256	4EfNcV8fu3CwLY5WocL4qwsT57vtWgW2llYGSuw4WEY	email			2025-07-18 18:21:49.527268+00	2025-07-18 18:21:49.527268+00	email/signup	\N
2ad6a563-212a-4b3c-897d-21a846ae834f	60c47787-f9f0-442a-bbfc-1803ffb060a4	c61cb21f-a491-46bb-b76f-fc922a1e396c	s256	yeeEtspuB9vlkvW3b6gWtR0lf-xOOyhHgsPkaJFOtus	recovery			2025-07-22 14:55:29.925035+00	2025-07-22 14:55:29.925035+00	recovery	\N
\.


--
-- Data for Name: identities; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at, id) FROM stdin;
f9b1c90a-eb03-462a-b49b-50e6d4da1320	f9b1c90a-eb03-462a-b49b-50e6d4da1320	{"sub": "f9b1c90a-eb03-462a-b49b-50e6d4da1320", "email": "milanfusco68@gmail.com", "email_verified": false, "phone_verified": false}	email	2025-07-08 22:20:27.671036+00	2025-07-08 22:20:27.671093+00	2025-07-08 22:20:27.671093+00	beef580c-88ca-4577-b8c1-575f2cb27f13
60c47787-f9f0-442a-bbfc-1803ffb060a4	60c47787-f9f0-442a-bbfc-1803ffb060a4	{"sub": "60c47787-f9f0-442a-bbfc-1803ffb060a4", "email": "covertlaptop@gmail.com", "email_verified": true, "phone_verified": false}	email	2025-07-12 22:49:12.974845+00	2025-07-12 22:49:12.974897+00	2025-07-12 22:49:12.974897+00	622b67dd-bcd8-45d4-899d-293562f16a85
49c3d8fe-3316-4e93-9c43-96d38a132c20	49c3d8fe-3316-4e93-9c43-96d38a132c20	{"sub": "49c3d8fe-3316-4e93-9c43-96d38a132c20", "email": "admin@summitautomation.io", "email_verified": true, "phone_verified": false}	email	2025-07-18 18:21:49.523509+00	2025-07-18 18:21:49.523566+00	2025-07-18 18:21:49.523566+00	fb1530c6-6b6e-44f5-b58c-4f5d7668fee7
d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2	d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2	{"sub": "d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2", "email": "rfusco@summitautomation.io", "email_verified": false, "phone_verified": false}	email	2025-07-19 18:37:53.112359+00	2025-07-19 18:37:53.112433+00	2025-07-19 18:37:53.112433+00	665af20d-08d9-4945-9228-7cc596278ba0
3756a8de-233f-414d-90a6-8053a5a13657	3756a8de-233f-414d-90a6-8053a5a13657	{"sub": "3756a8de-233f-414d-90a6-8053a5a13657", "email": "demo@demo.com", "email_verified": false, "phone_verified": false}	email	2025-07-20 20:54:00.707702+00	2025-07-20 20:54:00.707765+00	2025-07-20 20:54:00.707765+00	2d9a70da-0c54-4e0e-959f-ff50e89d887e
94226e5b-ce51-4949-8f54-b82f1686fc42	94226e5b-ce51-4949-8f54-b82f1686fc42	{"sub": "94226e5b-ce51-4949-8f54-b82f1686fc42", "email": "koleb256@gmail.com", "email_verified": false, "phone_verified": false}	email	2025-07-22 16:34:41.533228+00	2025-07-22 16:34:41.53328+00	2025-07-22 16:34:41.53328+00	6f04b016-34db-4501-98ad-ab1266b42c5d
c057535b-408e-44f9-b99f-339ff0211025	c057535b-408e-44f9-b99f-339ff0211025	{"sub": "c057535b-408e-44f9-b99f-339ff0211025", "email": "romeo@forestry.com", "email_verified": false, "phone_verified": false}	email	2025-08-04 00:41:13.342583+00	2025-08-04 00:41:13.342641+00	2025-08-04 00:41:13.342641+00	7bbdf7a7-415a-4448-969c-62b0cabf4bff
\.


--
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: mfa_amr_claims; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_amr_claims (session_id, created_at, updated_at, authentication_method, id) FROM stdin;
37a2f79f-835b-4e4d-bca5-0a867d9e15de	2025-08-01 17:16:38.089781+00	2025-08-01 17:16:38.089781+00	password	96e16f50-8229-481a-9951-c0f8446aeb2a
6a8dc42f-84e9-4270-89ec-2c4170cdf80a	2025-08-01 20:52:02.780144+00	2025-08-01 20:52:02.780144+00	password	0bcdd36a-d86b-444e-b1b6-4e7312d9fe87
d55aa0e0-3e34-439c-9b29-5002a74b9bfe	2025-08-05 20:45:56.540024+00	2025-08-05 20:45:56.540024+00	password	d09470e1-aadb-4802-aba7-46bb26eeeba6
6846ce9e-9eb6-4e5c-9a4e-e9cbaa5c903b	2025-08-05 22:43:07.628623+00	2025-08-05 22:43:07.628623+00	password	45db0dec-9949-4d3f-8d61-141de1a978cb
\.


--
-- Data for Name: mfa_challenges; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_challenges (id, factor_id, created_at, verified_at, ip_address, otp_code, web_authn_session_data) FROM stdin;
\.


--
-- Data for Name: mfa_factors; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_factors (id, user_id, friendly_name, factor_type, status, created_at, updated_at, secret, phone, last_challenged_at, web_authn_credential, web_authn_aaguid) FROM stdin;
\.


--
-- Data for Name: one_time_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.one_time_tokens (id, user_id, token_type, token_hash, relates_to, created_at, updated_at) FROM stdin;
c58b1829-57f8-4e4f-b11b-512e79ab4b31	f9b1c90a-eb03-462a-b49b-50e6d4da1320	confirmation_token	pkce_fb7e7b567c56e21f74ba1940afcd01c25e5506dd52ecb15d4a44624a	milanfusco68@gmail.com	2025-07-08 22:20:29.257386	2025-07-08 22:20:29.257386
427b4bab-ff8f-465b-9a3e-07aec32da6bd	60c47787-f9f0-442a-bbfc-1803ffb060a4	recovery_token	pkce_082f60d0f23407e38386e0e1c21944b649404490613f847b4a5dfac7	covertlaptop@gmail.com	2025-07-22 14:55:30.687865	2025-07-22 14:55:30.687865
\.


--
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at, parent, session_id) FROM stdin;
00000000-0000-0000-0000-000000000000	358	rmwhysac4pxt	d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2	f	2025-08-05 20:45:56.537386+00	2025-08-05 20:45:56.537386+00	\N	d55aa0e0-3e34-439c-9b29-5002a74b9bfe
00000000-0000-0000-0000-000000000000	320	ixy2dp66xp3o	94226e5b-ce51-4949-8f54-b82f1686fc42	t	2025-08-01 17:16:38.087847+00	2025-08-01 19:49:26.038176+00	\N	37a2f79f-835b-4e4d-bca5-0a867d9e15de
00000000-0000-0000-0000-000000000000	322	w6aof3ubxyfd	94226e5b-ce51-4949-8f54-b82f1686fc42	t	2025-08-01 20:52:02.777319+00	2025-08-01 22:44:25.311637+00	\N	6a8dc42f-84e9-4270-89ec-2c4170cdf80a
00000000-0000-0000-0000-000000000000	321	vw23e77tb5uc	94226e5b-ce51-4949-8f54-b82f1686fc42	f	2025-08-01 19:49:26.040091+00	2025-08-01 19:49:26.040091+00	ixy2dp66xp3o	37a2f79f-835b-4e4d-bca5-0a867d9e15de
00000000-0000-0000-0000-000000000000	323	2nfqtcpodbqt	94226e5b-ce51-4949-8f54-b82f1686fc42	f	2025-08-01 22:44:25.313681+00	2025-08-01 22:44:25.313681+00	w6aof3ubxyfd	6a8dc42f-84e9-4270-89ec-2c4170cdf80a
00000000-0000-0000-0000-000000000000	360	orov36mc2ivy	49c3d8fe-3316-4e93-9c43-96d38a132c20	f	2025-08-05 22:43:07.627495+00	2025-08-05 22:43:07.627495+00	\N	6846ce9e-9eb6-4e5c-9a4e-e9cbaa5c903b
\.


--
-- Data for Name: saml_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_providers (id, sso_provider_id, entity_id, metadata_xml, metadata_url, attribute_mapping, created_at, updated_at, name_id_format) FROM stdin;
\.


--
-- Data for Name: saml_relay_states; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_relay_states (id, sso_provider_id, request_id, for_email, redirect_to, created_at, updated_at, flow_state_id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
00
20210710035447
20210722035447
20210730183235
20210909172000
20210927181326
20211122151130
20211124214934
20211202183645
20220114185221
20220114185340
20220224000811
20220323170000
20220429102000
20220531120530
20220614074223
20220811173540
20221003041349
20221003041400
20221011041400
20221020193600
20221021073300
20221021082433
20221027105023
20221114143122
20221114143410
20221125140132
20221208132122
20221215195500
20221215195800
20221215195900
20230116124310
20230116124412
20230131181311
20230322519590
20230402418590
20230411005111
20230508135423
20230523124323
20230818113222
20230914180801
20231027141322
20231114161723
20231117164230
20240115144230
20240214120130
20240306115329
20240314092811
20240427152123
20240612123726
20240729123726
20240802193726
20240806073726
20241009103726
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sessions (id, user_id, created_at, updated_at, factor_id, aal, not_after, refreshed_at, user_agent, ip, tag) FROM stdin;
d55aa0e0-3e34-439c-9b29-5002a74b9bfe	d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2	2025-08-05 20:45:56.535516+00	2025-08-05 20:45:56.535516+00	\N	aal1	\N	\N	node	100.24.122.36	\N
6846ce9e-9eb6-4e5c-9a4e-e9cbaa5c903b	49c3d8fe-3316-4e93-9c43-96d38a132c20	2025-08-05 22:43:07.623752+00	2025-08-05 22:43:07.623752+00	\N	aal1	\N	\N	node	24.144.139.238	\N
37a2f79f-835b-4e4d-bca5-0a867d9e15de	94226e5b-ce51-4949-8f54-b82f1686fc42	2025-08-01 17:16:38.086241+00	2025-08-01 19:49:26.044687+00	\N	aal1	\N	2025-08-01 19:49:26.044615	Vercel Edge Functions	3.92.92.162	\N
6a8dc42f-84e9-4270-89ec-2c4170cdf80a	94226e5b-ce51-4949-8f54-b82f1686fc42	2025-08-01 20:52:02.774968+00	2025-08-01 22:44:25.317821+00	\N	aal1	\N	2025-08-01 22:44:25.31775	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36 Edg/138.0.0.0	24.131.121.106	\N
\.


--
-- Data for Name: sso_domains; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_domains (id, sso_provider_id, domain, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: sso_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_providers (id, resource_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token_new, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at, phone, phone_confirmed_at, phone_change, phone_change_token, phone_change_sent_at, email_change_token_current, email_change_confirm_status, banned_until, reauthentication_token, reauthentication_sent_at, is_sso_user, deleted_at, is_anonymous) FROM stdin;
00000000-0000-0000-0000-000000000000	d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2	authenticated	authenticated	rfusco@summitautomation.io	$2a$10$FYeuY3W7jmDE4c6BzwFpp.nVyVhrRq1YuOcGQQXQH6d961K3Tue3u	2025-07-19 18:37:53.118371+00	\N		\N		\N			\N	2025-08-05 20:45:56.535445+00	{"provider": "email", "providers": ["email"]}	{"email_verified": true, "organization_id": "550e8400-e29b-41d4-a716-446655440001"}	\N	2025-07-19 18:37:53.102724+00	2025-08-05 20:45:56.538689+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	f9b1c90a-eb03-462a-b49b-50e6d4da1320	authenticated	authenticated	milanfusco68@gmail.com	$2a$10$lWkB5SR2YFGsIZFRZNKC3ext5bwjzBNdiwT2QF8Ye10hG/iuIu926	\N	\N	pkce_fb7e7b567c56e21f74ba1940afcd01c25e5506dd52ecb15d4a44624a	2025-07-08 22:20:27.686895+00		\N			\N	\N	{"provider": "email", "providers": ["email"]}	{"sub": "f9b1c90a-eb03-462a-b49b-50e6d4da1320", "email": "milanfusco68@gmail.com", "email_verified": false, "phone_verified": false}	\N	2025-07-08 22:20:27.649593+00	2025-07-08 22:20:29.249962+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	94226e5b-ce51-4949-8f54-b82f1686fc42	authenticated	authenticated	koleb256@gmail.com	$2a$10$Ze34KLFnl7CcayhWKc7RxejtlJk2t7DDFQ/WYfhxSJW6Jv0kjdzDm	2025-07-22 16:34:41.538958+00	\N		\N		\N			\N	2025-08-01 20:52:02.77489+00	{"provider": "email", "providers": ["email"]}	{"email_verified": true, "organization_id": "550e8400-e29b-41d4-a716-446655440002"}	\N	2025-07-22 16:34:41.529451+00	2025-08-01 22:44:25.315918+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	c057535b-408e-44f9-b99f-339ff0211025	authenticated	authenticated	romeo@forestry.com	$2a$10$f5v.ILGN0UyJg.Dwh.o7few.GDJus67rVpkm5rvI8IkcqcwTJg3Pm	2025-08-04 00:41:13.356885+00	\N		\N		\N			\N	2025-08-05 20:42:10.825498+00	{"provider": "email", "providers": ["email"]}	{"email_verified": true, "organization_id": "b36152e9-6035-44b0-bf69-157db934699d"}	\N	2025-08-04 00:41:13.324698+00	2025-08-05 22:42:37.279398+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	49c3d8fe-3316-4e93-9c43-96d38a132c20	authenticated	authenticated	admin@summitautomation.io	$2a$10$O7oVyFsk81kWtZP7bAd3SujSMkeeFm0AqqD/OMKW./KcAzB4Kkbdu	2025-07-18 18:22:21.270617+00	\N		2025-07-18 18:21:49.532461+00		\N			\N	2025-08-05 22:43:07.623674+00	{"provider": "email", "providers": ["email"]}	{"sub": "49c3d8fe-3316-4e93-9c43-96d38a132c20", "email": "admin@summitautomation.io", "email_verified": true, "phone_verified": false, "organization_id": "550e8400-e29b-41d4-a716-446655440001"}	\N	2025-07-18 18:21:49.511064+00	2025-08-05 22:43:07.628336+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	3756a8de-233f-414d-90a6-8053a5a13657	authenticated	authenticated	demo@demo.com	$2a$10$an6W7JSW5haEAxEIJ/kyC.07YAS6alNIymRXNYQK2cFCmo1vA5Kie	2025-07-20 20:54:00.715501+00	\N		\N		\N			\N	2025-08-01 17:10:42.642693+00	{"provider": "email", "providers": ["email"]}	{"email_verified": true, "organization_id": "7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4"}	\N	2025-07-20 20:54:00.697323+00	2025-08-01 17:10:42.645378+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	60c47787-f9f0-442a-bbfc-1803ffb060a4	authenticated	authenticated	covertlaptop@gmail.com	$2a$10$AnN.b7NwwXbJfEDWrQAp7.39m98951c3/Kv5EQAsZxVUOOkts8t/e	2025-07-12 22:49:22.090246+00	\N		2025-07-12 22:49:12.982244+00	pkce_082f60d0f23407e38386e0e1c21944b649404490613f847b4a5dfac7	2025-07-22 14:55:29.939867+00			\N	2025-07-19 03:37:00.174437+00	{"provider": "email", "providers": ["email"]}	{"sub": "60c47787-f9f0-442a-bbfc-1803ffb060a4", "email": "covertlaptop@gmail.com", "email_verified": true, "phone_verified": false, "organization_id": "550e8400-e29b-41d4-a716-446655440002"}	\N	2025-07-12 22:49:12.965859+00	2025-07-22 14:55:30.675853+00	\N	\N			\N		0	\N		\N	f	\N	f
\.


--
-- Data for Name: recurring_payments; Type: TABLE DATA; Schema: bookkeeper; Owner: postgres
--

COPY bookkeeper.recurring_payments (id, type, category, description, amount, frequency, start_date, end_date, day_of_month, day_of_week, is_active, created_at, updated_at, created_by, customer_id, customer_name, interaction_id, interaction_title, interaction_outcome, next_payment_date, payments_processed, payment_limit, updated_by, organization_id) FROM stdin;
\.


--
-- Data for Name: transactions; Type: TABLE DATA; Schema: bookkeeper; Owner: postgres
--

COPY bookkeeper.transactions (id, type, category, description, amount, source, "timestamp", uploaded_by, customer_id, interaction_id, updated_by, organization_id) FROM stdin;
a6c9fb66-8139-448f-a1c5-56582ee268d5	expense	Buisness Cards	Robert's order	22.00	manual	2025-07-19 20:50:49.278331+00	49c3d8fe-3316-4e93-9c43-96d38a132c20	\N	\N	\N	550e8400-e29b-41d4-a716-446655440001
775669e3-487f-4bcb-b02a-0caae5de75fe	expense	Buisness Cards	Brandon's cards	22.00	manual	2025-07-19 20:51:11.06766+00	49c3d8fe-3316-4e93-9c43-96d38a132c20	\N	\N	\N	550e8400-e29b-41d4-a716-446655440001
8cccddca-1b72-4f4c-af7c-e0a0f2849d89	expense	Buisness Cards	Brandon's reorder	22.00	manual	2025-07-19 20:51:42.33801+00	49c3d8fe-3316-4e93-9c43-96d38a132c20	\N	\N	\N	550e8400-e29b-41d4-a716-446655440001
00466938-da4d-4bf9-a8f9-a3cbb6ad78a5	expense	Make.com	first original payment 	20.00	manual	2025-07-19 20:52:48.33565+00	49c3d8fe-3316-4e93-9c43-96d38a132c20	\N	\N	\N	550e8400-e29b-41d4-a716-446655440001
ee10fdab-b4e1-4472-a999-4abca318b333	expense	Transportation	Down payment on new company vehicle	8000.00	manual	2025-07-21 03:16:25.540862+00	3756a8de-233f-414d-90a6-8053a5a13657	\N	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
15031864-b6f0-48dd-bb1d-beaae2bcf042	expense	Make.com	make.com monthly subscription	20.00	manual	2025-07-18 19:30:20.333195+00	49c3d8fe-3316-4e93-9c43-96d38a132c20	\N	\N	\N	550e8400-e29b-41d4-a716-446655440001
2ffbe9c3-28d4-4ab4-8b23-ac54c94d9b12	expense	AWS	Flowise Hosting	80.00	manual	2025-07-18 19:30:50.16054+00	49c3d8fe-3316-4e93-9c43-96d38a132c20	\N	\N	\N	550e8400-e29b-41d4-a716-446655440001
1fd55abf-761a-499b-ac32-eb5da68e7b3b	expense	Graphic Design	paid graphic designer for logo	25.00	manual	2025-07-18 19:40:59.310957+00	49c3d8fe-3316-4e93-9c43-96d38a132c20	\N	\N	\N	550e8400-e29b-41d4-a716-446655440001
7541967b-0e1a-47a4-9a72-6daac8bbcbf6	expense	Developer Payments	money sent to Milan	200.00	manual	2025-07-18 19:38:09.99075+00	49c3d8fe-3316-4e93-9c43-96d38a132c20	\N	\N	\N	550e8400-e29b-41d4-a716-446655440001
c94376ec-7c1e-474c-bac6-0e146315f7c2	expense	Database	Supabase Pro Subscription 	25.00	manual	2025-07-19 19:57:35.501585+00	d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2	\N	\N	\N	550e8400-e29b-41d4-a716-446655440001
c0362274-0059-4c86-a926-9c68974033d6	income	Initial Capital	Initial seed funding	4000.00	manual	2025-07-01 18:10:42+00	3756a8de-233f-414d-90a6-8053a5a13657	\N	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
b97c8ec1-11a8-4b7f-9ca7-7a4c85b7ebe9	expense	Graphic Design	Paid for logo design	150.00	manual	2025-07-04 02:55:42+00	3756a8de-233f-414d-90a6-8053a5a13657	\N	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
898490bf-f854-4f76-9ad7-92f74003edbe	expense	Graphic Design	Paid a graphic designer for social media banners	175.00	manual	2025-07-05 03:12:21+00	3756a8de-233f-414d-90a6-8053a5a13657	\N	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
e5a40930-a941-4576-90b5-fa9cd4e378a4	expense	Web Hosting 	HTML Web Hosting Monthly	50.00	manual	2025-07-08 01:47:59+00	3756a8de-233f-414d-90a6-8053a5a13657	\N	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
8c6bdc61-3faa-431a-a254-ffa3f1df46c2	expense	Web Hosting	Next payment due for HTML web hosting	50.00	manual	2025-08-09 03:11:36+00	3756a8de-233f-414d-90a6-8053a5a13657	\N	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
c2467602-19ad-4ff0-b097-28fe4c4dad08	income	Business Deal	Made a 12 month software deal with Nvidia	12000.00	manual	2025-07-16 03:15:48+00	3756a8de-233f-414d-90a6-8053a5a13657	6f6414ed-4e96-4f70-bed6-405b1b60f026	35e6d8cb-63aa-4a42-9f8f-cb49590734da	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
97f58c62-d06e-460e-b8ef-4302b43411f6	expense	Gas	Purchase of gas for company vehicle	53.26	manual	2025-07-30 03:11:05+00	3756a8de-233f-414d-90a6-8053a5a13657	\N	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
64407469-417e-4ba3-9cf2-41c22d354d0e	income	Dinner at Log Cabin Inn	Espresso Martini FN	10.00	manual	2025-07-29 22:12:00.58008+00	d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2	4e95746f-e54d-4af2-9a5b-dcc30c44ee68	93292a1e-a5ee-478c-961f-c257669ef54f	\N	550e8400-e29b-41d4-a716-446655440001
2ed7575e-0bf7-492c-a355-501f285890f3	income	flooring 		2000.00	manual	2025-08-01 20:58:25.298335+00	94226e5b-ce51-4949-8f54-b82f1686fc42	\N	\N	\N	550e8400-e29b-41d4-a716-446655440002
1e03b8e5-b73f-4952-bb8f-1b45e376e556	expense	LLC Filing	Wyoming LLC Formation	103.75	manual	2025-08-03 14:46:17.474223+00	d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2	\N	\N	\N	550e8400-e29b-41d4-a716-446655440001
812d9e54-f002-4e2c-aa4e-287692d98647	expense	PA LLC	Fictious Name Registration	70.00	manual	2025-08-03 14:50:58.929503+00	d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2	\N	\N	\N	550e8400-e29b-41d4-a716-446655440001
416d57a5-cf9f-412a-972d-2cc5f8d26e72	expense	PA LLC	PA Foreign LLC Registration	250.00	manual	2025-08-03 15:18:30.707368+00	d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2	\N	\N	\N	550e8400-e29b-41d4-a716-446655440001
d93fc135-1a89-4e57-86a8-6f19af785eb5	expense	Vercel	Monthly pro subscription	20.00	manual	2025-07-19 20:54:12.300215+00	49c3d8fe-3316-4e93-9c43-96d38a132c20	\N	\N	\N	550e8400-e29b-41d4-a716-446655440001
4f0decb1-af1a-4f95-a6dc-29bca7098ff3	expense	Notorization	iPostal1 Identity Notarization	25.00	manual	2025-08-03 16:44:33.432948+00	d8ac6b80-a48e-4a4a-a237-d62a30c3e1b2	\N	\N	\N	550e8400-e29b-41d4-a716-446655440001
\.


--
-- Data for Name: customers; Type: TABLE DATA; Schema: crm; Owner: postgres
--

COPY crm.customers (id, full_name, email, phone, status, created_at, updated_at, business, user_id, updated_by, organization_id) FROM stdin;
debbc3ea-9963-4ff2-9e26-7fa745a9170a	Joe Wardman			prospect	2025-07-23 21:42:50.913801+00	2025-07-23 22:59:24.544773+00	Burchick Construction	\N	\N	550e8400-e29b-41d4-a716-446655440001
94af5792-2f69-4b3c-9bc4-7531eebb3efb	Kole Bronowski	koleb256@gmail.com	724-651-8858	closed	2025-07-18 19:29:34.249657+00	2025-07-24 01:56:36.231197+00	KB Building Innovations	\N	\N	550e8400-e29b-41d4-a716-446655440001
4e95746f-e54d-4af2-9a5b-dcc30c44ee68	Zach Romeo		724-944-3260	qualified	2025-07-23 21:42:12.514605+00	2025-07-29 22:06:27.867715+00	Romeo Forestry	\N	\N	550e8400-e29b-41d4-a716-446655440001
af01c1ce-388d-42ea-beeb-76665f84dd0e	Jeff Bezos	JB@Amazon.com	652-777-4543	lead	2025-07-02 02:54:34+00	2025-07-29 23:26:55.68658+00	Amazon	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
6f6414ed-4e96-4f70-bed6-405b1b60f026	Jensen Huang	JHuang@nvidia.com	999-999-9999	closed	2025-06-21 03:14:12+00	2025-07-29 23:27:56.582167+00	Nvidia	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
0773c097-f5f8-4f70-b22e-53efda03da73	Michael Dell	MDell@Dell.com	777-777-7777	closed	2025-05-05 02:55:12+00	2025-07-29 23:28:25.313284+00	Dell	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
10256b9b-07f8-4283-ae82-2e64bb175336	Steve Jobs	stevejobs@apple.com	123-456-7891	prospect	2025-07-17 01:48:54+00	2025-07-29 23:28:59.977224+00	Apple	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
f596aeff-acd4-4c1f-ab7c-ed76a701c9b6	Bill Gates	BillGates@gmail.com	222-222-2222	contacted	2025-07-20 02:51:54+00	2025-07-29 23:29:08.598576+00	Microsoft	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
a68053c4-31e3-4347-bb2d-bdb0fa29095c	Elon Musk	EMusk@tesla.com	555-555-5555	proposal	2025-07-29 02:53:09+00	2025-07-29 23:29:21.232115+00	Tesla	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
27819fd8-f5cd-40d0-88ca-6a863a832555	Mark Zuckerberg	MZ@facebook.com	444-444-4444	qualified	2025-07-21 02:52:32.044506+00	2025-07-21 02:52:32.044506+00	Facebook	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
93f8269f-c2c0-43e9-81e0-095a9a5d8d5e	Leslie Austin		724-674-0602	contacted	2025-07-23 21:43:27.066681+00	2025-08-02 13:29:40.107089+00	Austin Taste US Catering	\N	\N	550e8400-e29b-41d4-a716-446655440001
\.


--
-- Data for Name: interactions; Type: TABLE DATA; Schema: crm; Owner: postgres
--

COPY crm.interactions (id, customer_id, type, notes, created_at, title, follow_up_required, outcome, user_id, updated_by, organization_id) FROM stdin;
316f9455-84a0-43c2-8896-cace96ea5c36	4e95746f-e54d-4af2-9a5b-dcc30c44ee68	call	Gathered more information and media for web design, discussed land-dev outreach as well as B2C.	2025-08-01 11:17:28.891657+00	Follow-up	f		\N	\N	550e8400-e29b-41d4-a716-446655440001
8472e189-0377-4834-adf8-d663132b6f87	93f8269f-c2c0-43e9-81e0-095a9a5d8d5e	call	Received call from Leslie on 8/1 and set an appointment for Wednesday 8/6 @ 5pm. Need to determine meeting place and follow up by Monday 8/4.	2025-08-02 13:28:56.515843+00	Call to set appointment	t	Discovery Appointment Set	\N	\N	550e8400-e29b-41d4-a716-446655440001
b3942b06-5429-4fea-8c99-40251f2539c7	94af5792-2f69-4b3c-9bc4-7531eebb3efb	call	talked about web design	2025-07-18 19:39:19.290312+00	Call with kole	f	further details	\N	\N	550e8400-e29b-41d4-a716-446655440001
1e5dd1b2-e10b-4661-a7fe-ee38c34496a4	94af5792-2f69-4b3c-9bc4-7531eebb3efb	meeting	Met with kole at pearson park to discuss business plans	2025-07-18 19:40:12.618887+00	Meeting with Kole	f	How this beautiful disaster started	\N	\N	550e8400-e29b-41d4-a716-446655440001
0704adf6-e0ee-4431-822f-06ea1276b548	0773c097-f5f8-4f70-b22e-53efda03da73	meeting	Met at Dell headquarters and negotiated a price for sale of our software.	2025-07-21 02:57:08.267068+00	Meeting To Discuss Software Deal	f	Made a deal for $2000	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
52836ea9-35e5-48de-b935-c184f475f57b	10256b9b-07f8-4283-ae82-2e64bb175336	call	Call discussed potential use of software	2025-07-21 02:58:05.195133+00	Call with Steve Jobs To Discuss Further Buisness	t	Follow Up Meeting Needed to Negotiate	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
f46e12e9-510e-4eaf-8875-9ac38aec79e6	f596aeff-acd4-4c1f-ab7c-ed76a701c9b6	email	Email regarding our software	2025-07-21 03:02:52.74772+00	Email'd Bill Gates To See If It Is Possible to Schedule a Phone Call	f	Waiting for response	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
35e6d8cb-63aa-4a42-9f8f-cb49590734da	6f6414ed-4e96-4f70-bed6-405b1b60f026	site visit	Met with Jensen Haung to discuss our software	2025-07-21 03:15:17.723677+00	Visited Nvidia Server Farm	f	12 month contract with Nvidia for our software	\N	\N	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
e228f431-2c0b-4a7c-9131-c11bf64450ed	93f8269f-c2c0-43e9-81e0-095a9a5d8d5e	other	Lead sourced from Jayden @ Steelite. Outreach text to schedule a phone call sent.	2025-07-29 22:06:01.996944+00	Warm Outreach Text	f		\N	\N	550e8400-e29b-41d4-a716-446655440001
93292a1e-a5ee-478c-961f-c257669ef54f	4e95746f-e54d-4af2-9a5b-dcc30c44ee68	meeting	Meeting held 7/26- requested website, seo, lead gen, and outreach services.	2025-07-29 22:07:38.041101+00	Discovery Meeting	f		\N	\N	550e8400-e29b-41d4-a716-446655440001
2d4fe1b5-9b2d-42a9-a774-44c4475fb8cb	4e95746f-e54d-4af2-9a5b-dcc30c44ee68	other	Followed up on 7/29 for web design examples, domain, and media for website.	2025-07-29 22:09:05.995476+00	Follow-up	f		\N	\N	550e8400-e29b-41d4-a716-446655440001
\.


--
-- Data for Name: job; Type: TABLE DATA; Schema: cron; Owner: supabase_admin
--

COPY cron.job (jobid, schedule, command, nodename, nodeport, database, username, active, jobname) FROM stdin;
1	0 9 * * *	SELECT process_recurring_payments_optimized();	localhost	5432	postgres	postgres	t	process-recurring-payments
\.


--
-- Data for Name: job_run_details; Type: TABLE DATA; Schema: cron; Owner: supabase_admin
--

COPY cron.job_run_details (jobid, runid, job_pid, database, username, command, status, return_message, start_time, end_time) FROM stdin;
\.


--
-- Data for Name: saved_properties; Type: TABLE DATA; Schema: gis; Owner: postgres
--

COPY gis.saved_properties (id, user_id, organization_id, scraped_property_id, owner_name, address, city, acreage, assessed_value, property_type, parcel_id, search_criteria, original_scraped_at, exported_to_leads, exported_at, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: scraped_properties; Type: TABLE DATA; Schema: gis; Owner: postgres
--

COPY gis.scraped_properties (id, user_id, organization_id, search_session_id, owner_name, address, city, acreage, assessed_value, property_type, parcel_id, search_criteria, scraped_at, is_saved, saved_at, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: alerts; Type: TABLE DATA; Schema: inventory; Owner: postgres
--

COPY inventory.alerts (id, item_id, user_id, organization_id, alert_type, status, message, priority, auto_generated, threshold_value, current_value, created_at, acknowledged_at, resolved_at, acknowledged_by) FROM stdin;
de212525-f44d-483d-9161-3bb43fcdee46	9c55a646-9d97-4154-a259-b4cdce280d5a	3756a8de-233f-414d-90a6-8053a5a13657	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4	low_stock	active	Item "Pencil" is below minimum threshold (20)	medium	t	20	19	2025-07-24 06:54:11.889759+00	\N	\N	\N
\.


--
-- Data for Name: items; Type: TABLE DATA; Schema: inventory; Owner: postgres
--

COPY inventory.items (id, user_id, organization_id, name, description, sku, category, subcategory, location, current_quantity, minimum_threshold, maximum_capacity, unit_of_measurement, unit_cost, unit_price, supplier, supplier_contact, status, notes, last_counted_at, last_updated_by, auto_reorder_enabled, reorder_point, reorder_quantity, created_at, updated_at) FROM stdin;
9c55a646-9d97-4154-a259-b4cdce280d5a	3756a8de-233f-414d-90a6-8053a5a13657	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4	Pencil	\N	\N	office-supplies	\N	Main Warehouse	19	20	\N	units	0.50	1.00	\N	\N	active	\N	\N	3756a8de-233f-414d-90a6-8053a5a13657	f	\N	\N	2025-07-24 06:54:11.889759+00	2025-07-24 06:54:11.889759+00
eec793c2-92d6-4207-bd97-f0f41b40e910	3756a8de-233f-414d-90a6-8053a5a13657	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4	Copper	\N	\N	raw-materials	\N	Offshore warehouse	75	50	\N	lbs	4.38	5.00	\N	\N	active	\N	\N	3756a8de-233f-414d-90a6-8053a5a13657	f	\N	\N	2025-07-24 06:55:18.789792+00	2025-07-25 01:20:12.63561+00
\.


--
-- Data for Name: transactions; Type: TABLE DATA; Schema: inventory; Owner: postgres
--

COPY inventory.transactions (id, item_id, user_id, organization_id, transaction_type, quantity_change, quantity_before, quantity_after, reference_number, reason, notes, created_at, processed_by) FROM stdin;
f7bfff4a-5457-4d7a-9ba9-9fa67a2f0fe3	9c55a646-9d97-4154-a259-b4cdce280d5a	3756a8de-233f-414d-90a6-8053a5a13657	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4	stock_in	19	0	19	\N	Initial stock	\N	2025-07-24 06:54:11.889759+00	3756a8de-233f-414d-90a6-8053a5a13657
e6e75bdb-a5d4-4a46-9314-bf5b776b3d9d	eec793c2-92d6-4207-bd97-f0f41b40e910	3756a8de-233f-414d-90a6-8053a5a13657	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4	stock_in	75	0	75	\N	Initial stock	\N	2025-07-24 06:55:18.789792+00	3756a8de-233f-414d-90a6-8053a5a13657
\.


--
-- Data for Name: entries; Type: TABLE DATA; Schema: mileage; Owner: postgres
--

COPY mileage.entries (id, user_id, date, purpose, miles, is_business, start_location, end_location, customer_id, customer_name, notes, created_at, updated_at, organization_id) FROM stdin;
12cc2db2-62a1-4ed4-804f-b976f4dd6e29	49c3d8fe-3316-4e93-9c43-96d38a132c20	2025-07-18	Meeting With Kole	10.00	t			94af5792-2f69-4b3c-9bc4-7531eebb3efb	Kole Bronowski		2025-07-18 19:33:07.996805+00	2025-07-18 19:33:07.996805+00	550e8400-e29b-41d4-a716-446655440001
d164623e-e981-4ad4-8fe2-eedb0da54418	49c3d8fe-3316-4e93-9c43-96d38a132c20	2025-07-18	Drive to Roberts house for meeting	19.40	t	1 Vineyard Circle	Fairfield Avenue	\N	\N		2025-07-18 19:34:32.702203+00	2025-07-18 19:34:32.702203+00	550e8400-e29b-41d4-a716-446655440001
ecc26cee-1a60-422e-acd8-c4579c42a0c1	3756a8de-233f-414d-90a6-8053a5a13657	2025-07-16	Meeting With Michael Dell	35.00	t			0773c097-f5f8-4f70-b22e-53efda03da73	Michael Dell		2025-07-21 03:00:11.366216+00	2025-07-21 03:00:11.366216+00	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
dc2da3eb-a3b4-431b-94f2-d76b71456044	3756a8de-233f-414d-90a6-8053a5a13657	2025-07-17	Drive to nearest fast food chain	3.00	f			\N	\N		2025-07-21 03:00:42.444741+00	2025-07-21 03:00:42.444741+00	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
ef843f26-007b-4adb-87f0-00ab80307296	3756a8de-233f-414d-90a6-8053a5a13657	2025-07-21	Tour of Apple Headquarters	27.00	t			10256b9b-07f8-4283-ae82-2e64bb175336	Steve Jobs		2025-07-21 03:04:34.058178+00	2025-07-21 03:04:34.058178+00	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
f14a5d4f-3da0-4b5c-85ba-f047caaf774e	3756a8de-233f-414d-90a6-8053a5a13657	2025-07-21	Drive From Tesla HQ to nearest gas station	5.20	t	1 Tesla Road, Austin, Texas	6414 ED Bluestein Blvd, Austin, Texas	a68053c4-31e3-4347-bb2d-bdb0fa29095c	Elon Musk	Left Tesla HQ and needed fuel.\n\nAI Calculated Route: via TX-1 Loop N	2025-07-21 03:08:59.290625+00	2025-07-21 03:08:59.290625+00	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4
\.


--
-- Data for Name: ai_batches; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ai_batches (id, organization_id, user_id, batch_name, search_criteria, total_leads_generated, leads_qualified, ai_model_version, processing_duration_seconds, created_at, completed_at) FROM stdin;
3bf893b5-ff8c-4366-89e2-ed7803df525f	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4	3756a8de-233f-414d-90a6-8053a5a13657	AI Generation - 7/22/2025	{"radius": "25", "location": "Pittsburgh, PA", "profession": "Insurance Firm"}	3	3	flowise-v1	0	2025-07-23 00:37:34.684239+00	2025-07-23 00:37:34.662+00
d1b04d92-ed18-4afd-87c2-7495616e35b6	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4	3756a8de-233f-414d-90a6-8053a5a13657	AI Generation - 7/23/2025	{"radius": "25", "location": "Pittsburgh, PA", "profession": "IT consulting"}	3	3	flowise-v1	0	2025-07-23 17:58:05.750738+00	2025-07-23 17:58:05.38+00
10d7837a-e1de-4522-932d-3a0bb26305f7	550e8400-e29b-41d4-a716-446655440001	49c3d8fe-3316-4e93-9c43-96d38a132c20	AI Generation - 7/23/2025	{"radius": "25", "location": "New Castle, PA", "profession": "AI automation"}	3	3	flowise-v1	0	2025-07-23 18:05:41.419108+00	2025-07-23 18:05:41.044+00
97f153a3-f652-4b37-bb39-99987e9e6b38	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4	3756a8de-233f-414d-90a6-8053a5a13657	AI Generation - 7/25/2025	{"radius": "25", "location": "New Castle, PA ", "profession": "accounting services"}	1	1	flowise-v1	0	2025-07-26 03:57:52.627036+00	2025-07-26 03:57:51.722+00
bd00b211-cd5f-438c-8770-72d10487a88a	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4	3756a8de-233f-414d-90a6-8053a5a13657	AI Generation - 7/26/2025	{"radius": "25", "location": "New Castle PA", "profession": "Contracting services"}	1	0	flowise-v1	0	2025-07-26 17:10:09.433195+00	2025-07-26 17:10:09.378+00
\.


--
-- Data for Name: gis_permissions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.gis_permissions (id, organization_id, feature_name, is_enabled, created_at, updated_at, created_by, notes) FROM stdin;
cbd72300-aeee-4446-9116-c08e992b3359	b36152e9-6035-44b0-bf69-157db934699d	gis_scraper	t	2025-08-04 01:38:34.818595+00	2025-08-04 01:38:34.818595+00	\N	Initial GIS scraper access
\.


--
-- Data for Name: lead_activities; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.lead_activities (id, lead_id, user_id, organization_id, activity_type, subject, description, outcome, scheduled_at, completed_at, is_completed, follow_up_date, follow_up_notes, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: lead_sources; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.lead_sources (id, organization_id, name, description, is_active, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: leads; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.leads (id, user_id, organization_id, first_name, last_name, email, phone, company, job_title, source, status, priority, ai_agent_batch_id, ai_confidence_score, ai_generated_notes, score, is_qualified, qualified_at, address, city, state, zip_code, country, estimated_value, expected_close_date, industry, company_size, notes, tags, created_at, updated_at, last_contacted_at) FROM stdin;
afa7ff2f-8d8b-40bc-a5db-5c93bf84b58d	3756a8de-233f-414d-90a6-8053a5a13657	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4	Alex	Bates	info@threadbarecider.com	(412) 224-2827	Threadbare Cider & Mead	General Manager	ai_agent	new	medium	3bf893b5-ff8c-4366-89e2-ed7803df525f	0.93	Commercial liability, product liability, and employee coverage needed. Manual inventory and compliance tracking could benefit from automation.	88	t	2025-07-23 00:37:34.775+00	1291 Spring Garden Ave	Pittsburgh	PA	15212	US	9000	\N	Food & Beverage / Manufacturing	15-30	Growing craft beverage producer with tasting room, event space, and distribution operations.	{"Product liability and compliance","Event coverage and risk management"}	2025-07-23 00:37:34.766271+00	2025-07-23 00:37:34.766271+00	\N
2fcd819c-d2ac-4d72-b260-2f7f6a7b49fe	3756a8de-233f-414d-90a6-8053a5a13657	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4	John	Graf	info@thepriory.com	(412) 231-3338	Priory Hospitality Group	Owner/President/CEO	ai_agent	new	high	3bf893b5-ff8c-4366-89e2-ed7803df525f	0.97	Opportunity for bundled coverage: property, liability, workers comp. Manual risk management processes, multiple properties increases insurance complexity.	92	t	2025-07-23 00:37:34.775+00	614 Pressley St	Pittsburgh	PA	15212	US	12000	\N	Hospitality	25-40	Boutique hotel group with multiple properties, growing hospitality portfolio, likely facing complex property and liability insurance needs.	{"Complex property & liability coverage","Risk management for multiple venues"}	2025-07-23 00:37:34.819305+00	2025-07-23 00:37:34.819305+00	\N
d7dc390e-1515-41f6-b86d-09ce39adb9b2	3756a8de-233f-414d-90a6-8053a5a13657	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4	Sarah	Michaels	sarah@holistichealingpgh.com	(412) 555-0198	Holistic Healing Center	Owner	ai_agent	new	medium	3bf893b5-ff8c-4366-89e2-ed7803df525f	0.9	Needs insurance for professional liability, property, and health regulations. Scheduling, consent, and compliance processes can be automated.	83	t	2025-07-23 00:37:34.775+00	4515 Butler St	Pittsburgh	PA	15201	US	6000	\N	Health & Wellness	8-12	Independent wellness center offering massage, physical therapy, and holistic treatments; small team, growing client base.	{"Professional liability","Compliance with health regulations"}	2025-07-23 00:37:34.989494+00	2025-07-23 00:37:34.989494+00	\N
ca1103d5-bb57-4728-8423-9098aabb19a4	3756a8de-233f-414d-90a6-8053a5a13657	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4	Emily	Tran	emily.tran@urbanwellnessclinic.com	(412) 555-0314	Urban Wellness Clinic	Practice Manager	ai_agent	new	medium	d1b04d92-ed18-4afd-87c2-7495616e35b6	0.93	High-value IT consulting opportunity: telehealth platform integration, HIPAA-compliant networking, automated patient communication.	87	t	2025-07-23 17:58:05.476+00	2100 E Carson St	Pittsburgh	PA	15203	US	10000	\N	Healthcare	20-30	Growing healthcare practice planning to add 2 more providers in 2024. Current pain points with HIPAA-compliant telehealth and patient scheduling.	{"Telehealth technical issues","Manual scheduling errors","Data privacy compliance"}	2025-07-23 17:58:05.833053+00	2025-07-23 17:58:05.833053+00	\N
29fcd9da-ff64-4efa-a197-08d3e288c178	3756a8de-233f-414d-90a6-8053a5a13657	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4	Mark	Dugan	mdugan@steelcitycreative.com	(412) 555-0438	Steel City Creative	Managing Director	ai_agent	new	medium	d1b04d92-ed18-4afd-87c2-7495616e35b6	0.89	IT consulting needed for remote/hybrid work solutions, automated backup, and virtual IT helpdesk setup.	82	t	2025-07-23 17:58:05.476+00	100 43rd St Suite 304	Pittsburgh	PA	15201	US	9000	\N	Marketing & Design	10-15	Small creative agency with recent client uptick. Struggling with remote collaboration, data backup, and internal IT support.	{"Remote collaboration challenges","No automated backups","No in-house IT support"}	2025-07-23 17:58:05.877639+00	2025-07-23 17:58:05.877639+00	\N
d70644d3-64e6-46eb-8169-eeaea10bc332	3756a8de-233f-414d-90a6-8053a5a13657	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4	Lisa	Morrison	lisa@bridgeviewsolutions.com	(412) 555-0196	BridgeView Solutions LLC	Owner	ai_agent	new	high	d1b04d92-ed18-4afd-87c2-7495616e35b6	0.95	Automation opportunities in project workflow, secure document sharing, and cloud backup integration. Could benefit from IT consulting to streamline processes and enhance data security.	90	t	2025-07-23 17:58:05.475+00	347 Grant St Suite 200	Pittsburgh	PA	15219	US	12000	\N	Professional Services (Legal/Accounting/Consulting)	15-25	Boutique consulting firm experiencing client growth; currently using outdated project management tools and basic cybersecurity measures.	{"Manual project tracking","Low cybersecurity awareness","Lack of process automation"}	2025-07-23 17:58:05.925651+00	2025-07-23 17:58:05.925651+00	\N
af95e55b-39b3-4c32-846c-deb2c2b86e43	49c3d8fe-3316-4e93-9c43-96d38a132c20	550e8400-e29b-41d4-a716-446655440001	Maria	Riccelli	maria.riccelli@riccellienterprises.com	(724) 658-4975	Riccelli Enterprises	Operations Manager	ai_agent	new	medium	10d7837a-e1de-4522-932d-3a0bb26305f7	0.91	AI can optimize truck dispatch, automate compliance logs, and forecast maintenance needs. Recent tech adoption suggests openness to further automation.	85	t	2025-07-23 18:05:41.13+00	2466 Ellwood Rd	New Castle	PA	16101	US	12000	\N	Logistics & Trucking	20-30	Regional logistics firm, runs 24 trucks with manual dispatch and paper logs. Recently added GPS tracking, but no AI route optimization or predictive maintenance.	{"Manual route planning","Paper-based driver logs","Reactive truck maintenance"}	2025-07-23 18:05:41.487795+00	2025-07-23 18:05:41.487795+00	\N
8085b7b8-9cd0-49b1-9c7c-c8efb5b08176	49c3d8fe-3316-4e93-9c43-96d38a132c20	550e8400-e29b-41d4-a716-446655440001	Alex	Morgan	alex.morgan@precisiondental.com	(724) 654-9200	Precision Dental Studio	Owner	ai_agent	new	medium	10d7837a-e1de-4522-932d-3a0bb26305f7	0.88	Automation can streamline order processing, production tracking, and delivery scheduling. Website refresh and increased staffing are growth indicators.	82	t	2025-07-23 18:05:41.13+00	1103 Wilmington Ave	New Castle	PA	16105	US	9000	\N	Healthcare (Dental Lab)	10-12	Boutique dental lab, growing client base. Receives orders via email, manual job tracking, and hand-written delivery scheduling. Website recently updated.	{"Manual order entry","Paper-based job tracking","Inefficient delivery scheduling"}	2025-07-23 18:05:41.530821+00	2025-07-23 18:05:41.530821+00	\N
a79559de-7349-44a9-a4c5-a4a10ce1370c	49c3d8fe-3316-4e93-9c43-96d38a132c20	550e8400-e29b-41d4-a716-446655440001	David	Kowalski	david.kowalski@ellwoodcityforge.com	(724) 752-0055	Ellwood City Forge	President	ai_agent	new	medium	10d7837a-e1de-4522-932d-3a0bb26305f7	0.94	High opportunity for AI-driven scheduling, predictive maintenance, and automated quality control. Interest in automation shown by recent job postings and equipment upgrades.	89	t	2025-07-23 18:05:41.129+00	800 Commercial Ave	Ellwood City	PA	16117	US	18000	\N	Manufacturing	40-45	Legacy manufacturing firm, recent upgrade to digital quoting but still relies on manual scheduling, inventory, and quality checks. Hiring for automation engineer role in 2024.	{"Manual production scheduling","Paper-based inventory management","Human-driven quality assurance delays"}	2025-07-23 18:05:41.537115+00	2025-07-23 18:05:41.537115+00	\N
f99864b1-ac1a-4257-b6d0-02994fb27293	3756a8de-233f-414d-90a6-8053a5a13657	7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4	Gail	Steck	gsteck@pa.gov	724-656-3070	PA CareerLink Lawrence County	Senior Administrator	ai_agent	new	medium	97f153a3-f652-4b37-bb39-99987e9e6b38	0.87	Automation opportunity: Streamlining grant accounting, payroll integration, and financial reporting. Likely using manual spreadsheets or legacy systems. Increased compliance needs due to government funding.	83	t	2025-07-26 03:57:51.805+00	102 Margaret Street	New Castle	PA	16101	US	12000	\N	Employment Services / Workforce Development	15-30	Local workforce development center coordinating multiple programs. Handles complex funding, grant management, and payroll for staff and program participants.	{"Complex grant and payroll accounting","Manual financial reporting","Compliance with government regulations"}	2025-07-26 03:57:52.715277+00	2025-07-26 03:57:52.715277+00	\N
\.


--
-- Data for Name: organizations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.organizations (id, name, slug, created_at, updated_at) FROM stdin;
550e8400-e29b-41d4-a716-446655440001	Summit Automation Company	summit-automation-company	2025-07-18 18:20:05.394242+00	2025-07-18 18:20:05.394242+00
550e8400-e29b-41d4-a716-446655440002	KB Building Innovations	kb-building-innovations	2025-07-18 18:20:05.394242+00	2025-07-18 18:20:05.394242+00
7eb42ea3-0e5e-476a-a0ba-06e3ce88f5f4	Demo	demo	2025-07-20 20:53:07.308004+00	2025-07-20 20:53:07.308004+00
b36152e9-6035-44b0-bf69-157db934699d	Romeo Forestry	romeo-forestry	2025-08-04 00:40:44.567114+00	2025-08-04 00:40:44.567114+00
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.schema_migrations (version, inserted_at) FROM stdin;
20211116024918	2025-06-18 20:22:18
20211116045059	2025-06-18 20:22:21
20211116050929	2025-06-18 20:22:23
20211116051442	2025-06-18 20:22:25
20211116212300	2025-06-18 20:22:27
20211116213355	2025-06-18 20:22:29
20211116213934	2025-06-18 20:22:31
20211116214523	2025-06-18 20:22:34
20211122062447	2025-06-18 20:22:36
20211124070109	2025-06-18 20:22:38
20211202204204	2025-06-18 20:22:40
20211202204605	2025-06-18 20:22:42
20211210212804	2025-06-18 20:22:49
20211228014915	2025-06-18 20:22:51
20220107221237	2025-06-18 20:22:53
20220228202821	2025-06-18 20:22:55
20220312004840	2025-06-18 20:22:57
20220603231003	2025-06-18 20:23:00
20220603232444	2025-06-18 20:23:02
20220615214548	2025-06-18 20:23:04
20220712093339	2025-06-18 20:23:06
20220908172859	2025-06-18 20:23:08
20220916233421	2025-06-18 20:23:10
20230119133233	2025-06-18 20:23:12
20230128025114	2025-06-18 20:23:15
20230128025212	2025-06-18 20:23:17
20230227211149	2025-06-18 20:23:19
20230228184745	2025-06-18 20:23:21
20230308225145	2025-06-18 20:23:23
20230328144023	2025-06-18 20:23:25
20231018144023	2025-06-18 20:23:28
20231204144023	2025-06-18 20:23:31
20231204144024	2025-06-18 20:23:33
20231204144025	2025-06-18 20:23:35
20240108234812	2025-06-18 20:23:37
20240109165339	2025-06-18 20:23:39
20240227174441	2025-06-18 20:23:43
20240311171622	2025-06-18 20:23:46
20240321100241	2025-06-18 20:23:50
20240401105812	2025-06-18 20:23:56
20240418121054	2025-06-18 20:23:58
20240523004032	2025-06-18 20:24:06
20240618124746	2025-06-18 20:24:08
20240801235015	2025-06-18 20:24:10
20240805133720	2025-06-18 20:24:12
20240827160934	2025-06-18 20:24:14
20240919163303	2025-06-18 20:24:17
20240919163305	2025-06-18 20:24:19
20241019105805	2025-06-18 20:24:21
20241030150047	2025-06-18 20:24:28
20241108114728	2025-06-18 20:24:31
20241121104152	2025-06-18 20:24:33
20241130184212	2025-06-18 20:24:35
20241220035512	2025-06-18 20:24:37
20241220123912	2025-06-18 20:24:40
20241224161212	2025-06-18 20:24:42
20250107150512	2025-06-18 20:24:44
20250110162412	2025-06-18 20:24:46
20250123174212	2025-06-18 20:24:48
20250128220012	2025-06-18 20:24:50
20250506224012	2025-06-18 20:24:51
20250523164012	2025-06-18 20:24:53
20250714121412	2025-07-18 18:01:44
\.


--
-- Data for Name: subscription; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.subscription (id, subscription_id, entity, filters, claims, created_at) FROM stdin;
\.


--
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at, public, avif_autodetection, file_size_limit, allowed_mime_types, owner_id) FROM stdin;
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
0	create-migrations-table	e18db593bcde2aca2a408c4d1100f6abba2195df	2025-06-18 20:22:16.029472
1	initialmigration	6ab16121fbaa08bbd11b712d05f358f9b555d777	2025-06-18 20:22:16.033208
2	storage-schema	5c7968fd083fcea04050c1b7f6253c9771b99011	2025-06-18 20:22:16.035776
3	pathtoken-column	2cb1b0004b817b29d5b0a971af16bafeede4b70d	2025-06-18 20:22:16.049698
4	add-migrations-rls	427c5b63fe1c5937495d9c635c263ee7a5905058	2025-06-18 20:22:16.077238
5	add-size-functions	79e081a1455b63666c1294a440f8ad4b1e6a7f84	2025-06-18 20:22:16.080307
6	change-column-name-in-get-size	f93f62afdf6613ee5e7e815b30d02dc990201044	2025-06-18 20:22:16.084163
7	add-rls-to-buckets	e7e7f86adbc51049f341dfe8d30256c1abca17aa	2025-06-18 20:22:16.087485
8	add-public-to-buckets	fd670db39ed65f9d08b01db09d6202503ca2bab3	2025-06-18 20:22:16.090595
9	fix-search-function	3a0af29f42e35a4d101c259ed955b67e1bee6825	2025-06-18 20:22:16.09453
10	search-files-search-function	68dc14822daad0ffac3746a502234f486182ef6e	2025-06-18 20:22:16.099172
11	add-trigger-to-auto-update-updated_at-column	7425bdb14366d1739fa8a18c83100636d74dcaa2	2025-06-18 20:22:16.103253
12	add-automatic-avif-detection-flag	8e92e1266eb29518b6a4c5313ab8f29dd0d08df9	2025-06-18 20:22:16.106801
13	add-bucket-custom-limits	cce962054138135cd9a8c4bcd531598684b25e7d	2025-06-18 20:22:16.109623
14	use-bytes-for-max-size	941c41b346f9802b411f06f30e972ad4744dad27	2025-06-18 20:22:16.11446
15	add-can-insert-object-function	934146bc38ead475f4ef4b555c524ee5d66799e5	2025-06-18 20:22:16.142511
16	add-version	76debf38d3fd07dcfc747ca49096457d95b1221b	2025-06-18 20:22:16.145877
17	drop-owner-foreign-key	f1cbb288f1b7a4c1eb8c38504b80ae2a0153d101	2025-06-18 20:22:16.149122
18	add_owner_id_column_deprecate_owner	e7a511b379110b08e2f214be852c35414749fe66	2025-06-18 20:22:16.15271
19	alter-default-value-objects-id	02e5e22a78626187e00d173dc45f58fa66a4f043	2025-06-18 20:22:16.15686
20	list-objects-with-delimiter	cd694ae708e51ba82bf012bba00caf4f3b6393b7	2025-06-18 20:22:16.160103
21	s3-multipart-uploads	8c804d4a566c40cd1e4cc5b3725a664a9303657f	2025-06-18 20:22:16.169436
22	s3-multipart-uploads-big-ints	9737dc258d2397953c9953d9b86920b8be0cdb73	2025-06-18 20:22:16.19653
23	optimize-search-function	9d7e604cddc4b56a5422dc68c9313f4a1b6f132c	2025-06-18 20:22:16.223169
24	operation-function	8312e37c2bf9e76bbe841aa5fda889206d2bf8aa	2025-06-18 20:22:16.226127
25	custom-metadata	d974c6057c3db1c1f847afa0e291e6165693b990	2025-06-18 20:22:16.229126
\.


--
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata, version, owner_id, user_metadata) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads (id, in_progress_size, upload_signature, bucket_id, key, version, owner_id, created_at, user_metadata) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads_parts; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads_parts (id, upload_id, size, part_number, bucket_id, key, etag, owner_id, version, created_at) FROM stdin;
\.


--
-- Data for Name: hooks; Type: TABLE DATA; Schema: supabase_functions; Owner: supabase_functions_admin
--

COPY supabase_functions.hooks (id, hook_table_id, hook_name, created_at, request_id) FROM stdin;
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: supabase_functions; Owner: supabase_functions_admin
--

COPY supabase_functions.migrations (version, inserted_at) FROM stdin;
initial	2025-08-03 00:44:10.576005+00
20210809183423_update_grants	2025-08-03 00:44:10.576005+00
\.


--
-- Data for Name: secrets; Type: TABLE DATA; Schema: vault; Owner: supabase_admin
--

COPY vault.secrets (id, name, description, secret, key_id, nonce, created_at, updated_at) FROM stdin;
\.


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 360, true);


--
-- Name: jobid_seq; Type: SEQUENCE SET; Schema: cron; Owner: supabase_admin
--

SELECT pg_catalog.setval('cron.jobid_seq', 1, true);


--
-- Name: runid_seq; Type: SEQUENCE SET; Schema: cron; Owner: supabase_admin
--

SELECT pg_catalog.setval('cron.runid_seq', 1, false);


--
-- Name: subscription_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_admin
--

SELECT pg_catalog.setval('realtime.subscription_id_seq', 1, false);


--
-- Name: hooks_id_seq; Type: SEQUENCE SET; Schema: supabase_functions; Owner: supabase_functions_admin
--

SELECT pg_catalog.setval('supabase_functions.hooks_id_seq', 1, false);


--
-- Name: mfa_amr_claims amr_id_pk; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);


--
-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.audit_log_entries
    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);


--
-- Name: flow_state flow_state_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.flow_state
    ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);


--
-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);


--
-- Name: identities identities_provider_id_provider_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);


--
-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.instances
    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_authentication_method_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method);


--
-- Name: mfa_challenges mfa_challenges_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);


--
-- Name: mfa_factors mfa_factors_last_challenged_at_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_last_challenged_at_key UNIQUE (last_challenged_at);


--
-- Name: mfa_factors mfa_factors_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);


--
-- Name: one_time_tokens one_time_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_token_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);


--
-- Name: saml_providers saml_providers_entity_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);


--
-- Name: saml_providers saml_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);


--
-- Name: saml_relay_states saml_relay_states_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- Name: sso_domains sso_domains_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);


--
-- Name: sso_providers sso_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_providers
    ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);


--
-- Name: users users_phone_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_phone_key UNIQUE (phone);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: recurring_payments recurring_payments_pkey; Type: CONSTRAINT; Schema: bookkeeper; Owner: postgres
--

ALTER TABLE ONLY bookkeeper.recurring_payments
    ADD CONSTRAINT recurring_payments_pkey PRIMARY KEY (id);


--
-- Name: transactions transactions_pkey; Type: CONSTRAINT; Schema: bookkeeper; Owner: postgres
--

ALTER TABLE ONLY bookkeeper.transactions
    ADD CONSTRAINT transactions_pkey PRIMARY KEY (id);


--
-- Name: customers customers_pkey; Type: CONSTRAINT; Schema: crm; Owner: postgres
--

ALTER TABLE ONLY crm.customers
    ADD CONSTRAINT customers_pkey PRIMARY KEY (id);


--
-- Name: interactions interactions_pkey; Type: CONSTRAINT; Schema: crm; Owner: postgres
--

ALTER TABLE ONLY crm.interactions
    ADD CONSTRAINT interactions_pkey PRIMARY KEY (id);


--
-- Name: saved_properties saved_properties_pkey; Type: CONSTRAINT; Schema: gis; Owner: postgres
--

ALTER TABLE ONLY gis.saved_properties
    ADD CONSTRAINT saved_properties_pkey PRIMARY KEY (id);


--
-- Name: scraped_properties scraped_properties_pkey; Type: CONSTRAINT; Schema: gis; Owner: postgres
--

ALTER TABLE ONLY gis.scraped_properties
    ADD CONSTRAINT scraped_properties_pkey PRIMARY KEY (id);


--
-- Name: alerts alerts_pkey; Type: CONSTRAINT; Schema: inventory; Owner: postgres
--

ALTER TABLE ONLY inventory.alerts
    ADD CONSTRAINT alerts_pkey PRIMARY KEY (id);


--
-- Name: items items_pkey; Type: CONSTRAINT; Schema: inventory; Owner: postgres
--

ALTER TABLE ONLY inventory.items
    ADD CONSTRAINT items_pkey PRIMARY KEY (id);


--
-- Name: transactions transactions_pkey; Type: CONSTRAINT; Schema: inventory; Owner: postgres
--

ALTER TABLE ONLY inventory.transactions
    ADD CONSTRAINT transactions_pkey PRIMARY KEY (id);


--
-- Name: entries entries_pkey; Type: CONSTRAINT; Schema: mileage; Owner: postgres
--

ALTER TABLE ONLY mileage.entries
    ADD CONSTRAINT entries_pkey PRIMARY KEY (id);


--
-- Name: ai_batches ai_batches_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ai_batches
    ADD CONSTRAINT ai_batches_pkey PRIMARY KEY (id);


--
-- Name: gis_permissions gis_permissions_org_feature_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gis_permissions
    ADD CONSTRAINT gis_permissions_org_feature_unique UNIQUE (organization_id, feature_name);


--
-- Name: gis_permissions gis_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gis_permissions
    ADD CONSTRAINT gis_permissions_pkey PRIMARY KEY (id);


--
-- Name: lead_activities lead_activities_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lead_activities
    ADD CONSTRAINT lead_activities_pkey PRIMARY KEY (id);


--
-- Name: lead_sources lead_sources_org_name_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lead_sources
    ADD CONSTRAINT lead_sources_org_name_unique UNIQUE (organization_id, name);


--
-- Name: lead_sources lead_sources_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lead_sources
    ADD CONSTRAINT lead_sources_pkey PRIMARY KEY (id);


--
-- Name: leads leads_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.leads
    ADD CONSTRAINT leads_pkey PRIMARY KEY (id);


--
-- Name: organizations organizations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organizations
    ADD CONSTRAINT organizations_pkey PRIMARY KEY (id);


--
-- Name: organizations organizations_slug_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organizations
    ADD CONSTRAINT organizations_slug_key UNIQUE (slug);


--
-- Name: messages messages_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: subscription pk_subscription; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.subscription
    ADD CONSTRAINT pk_subscription PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);


--
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_pkey PRIMARY KEY (id);


--
-- Name: hooks hooks_pkey; Type: CONSTRAINT; Schema: supabase_functions; Owner: supabase_functions_admin
--

ALTER TABLE ONLY supabase_functions.hooks
    ADD CONSTRAINT hooks_pkey PRIMARY KEY (id);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: supabase_functions; Owner: supabase_functions_admin
--

ALTER TABLE ONLY supabase_functions.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (version);


--
-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);


--
-- Name: confirmation_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_current_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_new_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);


--
-- Name: factor_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);


--
-- Name: flow_state_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);


--
-- Name: identities_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);


--
-- Name: INDEX identities_email_idx; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.identities_email_idx IS 'Auth: Ensures indexed queries on the email column';


--
-- Name: identities_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);


--
-- Name: idx_auth_code; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);


--
-- Name: idx_user_id_auth_method; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);


--
-- Name: mfa_challenge_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);


--
-- Name: mfa_factors_user_friendly_name_unique; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);


--
-- Name: mfa_factors_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);


--
-- Name: one_time_tokens_relates_to_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_relates_to_hash_idx ON auth.one_time_tokens USING hash (relates_to);


--
-- Name: one_time_tokens_token_hash_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_token_hash_hash_idx ON auth.one_time_tokens USING hash (token_hash);


--
-- Name: one_time_tokens_user_id_token_type_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX one_time_tokens_user_id_token_type_key ON auth.one_time_tokens USING btree (user_id, token_type);


--
-- Name: reauthentication_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: recovery_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);


--
-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);


--
-- Name: refresh_tokens_parent_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);


--
-- Name: refresh_tokens_session_id_revoked_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);


--
-- Name: refresh_tokens_updated_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);


--
-- Name: saml_providers_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);


--
-- Name: saml_relay_states_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);


--
-- Name: saml_relay_states_for_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);


--
-- Name: saml_relay_states_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);


--
-- Name: sessions_not_after_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);


--
-- Name: sessions_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);


--
-- Name: sso_domains_domain_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));


--
-- Name: sso_domains_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);


--
-- Name: sso_providers_resource_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));


--
-- Name: unique_phone_factor_per_user; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX unique_phone_factor_per_user ON auth.mfa_factors USING btree (user_id, phone);


--
-- Name: user_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);


--
-- Name: users_email_partial_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);


--
-- Name: INDEX users_email_partial_key; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.users_email_partial_key IS 'Auth: A partial unique index that applies only when is_sso_user is false';


--
-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));


--
-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);


--
-- Name: users_is_anonymous_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous);


--
-- Name: idx_saved_properties_exported_to_leads; Type: INDEX; Schema: gis; Owner: postgres
--

CREATE INDEX idx_saved_properties_exported_to_leads ON gis.saved_properties USING btree (exported_to_leads);


--
-- Name: idx_saved_properties_organization_id; Type: INDEX; Schema: gis; Owner: postgres
--

CREATE INDEX idx_saved_properties_organization_id ON gis.saved_properties USING btree (organization_id);


--
-- Name: idx_saved_properties_scraped_property_id; Type: INDEX; Schema: gis; Owner: postgres
--

CREATE INDEX idx_saved_properties_scraped_property_id ON gis.saved_properties USING btree (scraped_property_id);


--
-- Name: idx_saved_properties_user_id; Type: INDEX; Schema: gis; Owner: postgres
--

CREATE INDEX idx_saved_properties_user_id ON gis.saved_properties USING btree (user_id);


--
-- Name: idx_scraped_properties_is_saved; Type: INDEX; Schema: gis; Owner: postgres
--

CREATE INDEX idx_scraped_properties_is_saved ON gis.scraped_properties USING btree (is_saved);


--
-- Name: idx_scraped_properties_organization_id; Type: INDEX; Schema: gis; Owner: postgres
--

CREATE INDEX idx_scraped_properties_organization_id ON gis.scraped_properties USING btree (organization_id);


--
-- Name: idx_scraped_properties_scraped_at; Type: INDEX; Schema: gis; Owner: postgres
--

CREATE INDEX idx_scraped_properties_scraped_at ON gis.scraped_properties USING btree (scraped_at);


--
-- Name: idx_scraped_properties_search_session_id; Type: INDEX; Schema: gis; Owner: postgres
--

CREATE INDEX idx_scraped_properties_search_session_id ON gis.scraped_properties USING btree (search_session_id);


--
-- Name: idx_scraped_properties_user_id; Type: INDEX; Schema: gis; Owner: postgres
--

CREATE INDEX idx_scraped_properties_user_id ON gis.scraped_properties USING btree (user_id);


--
-- Name: idx_inventory_alerts_organization_id; Type: INDEX; Schema: inventory; Owner: postgres
--

CREATE INDEX idx_inventory_alerts_organization_id ON inventory.alerts USING btree (organization_id);


--
-- Name: idx_inventory_alerts_status; Type: INDEX; Schema: inventory; Owner: postgres
--

CREATE INDEX idx_inventory_alerts_status ON inventory.alerts USING btree (status);


--
-- Name: idx_inventory_items_category; Type: INDEX; Schema: inventory; Owner: postgres
--

CREATE INDEX idx_inventory_items_category ON inventory.items USING btree (category);


--
-- Name: idx_inventory_items_organization_id; Type: INDEX; Schema: inventory; Owner: postgres
--

CREATE INDEX idx_inventory_items_organization_id ON inventory.items USING btree (organization_id);


--
-- Name: idx_inventory_items_status; Type: INDEX; Schema: inventory; Owner: postgres
--

CREATE INDEX idx_inventory_items_status ON inventory.items USING btree (status);


--
-- Name: idx_inventory_items_user_id; Type: INDEX; Schema: inventory; Owner: postgres
--

CREATE INDEX idx_inventory_items_user_id ON inventory.items USING btree (user_id);


--
-- Name: idx_mileage_entries_created_at; Type: INDEX; Schema: mileage; Owner: postgres
--

CREATE INDEX idx_mileage_entries_created_at ON mileage.entries USING btree (created_at);


--
-- Name: idx_mileage_entries_customer_id; Type: INDEX; Schema: mileage; Owner: postgres
--

CREATE INDEX idx_mileage_entries_customer_id ON mileage.entries USING btree (customer_id);


--
-- Name: idx_mileage_entries_date; Type: INDEX; Schema: mileage; Owner: postgres
--

CREATE INDEX idx_mileage_entries_date ON mileage.entries USING btree (date);


--
-- Name: idx_mileage_entries_is_business; Type: INDEX; Schema: mileage; Owner: postgres
--

CREATE INDEX idx_mileage_entries_is_business ON mileage.entries USING btree (is_business);


--
-- Name: idx_mileage_entries_user_id; Type: INDEX; Schema: mileage; Owner: postgres
--

CREATE INDEX idx_mileage_entries_user_id ON mileage.entries USING btree (user_id);


--
-- Name: idx_ai_batches_org_created; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_ai_batches_org_created ON public.ai_batches USING btree (organization_id, created_at);


--
-- Name: idx_gis_permissions_enabled; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_gis_permissions_enabled ON public.gis_permissions USING btree (is_enabled);


--
-- Name: idx_gis_permissions_feature_name; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_gis_permissions_feature_name ON public.gis_permissions USING btree (feature_name);


--
-- Name: idx_gis_permissions_organization_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_gis_permissions_organization_id ON public.gis_permissions USING btree (organization_id);


--
-- Name: idx_lead_activities_lead_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_lead_activities_lead_id ON public.lead_activities USING btree (lead_id);


--
-- Name: idx_lead_activities_user_org; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_lead_activities_user_org ON public.lead_activities USING btree (user_id, organization_id);


--
-- Name: idx_leads_ai_batch; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_leads_ai_batch ON public.leads USING btree (ai_agent_batch_id) WHERE (source = 'ai_agent'::text);


--
-- Name: idx_leads_created_at; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_leads_created_at ON public.leads USING btree (created_at);


--
-- Name: idx_leads_email; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_leads_email ON public.leads USING btree (email);


--
-- Name: idx_leads_source; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_leads_source ON public.leads USING btree (source);


--
-- Name: idx_leads_status; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_leads_status ON public.leads USING btree (status);


--
-- Name: idx_leads_user_org; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_leads_user_org ON public.leads USING btree (user_id, organization_id);


--
-- Name: ix_realtime_subscription_entity; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING btree (entity);


--
-- Name: subscription_subscription_id_entity_filters_key; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters);


--
-- Name: bname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);


--
-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);


--
-- Name: idx_multipart_uploads_list; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at);


--
-- Name: idx_objects_bucket_id_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE "C");


--
-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);


--
-- Name: supabase_functions_hooks_h_table_id_h_name_idx; Type: INDEX; Schema: supabase_functions; Owner: supabase_functions_admin
--

CREATE INDEX supabase_functions_hooks_h_table_id_h_name_idx ON supabase_functions.hooks USING btree (hook_table_id, hook_name);


--
-- Name: supabase_functions_hooks_request_id_idx; Type: INDEX; Schema: supabase_functions; Owner: supabase_functions_admin
--

CREATE INDEX supabase_functions_hooks_request_id_idx ON supabase_functions.hooks USING btree (request_id);


--
-- Name: customers trigger_set_updated_at; Type: TRIGGER; Schema: crm; Owner: postgres
--

CREATE TRIGGER trigger_set_updated_at BEFORE UPDATE ON crm.customers FOR EACH ROW EXECUTE FUNCTION public.update_updated_at();


--
-- Name: entries trigger_mileage_entries_updated_at; Type: TRIGGER; Schema: mileage; Owner: postgres
--

CREATE TRIGGER trigger_mileage_entries_updated_at BEFORE UPDATE ON mileage.entries FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();


--
-- Name: subscription tr_check_filters; Type: TRIGGER; Schema: realtime; Owner: supabase_admin
--

CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters();


--
-- Name: objects update_objects_updated_at; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();


--
-- Name: identities identities_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: mfa_challenges mfa_challenges_auth_factor_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;


--
-- Name: mfa_factors mfa_factors_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: one_time_tokens one_time_tokens_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: refresh_tokens refresh_tokens_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: saml_providers saml_providers_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_flow_state_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: sessions sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: sso_domains sso_domains_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: recurring_payments recurring_payments_created_by_fkey; Type: FK CONSTRAINT; Schema: bookkeeper; Owner: postgres
--

ALTER TABLE ONLY bookkeeper.recurring_payments
    ADD CONSTRAINT recurring_payments_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: recurring_payments recurring_payments_customer_id_fkey; Type: FK CONSTRAINT; Schema: bookkeeper; Owner: postgres
--

ALTER TABLE ONLY bookkeeper.recurring_payments
    ADD CONSTRAINT recurring_payments_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES crm.customers(id);


--
-- Name: recurring_payments recurring_payments_interaction_id_fkey; Type: FK CONSTRAINT; Schema: bookkeeper; Owner: postgres
--

ALTER TABLE ONLY bookkeeper.recurring_payments
    ADD CONSTRAINT recurring_payments_interaction_id_fkey FOREIGN KEY (interaction_id) REFERENCES crm.interactions(id);


--
-- Name: recurring_payments recurring_payments_organization_id_fkey; Type: FK CONSTRAINT; Schema: bookkeeper; Owner: postgres
--

ALTER TABLE ONLY bookkeeper.recurring_payments
    ADD CONSTRAINT recurring_payments_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: recurring_payments recurring_payments_updated_by_fkey; Type: FK CONSTRAINT; Schema: bookkeeper; Owner: postgres
--

ALTER TABLE ONLY bookkeeper.recurring_payments
    ADD CONSTRAINT recurring_payments_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id);


--
-- Name: transactions transactions_customer_id_fkey; Type: FK CONSTRAINT; Schema: bookkeeper; Owner: postgres
--

ALTER TABLE ONLY bookkeeper.transactions
    ADD CONSTRAINT transactions_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES crm.customers(id);


--
-- Name: transactions transactions_interaction_id_fkey; Type: FK CONSTRAINT; Schema: bookkeeper; Owner: postgres
--

ALTER TABLE ONLY bookkeeper.transactions
    ADD CONSTRAINT transactions_interaction_id_fkey FOREIGN KEY (interaction_id) REFERENCES crm.interactions(id);


--
-- Name: transactions transactions_organization_id_fkey; Type: FK CONSTRAINT; Schema: bookkeeper; Owner: postgres
--

ALTER TABLE ONLY bookkeeper.transactions
    ADD CONSTRAINT transactions_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: transactions transactions_updated_by_fkey; Type: FK CONSTRAINT; Schema: bookkeeper; Owner: postgres
--

ALTER TABLE ONLY bookkeeper.transactions
    ADD CONSTRAINT transactions_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id);


--
-- Name: transactions transactions_uploaded_by_fkey; Type: FK CONSTRAINT; Schema: bookkeeper; Owner: postgres
--

ALTER TABLE ONLY bookkeeper.transactions
    ADD CONSTRAINT transactions_uploaded_by_fkey FOREIGN KEY (uploaded_by) REFERENCES auth.users(id);


--
-- Name: customers customers_organization_id_fkey; Type: FK CONSTRAINT; Schema: crm; Owner: postgres
--

ALTER TABLE ONLY crm.customers
    ADD CONSTRAINT customers_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: customers customers_updated_by_fkey; Type: FK CONSTRAINT; Schema: crm; Owner: postgres
--

ALTER TABLE ONLY crm.customers
    ADD CONSTRAINT customers_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id);


--
-- Name: customers customers_user_id_fkey; Type: FK CONSTRAINT; Schema: crm; Owner: postgres
--

ALTER TABLE ONLY crm.customers
    ADD CONSTRAINT customers_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);


--
-- Name: interactions interactions_customer_id_fkey; Type: FK CONSTRAINT; Schema: crm; Owner: postgres
--

ALTER TABLE ONLY crm.interactions
    ADD CONSTRAINT interactions_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES crm.customers(id) ON DELETE CASCADE;


--
-- Name: interactions interactions_organization_id_fkey; Type: FK CONSTRAINT; Schema: crm; Owner: postgres
--

ALTER TABLE ONLY crm.interactions
    ADD CONSTRAINT interactions_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: interactions interactions_updated_by_fkey; Type: FK CONSTRAINT; Schema: crm; Owner: postgres
--

ALTER TABLE ONLY crm.interactions
    ADD CONSTRAINT interactions_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id);


--
-- Name: interactions interactions_user_id_fkey; Type: FK CONSTRAINT; Schema: crm; Owner: postgres
--

ALTER TABLE ONLY crm.interactions
    ADD CONSTRAINT interactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);


--
-- Name: saved_properties saved_properties_organization_id_fkey; Type: FK CONSTRAINT; Schema: gis; Owner: postgres
--

ALTER TABLE ONLY gis.saved_properties
    ADD CONSTRAINT saved_properties_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: saved_properties saved_properties_scraped_property_id_fkey; Type: FK CONSTRAINT; Schema: gis; Owner: postgres
--

ALTER TABLE ONLY gis.saved_properties
    ADD CONSTRAINT saved_properties_scraped_property_id_fkey FOREIGN KEY (scraped_property_id) REFERENCES gis.scraped_properties(id) ON DELETE SET NULL;


--
-- Name: saved_properties saved_properties_user_id_fkey; Type: FK CONSTRAINT; Schema: gis; Owner: postgres
--

ALTER TABLE ONLY gis.saved_properties
    ADD CONSTRAINT saved_properties_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: scraped_properties scraped_properties_organization_id_fkey; Type: FK CONSTRAINT; Schema: gis; Owner: postgres
--

ALTER TABLE ONLY gis.scraped_properties
    ADD CONSTRAINT scraped_properties_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: scraped_properties scraped_properties_user_id_fkey; Type: FK CONSTRAINT; Schema: gis; Owner: postgres
--

ALTER TABLE ONLY gis.scraped_properties
    ADD CONSTRAINT scraped_properties_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: alerts alerts_item_id_fkey; Type: FK CONSTRAINT; Schema: inventory; Owner: postgres
--

ALTER TABLE ONLY inventory.alerts
    ADD CONSTRAINT alerts_item_id_fkey FOREIGN KEY (item_id) REFERENCES inventory.items(id) ON DELETE CASCADE;


--
-- Name: transactions transactions_item_id_fkey; Type: FK CONSTRAINT; Schema: inventory; Owner: postgres
--

ALTER TABLE ONLY inventory.transactions
    ADD CONSTRAINT transactions_item_id_fkey FOREIGN KEY (item_id) REFERENCES inventory.items(id) ON DELETE CASCADE;


--
-- Name: entries entries_organization_id_fkey; Type: FK CONSTRAINT; Schema: mileage; Owner: postgres
--

ALTER TABLE ONLY mileage.entries
    ADD CONSTRAINT entries_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: entries entries_user_id_fkey; Type: FK CONSTRAINT; Schema: mileage; Owner: postgres
--

ALTER TABLE ONLY mileage.entries
    ADD CONSTRAINT entries_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: ai_batches ai_batches_organization_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ai_batches
    ADD CONSTRAINT ai_batches_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id);


--
-- Name: ai_batches ai_batches_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ai_batches
    ADD CONSTRAINT ai_batches_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);


--
-- Name: gis_permissions gis_permissions_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gis_permissions
    ADD CONSTRAINT gis_permissions_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id) ON DELETE SET NULL;


--
-- Name: gis_permissions gis_permissions_organization_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.gis_permissions
    ADD CONSTRAINT gis_permissions_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: lead_activities lead_activities_lead_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lead_activities
    ADD CONSTRAINT lead_activities_lead_id_fkey FOREIGN KEY (lead_id) REFERENCES public.leads(id) ON DELETE CASCADE;


--
-- Name: lead_activities lead_activities_organization_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lead_activities
    ADD CONSTRAINT lead_activities_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id);


--
-- Name: lead_activities lead_activities_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lead_activities
    ADD CONSTRAINT lead_activities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);


--
-- Name: lead_sources lead_sources_organization_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lead_sources
    ADD CONSTRAINT lead_sources_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id);


--
-- Name: leads leads_organization_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.leads
    ADD CONSTRAINT leads_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id);


--
-- Name: leads leads_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.leads
    ADD CONSTRAINT leads_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);


--
-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_upload_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_upload_id_fkey FOREIGN KEY (upload_id) REFERENCES storage.s3_multipart_uploads(id) ON DELETE CASCADE;


--
-- Name: audit_log_entries; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.audit_log_entries ENABLE ROW LEVEL SECURITY;

--
-- Name: flow_state; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.flow_state ENABLE ROW LEVEL SECURITY;

--
-- Name: identities; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.identities ENABLE ROW LEVEL SECURITY;

--
-- Name: instances; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.instances ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_amr_claims; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_amr_claims ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_challenges; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_challenges ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_factors; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_factors ENABLE ROW LEVEL SECURITY;

--
-- Name: one_time_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.one_time_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: refresh_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.refresh_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_relay_states; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_relay_states ENABLE ROW LEVEL SECURITY;

--
-- Name: schema_migrations; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.schema_migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: sessions; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sessions ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_domains; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_domains ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: users; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;

--
-- Name: recurring_payments absolute_org_isolation; Type: POLICY; Schema: bookkeeper; Owner: postgres
--

CREATE POLICY absolute_org_isolation ON bookkeeper.recurring_payments TO authenticated USING (((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid())))) WITH CHECK (((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid()))));


--
-- Name: transactions absolute_org_isolation; Type: POLICY; Schema: bookkeeper; Owner: postgres
--

CREATE POLICY absolute_org_isolation ON bookkeeper.transactions TO authenticated USING (((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid())))) WITH CHECK (((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid()))));


--
-- Name: recurring_payments; Type: ROW SECURITY; Schema: bookkeeper; Owner: postgres
--

ALTER TABLE bookkeeper.recurring_payments ENABLE ROW LEVEL SECURITY;

--
-- Name: transactions; Type: ROW SECURITY; Schema: bookkeeper; Owner: postgres
--

ALTER TABLE bookkeeper.transactions ENABLE ROW LEVEL SECURITY;

--
-- Name: customers absolute_org_isolation; Type: POLICY; Schema: crm; Owner: postgres
--

CREATE POLICY absolute_org_isolation ON crm.customers TO authenticated USING (((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid())))) WITH CHECK (((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid()))));


--
-- Name: interactions absolute_org_isolation; Type: POLICY; Schema: crm; Owner: postgres
--

CREATE POLICY absolute_org_isolation ON crm.interactions TO authenticated USING (((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid())))) WITH CHECK (((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid()))));


--
-- Name: customers; Type: ROW SECURITY; Schema: crm; Owner: postgres
--

ALTER TABLE crm.customers ENABLE ROW LEVEL SECURITY;

--
-- Name: interactions; Type: ROW SECURITY; Schema: crm; Owner: postgres
--

ALTER TABLE crm.interactions ENABLE ROW LEVEL SECURITY;

--
-- Name: saved_properties absolute_org_isolation; Type: POLICY; Schema: gis; Owner: postgres
--

CREATE POLICY absolute_org_isolation ON gis.saved_properties TO authenticated USING ((((organization_id)::text = 'b36152e9-6035-44b0-bf69-157db934699d'::text) AND ((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid()))))) WITH CHECK ((((organization_id)::text = 'b36152e9-6035-44b0-bf69-157db934699d'::text) AND ((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid())))));


--
-- Name: scraped_properties absolute_org_isolation; Type: POLICY; Schema: gis; Owner: postgres
--

CREATE POLICY absolute_org_isolation ON gis.scraped_properties TO authenticated USING ((((organization_id)::text = 'b36152e9-6035-44b0-bf69-157db934699d'::text) AND ((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid()))))) WITH CHECK ((((organization_id)::text = 'b36152e9-6035-44b0-bf69-157db934699d'::text) AND ((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid())))));


--
-- Name: saved_properties; Type: ROW SECURITY; Schema: gis; Owner: postgres
--

ALTER TABLE gis.saved_properties ENABLE ROW LEVEL SECURITY;

--
-- Name: scraped_properties; Type: ROW SECURITY; Schema: gis; Owner: postgres
--

ALTER TABLE gis.scraped_properties ENABLE ROW LEVEL SECURITY;

--
-- Name: alerts absolute_org_isolation; Type: POLICY; Schema: inventory; Owner: postgres
--

CREATE POLICY absolute_org_isolation ON inventory.alerts TO authenticated USING (((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid())))) WITH CHECK (((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid()))));


--
-- Name: items absolute_org_isolation; Type: POLICY; Schema: inventory; Owner: postgres
--

CREATE POLICY absolute_org_isolation ON inventory.items TO authenticated USING (((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid())))) WITH CHECK (((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid()))));


--
-- Name: transactions absolute_org_isolation; Type: POLICY; Schema: inventory; Owner: postgres
--

CREATE POLICY absolute_org_isolation ON inventory.transactions TO authenticated USING (((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid())))) WITH CHECK (((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid()))));


--
-- Name: alerts; Type: ROW SECURITY; Schema: inventory; Owner: postgres
--

ALTER TABLE inventory.alerts ENABLE ROW LEVEL SECURITY;

--
-- Name: items; Type: ROW SECURITY; Schema: inventory; Owner: postgres
--

ALTER TABLE inventory.items ENABLE ROW LEVEL SECURITY;

--
-- Name: transactions; Type: ROW SECURITY; Schema: inventory; Owner: postgres
--

ALTER TABLE inventory.transactions ENABLE ROW LEVEL SECURITY;

--
-- Name: entries absolute_org_isolation; Type: POLICY; Schema: mileage; Owner: postgres
--

CREATE POLICY absolute_org_isolation ON mileage.entries TO authenticated USING (((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid())))) WITH CHECK (((organization_id)::text = ( SELECT (users.raw_user_meta_data ->> 'organization_id'::text)
   FROM auth.users
  WHERE (users.id = auth.uid()))));


--
-- Name: entries; Type: ROW SECURITY; Schema: mileage; Owner: postgres
--

ALTER TABLE mileage.entries ENABLE ROW LEVEL SECURITY;

--
-- Name: gis_permissions; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.gis_permissions ENABLE ROW LEVEL SECURITY;

--
-- Name: gis_permissions org_permissions_access; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY org_permissions_access ON public.gis_permissions TO authenticated USING ((organization_id = public.get_user_organization_id())) WITH CHECK ((organization_id = public.get_user_organization_id()));


--
-- Name: messages; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE realtime.messages ENABLE ROW LEVEL SECURITY;

--
-- Name: buckets; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;

--
-- Name: migrations; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads_parts; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads_parts ENABLE ROW LEVEL SECURITY;

--
-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: postgres
--

CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');


ALTER PUBLICATION supabase_realtime OWNER TO postgres;

--
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA auth TO anon;
GRANT USAGE ON SCHEMA auth TO authenticated;
GRANT USAGE ON SCHEMA auth TO service_role;
GRANT ALL ON SCHEMA auth TO supabase_auth_admin;
GRANT ALL ON SCHEMA auth TO dashboard_user;
GRANT USAGE ON SCHEMA auth TO postgres;


--
-- Name: SCHEMA bookkeeper; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA bookkeeper TO authenticated;


--
-- Name: SCHEMA crm; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA crm TO authenticated;
GRANT USAGE ON SCHEMA crm TO anon;


--
-- Name: SCHEMA cron; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA cron TO postgres WITH GRANT OPTION;


--
-- Name: SCHEMA extensions; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA extensions TO anon;
GRANT USAGE ON SCHEMA extensions TO authenticated;
GRANT USAGE ON SCHEMA extensions TO service_role;
GRANT ALL ON SCHEMA extensions TO dashboard_user;


--
-- Name: SCHEMA inventory; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA inventory TO authenticated;


--
-- Name: SCHEMA mileage; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA mileage TO anon;
GRANT USAGE ON SCHEMA mileage TO authenticated;


--
-- Name: SCHEMA net; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA net TO supabase_functions_admin;
GRANT USAGE ON SCHEMA net TO postgres;
GRANT USAGE ON SCHEMA net TO anon;
GRANT USAGE ON SCHEMA net TO authenticated;
GRANT USAGE ON SCHEMA net TO service_role;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- Name: SCHEMA realtime; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA realtime TO postgres;
GRANT USAGE ON SCHEMA realtime TO anon;
GRANT USAGE ON SCHEMA realtime TO authenticated;
GRANT USAGE ON SCHEMA realtime TO service_role;
GRANT ALL ON SCHEMA realtime TO supabase_realtime_admin;


--
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA storage TO postgres;
GRANT USAGE ON SCHEMA storage TO anon;
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT USAGE ON SCHEMA storage TO service_role;
GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
GRANT ALL ON SCHEMA storage TO dashboard_user;


--
-- Name: SCHEMA supabase_functions; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA supabase_functions TO postgres;
GRANT USAGE ON SCHEMA supabase_functions TO anon;
GRANT USAGE ON SCHEMA supabase_functions TO authenticated;
GRANT USAGE ON SCHEMA supabase_functions TO service_role;
GRANT ALL ON SCHEMA supabase_functions TO supabase_functions_admin;


--
-- Name: SCHEMA vault; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA vault TO postgres WITH GRANT OPTION;
GRANT USAGE ON SCHEMA vault TO service_role;


--
-- Name: FUNCTION email(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.email() TO dashboard_user;


--
-- Name: FUNCTION jwt(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.jwt() TO postgres;
GRANT ALL ON FUNCTION auth.jwt() TO dashboard_user;


--
-- Name: FUNCTION role(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.role() TO dashboard_user;


--
-- Name: FUNCTION uid(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.uid() TO dashboard_user;


--
-- Name: FUNCTION alter_job(job_id bigint, schedule text, command text, database text, username text, active boolean); Type: ACL; Schema: cron; Owner: supabase_admin
--

GRANT ALL ON FUNCTION cron.alter_job(job_id bigint, schedule text, command text, database text, username text, active boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION job_cache_invalidate(); Type: ACL; Schema: cron; Owner: supabase_admin
--

GRANT ALL ON FUNCTION cron.job_cache_invalidate() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION schedule(schedule text, command text); Type: ACL; Schema: cron; Owner: supabase_admin
--

GRANT ALL ON FUNCTION cron.schedule(schedule text, command text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION schedule(job_name text, schedule text, command text); Type: ACL; Schema: cron; Owner: supabase_admin
--

GRANT ALL ON FUNCTION cron.schedule(job_name text, schedule text, command text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION schedule_in_database(job_name text, schedule text, command text, database text, username text, active boolean); Type: ACL; Schema: cron; Owner: supabase_admin
--

GRANT ALL ON FUNCTION cron.schedule_in_database(job_name text, schedule text, command text, database text, username text, active boolean) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION unschedule(job_id bigint); Type: ACL; Schema: cron; Owner: supabase_admin
--

GRANT ALL ON FUNCTION cron.unschedule(job_id bigint) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION unschedule(job_name text); Type: ACL; Schema: cron; Owner: supabase_admin
--

GRANT ALL ON FUNCTION cron.unschedule(job_name text) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea, text[], text[]) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO dashboard_user;


--
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.crypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.dearmor(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO dashboard_user;


--
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_bytes(integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO dashboard_user;


--
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_uuid() FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text, integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO dashboard_user;


--
-- Name: FUNCTION grant_pg_cron_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION extensions.grant_pg_cron_access() FROM supabase_admin;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO supabase_admin WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO dashboard_user;


--
-- Name: FUNCTION grant_pg_graphql_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.grant_pg_graphql_access() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION grant_pg_net_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION extensions.grant_pg_net_access() FROM supabase_admin;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO supabase_admin WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO dashboard_user;


--
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_reset(userid oid, dbid oid, queryid bigint); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO dashboard_user;


--
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO dashboard_user;


--
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_key_id(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgrst_ddl_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_ddl_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgrst_drop_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_drop_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION set_graphql_placeholder(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.set_graphql_placeholder() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION uuid_generate_v1(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1mc(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1mc() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v3(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v4(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v4() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v5(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_nil(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_nil() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_dns(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_dns() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_oid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_oid() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_url(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_url() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_x500(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_x500() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO dashboard_user;


--
-- Name: FUNCTION graphql("operationName" text, query text, variables jsonb, extensions jsonb); Type: ACL; Schema: graphql_public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO postgres;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO anon;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO authenticated;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO service_role;


--
-- Name: FUNCTION add_entry(p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text); Type: ACL; Schema: mileage; Owner: postgres
--

GRANT ALL ON FUNCTION mileage.add_entry(p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text) TO authenticated;


--
-- Name: FUNCTION calculate_distance(p_start_location text, p_end_location text); Type: ACL; Schema: mileage; Owner: postgres
--

GRANT ALL ON FUNCTION mileage.calculate_distance(p_start_location text, p_end_location text) TO authenticated;


--
-- Name: FUNCTION delete_entry(p_id uuid); Type: ACL; Schema: mileage; Owner: postgres
--

GRANT ALL ON FUNCTION mileage.delete_entry(p_id uuid) TO authenticated;


--
-- Name: FUNCTION get_growth(p_user_id uuid); Type: ACL; Schema: mileage; Owner: postgres
--

GRANT ALL ON FUNCTION mileage.get_growth(p_user_id uuid) TO authenticated;


--
-- Name: FUNCTION update_entry(p_id uuid, p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text); Type: ACL; Schema: mileage; Owner: postgres
--

GRANT ALL ON FUNCTION mileage.update_entry(p_id uuid, p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text) TO authenticated;


--
-- Name: FUNCTION get_auth(p_usename text); Type: ACL; Schema: pgbouncer; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pgbouncer.get_auth(p_usename text) FROM PUBLIC;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO pgbouncer;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO postgres;


--
-- Name: FUNCTION add_customer(full_name text, email text, phone text, business text, status text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.add_customer(full_name text, email text, phone text, business text, status text) TO anon;
GRANT ALL ON FUNCTION public.add_customer(full_name text, email text, phone text, business text, status text) TO authenticated;
GRANT ALL ON FUNCTION public.add_customer(full_name text, email text, phone text, business text, status text) TO service_role;


--
-- Name: FUNCTION add_interaction(customer_id uuid, type text, title text, notes text, outcome text, follow_up_required boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.add_interaction(customer_id uuid, type text, title text, notes text, outcome text, follow_up_required boolean) TO anon;
GRANT ALL ON FUNCTION public.add_interaction(customer_id uuid, type text, title text, notes text, outcome text, follow_up_required boolean) TO authenticated;
GRANT ALL ON FUNCTION public.add_interaction(customer_id uuid, type text, title text, notes text, outcome text, follow_up_required boolean) TO service_role;


--
-- Name: FUNCTION add_inventory_item(p_name text, p_category text, p_description text, p_sku text, p_subcategory text, p_location text, p_current_quantity integer, p_minimum_threshold integer, p_maximum_capacity integer, p_unit_of_measurement text, p_unit_cost numeric, p_unit_price numeric, p_supplier text, p_supplier_contact text, p_notes text, p_auto_reorder_enabled boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.add_inventory_item(p_name text, p_category text, p_description text, p_sku text, p_subcategory text, p_location text, p_current_quantity integer, p_minimum_threshold integer, p_maximum_capacity integer, p_unit_of_measurement text, p_unit_cost numeric, p_unit_price numeric, p_supplier text, p_supplier_contact text, p_notes text, p_auto_reorder_enabled boolean) TO anon;
GRANT ALL ON FUNCTION public.add_inventory_item(p_name text, p_category text, p_description text, p_sku text, p_subcategory text, p_location text, p_current_quantity integer, p_minimum_threshold integer, p_maximum_capacity integer, p_unit_of_measurement text, p_unit_cost numeric, p_unit_price numeric, p_supplier text, p_supplier_contact text, p_notes text, p_auto_reorder_enabled boolean) TO authenticated;
GRANT ALL ON FUNCTION public.add_inventory_item(p_name text, p_category text, p_description text, p_sku text, p_subcategory text, p_location text, p_current_quantity integer, p_minimum_threshold integer, p_maximum_capacity integer, p_unit_of_measurement text, p_unit_cost numeric, p_unit_price numeric, p_supplier text, p_supplier_contact text, p_notes text, p_auto_reorder_enabled boolean) TO service_role;


--
-- Name: FUNCTION add_mileage_entry(p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.add_mileage_entry(p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text) TO anon;
GRANT ALL ON FUNCTION public.add_mileage_entry(p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text) TO authenticated;
GRANT ALL ON FUNCTION public.add_mileage_entry(p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text) TO service_role;


--
-- Name: FUNCTION add_transaction(type text, category text, description text, amount numeric, customer_id uuid, interaction_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.add_transaction(type text, category text, description text, amount numeric, customer_id uuid, interaction_id uuid) TO anon;
GRANT ALL ON FUNCTION public.add_transaction(type text, category text, description text, amount numeric, customer_id uuid, interaction_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.add_transaction(type text, category text, description text, amount numeric, customer_id uuid, interaction_id uuid) TO service_role;


--
-- Name: FUNCTION calculate_next_payment_date(from_date timestamp with time zone, frequency text, day_of_month integer, day_of_week integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.calculate_next_payment_date(from_date timestamp with time zone, frequency text, day_of_month integer, day_of_week integer) TO anon;
GRANT ALL ON FUNCTION public.calculate_next_payment_date(from_date timestamp with time zone, frequency text, day_of_month integer, day_of_week integer) TO authenticated;
GRANT ALL ON FUNCTION public.calculate_next_payment_date(from_date timestamp with time zone, frequency text, day_of_month integer, day_of_week integer) TO service_role;


--
-- Name: FUNCTION cleanup_gis_scraped_properties_api(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.cleanup_gis_scraped_properties_api() TO anon;
GRANT ALL ON FUNCTION public.cleanup_gis_scraped_properties_api() TO authenticated;
GRANT ALL ON FUNCTION public.cleanup_gis_scraped_properties_api() TO service_role;


--
-- Name: FUNCTION cleanup_scraped_properties(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.cleanup_scraped_properties() TO anon;
GRANT ALL ON FUNCTION public.cleanup_scraped_properties() TO authenticated;
GRANT ALL ON FUNCTION public.cleanup_scraped_properties() TO service_role;


--
-- Name: TABLE recurring_payments; Type: ACL; Schema: bookkeeper; Owner: postgres
--

GRANT SELECT ON TABLE bookkeeper.recurring_payments TO authenticated;


--
-- Name: FUNCTION create_recurring_payment(p_type text, p_category text, p_description text, p_amount numeric, p_frequency text, p_start_date timestamp with time zone, p_end_date timestamp with time zone, p_day_of_month integer, p_day_of_week integer, p_created_by uuid, p_customer_id uuid, p_interaction_id uuid, p_next_payment_date timestamp with time zone, p_payment_limit integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.create_recurring_payment(p_type text, p_category text, p_description text, p_amount numeric, p_frequency text, p_start_date timestamp with time zone, p_end_date timestamp with time zone, p_day_of_month integer, p_day_of_week integer, p_created_by uuid, p_customer_id uuid, p_interaction_id uuid, p_next_payment_date timestamp with time zone, p_payment_limit integer) TO anon;
GRANT ALL ON FUNCTION public.create_recurring_payment(p_type text, p_category text, p_description text, p_amount numeric, p_frequency text, p_start_date timestamp with time zone, p_end_date timestamp with time zone, p_day_of_month integer, p_day_of_week integer, p_created_by uuid, p_customer_id uuid, p_interaction_id uuid, p_next_payment_date timestamp with time zone, p_payment_limit integer) TO authenticated;
GRANT ALL ON FUNCTION public.create_recurring_payment(p_type text, p_category text, p_description text, p_amount numeric, p_frequency text, p_start_date timestamp with time zone, p_end_date timestamp with time zone, p_day_of_month integer, p_day_of_week integer, p_created_by uuid, p_customer_id uuid, p_interaction_id uuid, p_next_payment_date timestamp with time zone, p_payment_limit integer) TO service_role;


--
-- Name: FUNCTION create_recurring_payment(p_type text, p_category text, p_description text, p_amount numeric, p_frequency text, p_start_date timestamp with time zone, p_end_date timestamp with time zone, p_day_of_month integer, p_day_of_week integer, p_created_by uuid, p_customer_id uuid, p_interaction_id uuid, p_next_payment_date timestamp with time zone, p_payment_limit integer, p_payments_processed integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.create_recurring_payment(p_type text, p_category text, p_description text, p_amount numeric, p_frequency text, p_start_date timestamp with time zone, p_end_date timestamp with time zone, p_day_of_month integer, p_day_of_week integer, p_created_by uuid, p_customer_id uuid, p_interaction_id uuid, p_next_payment_date timestamp with time zone, p_payment_limit integer, p_payments_processed integer) TO anon;
GRANT ALL ON FUNCTION public.create_recurring_payment(p_type text, p_category text, p_description text, p_amount numeric, p_frequency text, p_start_date timestamp with time zone, p_end_date timestamp with time zone, p_day_of_month integer, p_day_of_week integer, p_created_by uuid, p_customer_id uuid, p_interaction_id uuid, p_next_payment_date timestamp with time zone, p_payment_limit integer, p_payments_processed integer) TO authenticated;
GRANT ALL ON FUNCTION public.create_recurring_payment(p_type text, p_category text, p_description text, p_amount numeric, p_frequency text, p_start_date timestamp with time zone, p_end_date timestamp with time zone, p_day_of_month integer, p_day_of_week integer, p_created_by uuid, p_customer_id uuid, p_interaction_id uuid, p_next_payment_date timestamp with time zone, p_payment_limit integer, p_payments_processed integer) TO service_role;


--
-- Name: FUNCTION delete_customer(p_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.delete_customer(p_id uuid) TO anon;
GRANT ALL ON FUNCTION public.delete_customer(p_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.delete_customer(p_id uuid) TO service_role;


--
-- Name: FUNCTION delete_interaction(p_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.delete_interaction(p_id uuid) TO anon;
GRANT ALL ON FUNCTION public.delete_interaction(p_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.delete_interaction(p_id uuid) TO service_role;


--
-- Name: FUNCTION delete_inventory_item(p_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.delete_inventory_item(p_id uuid) TO anon;
GRANT ALL ON FUNCTION public.delete_inventory_item(p_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.delete_inventory_item(p_id uuid) TO service_role;


--
-- Name: FUNCTION delete_mileage_entry(p_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.delete_mileage_entry(p_id uuid) TO anon;
GRANT ALL ON FUNCTION public.delete_mileage_entry(p_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.delete_mileage_entry(p_id uuid) TO service_role;


--
-- Name: FUNCTION delete_recurring_payment(p_payment_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.delete_recurring_payment(p_payment_id uuid) TO anon;
GRANT ALL ON FUNCTION public.delete_recurring_payment(p_payment_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.delete_recurring_payment(p_payment_id uuid) TO service_role;


--
-- Name: FUNCTION delete_transaction(p_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.delete_transaction(p_id uuid) TO anon;
GRANT ALL ON FUNCTION public.delete_transaction(p_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.delete_transaction(p_id uuid) TO service_role;


--
-- Name: FUNCTION get_lead_stats_optimized(org_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_lead_stats_optimized(org_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_lead_stats_optimized(org_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_lead_stats_optimized(org_id uuid) TO service_role;


--
-- Name: FUNCTION get_mileage_growth(p_user_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_mileage_growth(p_user_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_mileage_growth(p_user_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_mileage_growth(p_user_id uuid) TO service_role;


--
-- Name: FUNCTION get_user_organization_id(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_user_organization_id() TO anon;
GRANT ALL ON FUNCTION public.get_user_organization_id() TO authenticated;
GRANT ALL ON FUNCTION public.get_user_organization_id() TO service_role;


--
-- Name: FUNCTION handle_updated_at(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.handle_updated_at() TO anon;
GRANT ALL ON FUNCTION public.handle_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.handle_updated_at() TO service_role;


--
-- Name: FUNCTION has_gis_permission(feature text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.has_gis_permission(feature text) TO anon;
GRANT ALL ON FUNCTION public.has_gis_permission(feature text) TO authenticated;
GRANT ALL ON FUNCTION public.has_gis_permission(feature text) TO service_role;


--
-- Name: FUNCTION process_due_recurring_payments(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.process_due_recurring_payments() TO anon;
GRANT ALL ON FUNCTION public.process_due_recurring_payments() TO authenticated;
GRANT ALL ON FUNCTION public.process_due_recurring_payments() TO service_role;


--
-- Name: FUNCTION process_recurring_payments_optimized(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.process_recurring_payments_optimized() TO anon;
GRANT ALL ON FUNCTION public.process_recurring_payments_optimized() TO authenticated;
GRANT ALL ON FUNCTION public.process_recurring_payments_optimized() TO service_role;


--
-- Name: FUNCTION set_user_organization(user_email text, org_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.set_user_organization(user_email text, org_id uuid) TO anon;
GRANT ALL ON FUNCTION public.set_user_organization(user_email text, org_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.set_user_organization(user_email text, org_id uuid) TO service_role;


--
-- Name: FUNCTION trigger_recurring_payments_manually(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.trigger_recurring_payments_manually() TO anon;
GRANT ALL ON FUNCTION public.trigger_recurring_payments_manually() TO authenticated;
GRANT ALL ON FUNCTION public.trigger_recurring_payments_manually() TO service_role;


--
-- Name: FUNCTION update_customer(p_id uuid, p_full_name text, p_email text, p_phone text, p_business text, p_status text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_customer(p_id uuid, p_full_name text, p_email text, p_phone text, p_business text, p_status text) TO anon;
GRANT ALL ON FUNCTION public.update_customer(p_id uuid, p_full_name text, p_email text, p_phone text, p_business text, p_status text) TO authenticated;
GRANT ALL ON FUNCTION public.update_customer(p_id uuid, p_full_name text, p_email text, p_phone text, p_business text, p_status text) TO service_role;


--
-- Name: FUNCTION update_interaction(p_id uuid, p_customer_id uuid, p_type text, p_title text, p_notes text, p_outcome text, p_follow_up_required boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_interaction(p_id uuid, p_customer_id uuid, p_type text, p_title text, p_notes text, p_outcome text, p_follow_up_required boolean) TO anon;
GRANT ALL ON FUNCTION public.update_interaction(p_id uuid, p_customer_id uuid, p_type text, p_title text, p_notes text, p_outcome text, p_follow_up_required boolean) TO authenticated;
GRANT ALL ON FUNCTION public.update_interaction(p_id uuid, p_customer_id uuid, p_type text, p_title text, p_notes text, p_outcome text, p_follow_up_required boolean) TO service_role;


--
-- Name: FUNCTION update_inventory_item(p_id uuid, p_name text, p_category text, p_current_quantity integer, p_description text, p_sku text, p_subcategory text, p_location text, p_minimum_threshold integer, p_maximum_capacity integer, p_unit_of_measurement text, p_unit_cost numeric, p_unit_price numeric, p_supplier text, p_supplier_contact text, p_notes text, p_auto_reorder_enabled boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_inventory_item(p_id uuid, p_name text, p_category text, p_current_quantity integer, p_description text, p_sku text, p_subcategory text, p_location text, p_minimum_threshold integer, p_maximum_capacity integer, p_unit_of_measurement text, p_unit_cost numeric, p_unit_price numeric, p_supplier text, p_supplier_contact text, p_notes text, p_auto_reorder_enabled boolean) TO anon;
GRANT ALL ON FUNCTION public.update_inventory_item(p_id uuid, p_name text, p_category text, p_current_quantity integer, p_description text, p_sku text, p_subcategory text, p_location text, p_minimum_threshold integer, p_maximum_capacity integer, p_unit_of_measurement text, p_unit_cost numeric, p_unit_price numeric, p_supplier text, p_supplier_contact text, p_notes text, p_auto_reorder_enabled boolean) TO authenticated;
GRANT ALL ON FUNCTION public.update_inventory_item(p_id uuid, p_name text, p_category text, p_current_quantity integer, p_description text, p_sku text, p_subcategory text, p_location text, p_minimum_threshold integer, p_maximum_capacity integer, p_unit_of_measurement text, p_unit_cost numeric, p_unit_price numeric, p_supplier text, p_supplier_contact text, p_notes text, p_auto_reorder_enabled boolean) TO service_role;


--
-- Name: FUNCTION update_inventory_item_quantity_after_transaction(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_inventory_item_quantity_after_transaction() TO anon;
GRANT ALL ON FUNCTION public.update_inventory_item_quantity_after_transaction() TO authenticated;
GRANT ALL ON FUNCTION public.update_inventory_item_quantity_after_transaction() TO service_role;


--
-- Name: FUNCTION update_mileage_entry(p_id uuid, p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_mileage_entry(p_id uuid, p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text) TO anon;
GRANT ALL ON FUNCTION public.update_mileage_entry(p_id uuid, p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text) TO authenticated;
GRANT ALL ON FUNCTION public.update_mileage_entry(p_id uuid, p_date date, p_purpose text, p_miles numeric, p_is_business boolean, p_start_location text, p_end_location text, p_customer_id uuid, p_notes text) TO service_role;


--
-- Name: FUNCTION update_recurring_payment(p_payment_id uuid, p_update_data jsonb); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_recurring_payment(p_payment_id uuid, p_update_data jsonb) TO anon;
GRANT ALL ON FUNCTION public.update_recurring_payment(p_payment_id uuid, p_update_data jsonb) TO authenticated;
GRANT ALL ON FUNCTION public.update_recurring_payment(p_payment_id uuid, p_update_data jsonb) TO service_role;


--
-- Name: FUNCTION update_transaction(p_id uuid, p_type text, p_category text, p_description text, p_amount numeric, p_customer_id uuid, p_interaction_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_transaction(p_id uuid, p_type text, p_category text, p_description text, p_amount numeric, p_customer_id uuid, p_interaction_id uuid) TO anon;
GRANT ALL ON FUNCTION public.update_transaction(p_id uuid, p_type text, p_category text, p_description text, p_amount numeric, p_customer_id uuid, p_interaction_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.update_transaction(p_id uuid, p_type text, p_category text, p_description text, p_amount numeric, p_customer_id uuid, p_interaction_id uuid) TO service_role;


--
-- Name: FUNCTION update_updated_at(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_updated_at() TO service_role;


--
-- Name: FUNCTION apply_rls(wal jsonb, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO postgres;
GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO dashboard_user;


--
-- Name: FUNCTION build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO postgres;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO anon;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO service_role;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION "cast"(val text, type_ regtype); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO postgres;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO dashboard_user;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO anon;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO authenticated;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO service_role;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO supabase_realtime_admin;


--
-- Name: FUNCTION check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO postgres;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO anon;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO authenticated;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO service_role;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO supabase_realtime_admin;


--
-- Name: FUNCTION is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO postgres;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO anon;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO service_role;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION quote_wal2json(entity regclass); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO postgres;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO anon;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO authenticated;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO service_role;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO supabase_realtime_admin;


--
-- Name: FUNCTION send(payload jsonb, event text, topic text, private boolean); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO postgres;
GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO dashboard_user;


--
-- Name: FUNCTION subscription_check_filters(); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO postgres;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO dashboard_user;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO anon;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO authenticated;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO service_role;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO supabase_realtime_admin;


--
-- Name: FUNCTION to_regrole(role_name text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO postgres;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO anon;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO authenticated;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO service_role;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO supabase_realtime_admin;


--
-- Name: FUNCTION topic(); Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON FUNCTION realtime.topic() TO postgres;
GRANT ALL ON FUNCTION realtime.topic() TO dashboard_user;


--
-- Name: FUNCTION http_request(); Type: ACL; Schema: supabase_functions; Owner: supabase_functions_admin
--

REVOKE ALL ON FUNCTION supabase_functions.http_request() FROM PUBLIC;
GRANT ALL ON FUNCTION supabase_functions.http_request() TO postgres;
GRANT ALL ON FUNCTION supabase_functions.http_request() TO anon;
GRANT ALL ON FUNCTION supabase_functions.http_request() TO authenticated;
GRANT ALL ON FUNCTION supabase_functions.http_request() TO service_role;


--
-- Name: FUNCTION _crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea, nonce bytea); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault._crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea, nonce bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION vault._crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea, nonce bytea) TO service_role;


--
-- Name: FUNCTION create_secret(new_secret text, new_name text, new_description text, new_key_id uuid); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault.create_secret(new_secret text, new_name text, new_description text, new_key_id uuid) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION vault.create_secret(new_secret text, new_name text, new_description text, new_key_id uuid) TO service_role;


--
-- Name: FUNCTION update_secret(secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault.update_secret(secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION vault.update_secret(secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid) TO service_role;


--
-- Name: TABLE audit_log_entries; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.audit_log_entries TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.audit_log_entries TO postgres;
GRANT SELECT ON TABLE auth.audit_log_entries TO postgres WITH GRANT OPTION;


--
-- Name: TABLE flow_state; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.flow_state TO postgres;
GRANT SELECT ON TABLE auth.flow_state TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.flow_state TO dashboard_user;


--
-- Name: TABLE identities; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.identities TO postgres;
GRANT SELECT ON TABLE auth.identities TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.identities TO dashboard_user;


--
-- Name: TABLE instances; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.instances TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.instances TO postgres;
GRANT SELECT ON TABLE auth.instances TO postgres WITH GRANT OPTION;


--
-- Name: TABLE mfa_amr_claims; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_amr_claims TO postgres;
GRANT SELECT ON TABLE auth.mfa_amr_claims TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_amr_claims TO dashboard_user;


--
-- Name: TABLE mfa_challenges; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_challenges TO postgres;
GRANT SELECT ON TABLE auth.mfa_challenges TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_challenges TO dashboard_user;


--
-- Name: TABLE mfa_factors; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_factors TO postgres;
GRANT SELECT ON TABLE auth.mfa_factors TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_factors TO dashboard_user;


--
-- Name: TABLE one_time_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.one_time_tokens TO postgres;
GRANT SELECT ON TABLE auth.one_time_tokens TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.one_time_tokens TO dashboard_user;


--
-- Name: TABLE refresh_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.refresh_tokens TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.refresh_tokens TO postgres;
GRANT SELECT ON TABLE auth.refresh_tokens TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE refresh_tokens_id_seq; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO dashboard_user;
GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO postgres;


--
-- Name: TABLE saml_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_providers TO postgres;
GRANT SELECT ON TABLE auth.saml_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_providers TO dashboard_user;


--
-- Name: TABLE saml_relay_states; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_relay_states TO postgres;
GRANT SELECT ON TABLE auth.saml_relay_states TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_relay_states TO dashboard_user;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT SELECT ON TABLE auth.schema_migrations TO postgres WITH GRANT OPTION;


--
-- Name: TABLE sessions; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sessions TO postgres;
GRANT SELECT ON TABLE auth.sessions TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sessions TO dashboard_user;


--
-- Name: TABLE sso_domains; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_domains TO postgres;
GRANT SELECT ON TABLE auth.sso_domains TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_domains TO dashboard_user;


--
-- Name: TABLE sso_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_providers TO postgres;
GRANT SELECT ON TABLE auth.sso_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_providers TO dashboard_user;


--
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.users TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.users TO postgres;
GRANT SELECT ON TABLE auth.users TO postgres WITH GRANT OPTION;
SET SESSION AUTHORIZATION postgres;
GRANT SELECT ON TABLE auth.users TO authenticated;
RESET SESSION AUTHORIZATION;


--
-- Name: TABLE transactions; Type: ACL; Schema: bookkeeper; Owner: postgres
--

GRANT SELECT ON TABLE bookkeeper.transactions TO authenticated;


--
-- Name: TABLE customers; Type: ACL; Schema: crm; Owner: postgres
--

GRANT SELECT ON TABLE crm.customers TO authenticated;


--
-- Name: TABLE interactions; Type: ACL; Schema: crm; Owner: postgres
--

GRANT SELECT ON TABLE crm.interactions TO authenticated;


--
-- Name: TABLE job; Type: ACL; Schema: cron; Owner: supabase_admin
--

GRANT SELECT ON TABLE cron.job TO postgres WITH GRANT OPTION;


--
-- Name: TABLE job_run_details; Type: ACL; Schema: cron; Owner: supabase_admin
--

GRANT ALL ON TABLE cron.job_run_details TO postgres WITH GRANT OPTION;


--
-- Name: TABLE pg_stat_statements; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON TABLE extensions.pg_stat_statements FROM postgres;
GRANT ALL ON TABLE extensions.pg_stat_statements TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements TO dashboard_user;


--
-- Name: TABLE pg_stat_statements_info; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON TABLE extensions.pg_stat_statements_info FROM postgres;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO dashboard_user;


--
-- Name: TABLE entries; Type: ACL; Schema: mileage; Owner: postgres
--

GRANT ALL ON TABLE mileage.entries TO authenticated;


--
-- Name: TABLE stats; Type: ACL; Schema: mileage; Owner: postgres
--

GRANT SELECT ON TABLE mileage.stats TO authenticated;


--
-- Name: TABLE ai_batches; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.ai_batches TO authenticated;
GRANT ALL ON TABLE public.ai_batches TO service_role;


--
-- Name: TABLE customers; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.customers TO authenticated;
GRANT ALL ON TABLE public.customers TO service_role;


--
-- Name: TABLE gis_permissions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.gis_permissions TO anon;
GRANT ALL ON TABLE public.gis_permissions TO authenticated;
GRANT ALL ON TABLE public.gis_permissions TO service_role;


--
-- Name: TABLE interactions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.interactions TO authenticated;
GRANT ALL ON TABLE public.interactions TO service_role;


--
-- Name: TABLE inventory_alerts; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.inventory_alerts TO anon;
GRANT ALL ON TABLE public.inventory_alerts TO authenticated;
GRANT ALL ON TABLE public.inventory_alerts TO service_role;


--
-- Name: TABLE inventory_items; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.inventory_items TO anon;
GRANT ALL ON TABLE public.inventory_items TO authenticated;
GRANT ALL ON TABLE public.inventory_items TO service_role;


--
-- Name: TABLE lead_activities; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.lead_activities TO authenticated;
GRANT ALL ON TABLE public.lead_activities TO service_role;


--
-- Name: TABLE lead_sources; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.lead_sources TO authenticated;
GRANT ALL ON TABLE public.lead_sources TO service_role;


--
-- Name: TABLE leads; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.leads TO authenticated;
GRANT ALL ON TABLE public.leads TO service_role;


--
-- Name: TABLE mileage_entries; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.mileage_entries TO authenticated;
GRANT ALL ON TABLE public.mileage_entries TO service_role;


--
-- Name: TABLE mileage_stats; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.mileage_stats TO authenticated;
GRANT ALL ON TABLE public.mileage_stats TO service_role;


--
-- Name: TABLE organizations; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.organizations TO authenticated;
GRANT ALL ON TABLE public.organizations TO service_role;


--
-- Name: TABLE recurring_payments; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.recurring_payments TO anon;
GRANT ALL ON TABLE public.recurring_payments TO authenticated;
GRANT ALL ON TABLE public.recurring_payments TO service_role;


--
-- Name: TABLE saved_properties; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.saved_properties TO anon;
GRANT ALL ON TABLE public.saved_properties TO authenticated;
GRANT ALL ON TABLE public.saved_properties TO service_role;


--
-- Name: TABLE scraped_properties; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.scraped_properties TO anon;
GRANT ALL ON TABLE public.scraped_properties TO authenticated;
GRANT ALL ON TABLE public.scraped_properties TO service_role;


--
-- Name: TABLE transactions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.transactions TO authenticated;
GRANT ALL ON TABLE public.transactions TO service_role;


--
-- Name: TABLE messages; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON TABLE realtime.messages TO postgres;
GRANT ALL ON TABLE realtime.messages TO dashboard_user;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO anon;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO authenticated;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO service_role;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.schema_migrations TO postgres;
GRANT ALL ON TABLE realtime.schema_migrations TO dashboard_user;
GRANT SELECT ON TABLE realtime.schema_migrations TO anon;
GRANT SELECT ON TABLE realtime.schema_migrations TO authenticated;
GRANT SELECT ON TABLE realtime.schema_migrations TO service_role;
GRANT ALL ON TABLE realtime.schema_migrations TO supabase_realtime_admin;


--
-- Name: TABLE subscription; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.subscription TO postgres;
GRANT ALL ON TABLE realtime.subscription TO dashboard_user;
GRANT SELECT ON TABLE realtime.subscription TO anon;
GRANT SELECT ON TABLE realtime.subscription TO authenticated;
GRANT SELECT ON TABLE realtime.subscription TO service_role;
GRANT ALL ON TABLE realtime.subscription TO supabase_realtime_admin;


--
-- Name: SEQUENCE subscription_id_seq; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO service_role;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO supabase_realtime_admin;


--
-- Name: TABLE buckets; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.buckets TO anon;
GRANT ALL ON TABLE storage.buckets TO authenticated;
GRANT ALL ON TABLE storage.buckets TO service_role;
GRANT ALL ON TABLE storage.buckets TO postgres;


--
-- Name: TABLE objects; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.objects TO anon;
GRANT ALL ON TABLE storage.objects TO authenticated;
GRANT ALL ON TABLE storage.objects TO service_role;
GRANT ALL ON TABLE storage.objects TO postgres;


--
-- Name: TABLE s3_multipart_uploads; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO anon;


--
-- Name: TABLE s3_multipart_uploads_parts; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads_parts TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO anon;


--
-- Name: TABLE hooks; Type: ACL; Schema: supabase_functions; Owner: supabase_functions_admin
--

GRANT ALL ON TABLE supabase_functions.hooks TO postgres;
GRANT ALL ON TABLE supabase_functions.hooks TO anon;
GRANT ALL ON TABLE supabase_functions.hooks TO authenticated;
GRANT ALL ON TABLE supabase_functions.hooks TO service_role;


--
-- Name: SEQUENCE hooks_id_seq; Type: ACL; Schema: supabase_functions; Owner: supabase_functions_admin
--

GRANT ALL ON SEQUENCE supabase_functions.hooks_id_seq TO postgres;
GRANT ALL ON SEQUENCE supabase_functions.hooks_id_seq TO anon;
GRANT ALL ON SEQUENCE supabase_functions.hooks_id_seq TO authenticated;
GRANT ALL ON SEQUENCE supabase_functions.hooks_id_seq TO service_role;


--
-- Name: TABLE migrations; Type: ACL; Schema: supabase_functions; Owner: supabase_functions_admin
--

GRANT ALL ON TABLE supabase_functions.migrations TO postgres;
GRANT ALL ON TABLE supabase_functions.migrations TO anon;
GRANT ALL ON TABLE supabase_functions.migrations TO authenticated;
GRANT ALL ON TABLE supabase_functions.migrations TO service_role;


--
-- Name: TABLE secrets; Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT SELECT,REFERENCES,DELETE,TRUNCATE ON TABLE vault.secrets TO postgres WITH GRANT OPTION;
GRANT SELECT,DELETE ON TABLE vault.secrets TO service_role;


--
-- Name: TABLE decrypted_secrets; Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT SELECT,REFERENCES,DELETE,TRUNCATE ON TABLE vault.decrypted_secrets TO postgres WITH GRANT OPTION;
GRANT SELECT,DELETE ON TABLE vault.decrypted_secrets TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: cron; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA cron GRANT ALL ON SEQUENCES TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: cron; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA cron GRANT ALL ON FUNCTIONS TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: cron; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA cron GRANT ALL ON TABLES TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON SEQUENCES TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON FUNCTIONS TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON TABLES TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: supabase_functions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: supabase_functions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: supabase_functions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA supabase_functions GRANT ALL ON TABLES TO service_role;


--
-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
         WHEN TAG IN ('DROP EXTENSION')
   EXECUTE FUNCTION extensions.set_graphql_placeholder();


ALTER EVENT TRIGGER issue_graphql_placeholder OWNER TO supabase_admin;

--
-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_cron_access();


ALTER EVENT TRIGGER issue_pg_cron_access OWNER TO supabase_admin;

--
-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
         WHEN TAG IN ('CREATE FUNCTION')
   EXECUTE FUNCTION extensions.grant_pg_graphql_access();


ALTER EVENT TRIGGER issue_pg_graphql_access OWNER TO supabase_admin;

--
-- Name: issue_pg_net_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_net_access();


ALTER EVENT TRIGGER issue_pg_net_access OWNER TO supabase_admin;

--
-- Name: pgrst_ddl_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end
   EXECUTE FUNCTION extensions.pgrst_ddl_watch();


ALTER EVENT TRIGGER pgrst_ddl_watch OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop
   EXECUTE FUNCTION extensions.pgrst_drop_watch();


ALTER EVENT TRIGGER pgrst_drop_watch OWNER TO supabase_admin;

--
-- PostgreSQL database dump complete
--

